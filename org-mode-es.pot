# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2014-03-23 10:44-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Plain text
#: org-mode.org:14
#, no-wrap
msgid "#+TITLE: Org Mode - Organize Your Life In Plain Text!\n"
msgstr "#+TITLE: Org Mode - Organiza Tu Vida En Texto Plano!\n"
msgid "#+DESCRIPTION: A description of how I currently use org-mode\n"
msgstr "+DESCRIPTION: Una descripción de cómo actualmente uso org-mode\n"

#. type: Plain text
#: org-mode.org:17
msgid "Org-mode is a fabulous organizational tool originally built by Carsten"
msgstr "Org-mode es una fabulosa herramienta organizacional originalmente desarrollada por Carsten"

msgid "Dominik that operates on plain text files.  Org-mode is part of Emacs."
msgstr "Dominik que opera en archivos de texto plano. Org-mode es parte de Emacs."

#. type: Plain text
#: org-mode.org:23
#, no-wrap
msgid "* How To Use This Document\n"
msgstr "* Cómo Usar Este documento\n"

#. type: Plain text
#: org-mode.org:28
msgid "This document assumes you've had some exposure to org-mode already so "
msgstr "Este documento asume que usted ya tiene experiencia con org-mode "

msgid "concepts like the agenda, capture mode, etc.  won't be completely foreign to "
msgstr "conceptos como la agenda, el modo capturar, etc.  no deberían ser completamente extraños para "

msgid "you.  More information about org-mode can be found in the "
msgstr "usted.  Más información acerca de org-mode puede ser encontrada en "

#. type: Plain text
#: org-mode.org:33
msgid "I have been using org-mode as my personal information manager for years "
msgstr "He estado usando org-mode como mi administrador personal de información por años "

"now.  I started small with just the default =TODO= and =DONE= keywords.  I "
"added small changes to my workflow and over time it evolved into what is "

msgid "described by this document."
msgstr "descriptos por este documento."

#. type: Plain text
#: org-mode.org:39
msgid ""
"I still change my workflow and try new things regularly.  This document "
"describes mature workflows in my current org-mode setup.  I tend to document "
"changes to my workflow 30 days after implementing them (assuming they are "
"still around at that point) so that the new workflow has a chance to mature."
msgstr ""

#. type: Plain text
#: org-mode.org:45
msgid ""
"Some of the customized Emacs settings described in this document are set at "
"their default values.  This explicitly shows the setting for important "
"org-mode variables used in my workflow and to keep my workflow behaviour "
"stable in the event that the default value changes in the future."
msgstr ""

#. type: Plain text
#: org-mode.org:56
msgid ""
"This document is available as an [[http://doc.norang.ca/org-mode.org][org "
"file]] which you can load in Emacs and tangle with =C-c C-v C-t= which will "
"create org-mode.el in the same directory as the org-mode.org file.  This "
"will extract all of the elisp examples in this document into a file you can "
"include in your .emacs file.  * License :PROPERTIES: :CUSTOM_ID: License "
":END: [2011-11-19 Sat 21:53]"
msgstr ""

#. type: Plain text
#: org-mode.org:63
msgid ""
"#+begin_example Copyright (C)  2013 Bernt Hansen.  Permission is granted to "
"copy, distribute and/or modify this document under the terms of the GNU Free "
"Documentation License, Version 1.3 or any later version published by the "
"Free Software Foundation; with no Invariant Sections, no Front-Cover Texts, "
"and no Back-Cover Texts."
msgstr ""

#. type: Plain text
#: org-mode.org:68
msgid ""
"Code in this document is free software: you can redistribute it and/or "
"modify it under the terms of the GNU General Public License as published by "
"the Free Software Foundation, either version 3 of the License, or (at your "
"option) any later version."
msgstr ""

#. type: Plain text
#: org-mode.org:74
msgid ""
"This code is distributed in the hope that it will be useful, but WITHOUT ANY "
"WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS "
"FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more "
"details.  #+end_example"
msgstr ""

#. type: Plain text
#: org-mode.org:79
msgid ""
"This document http://doc.norang.ca/org-mode.html (either in its "
"[[http://doc.norang.ca/org-mode.html][HTML format]] or in its "
"[[http://doc.norang.ca/org-mode.org][Org format]]) is licensed under the GNU "
"Free Documentation License version 1.3 or later "
"(http://www.gnu.org/copyleft/fdl.html)."
msgstr ""

#. type: Plain text
#: org-mode.org:87
msgid ""
"The code examples and CSS stylesheets are licensed under the GNU General "
"Public License v3 or later (http://www.gnu.org/licenses/gpl.html).  * Change "
"History - What's new :PROPERTIES: :CUSTOM_ID: ChangeHistory :END:"
msgstr ""

#. type: Plain text
#: org-mode.org:93
msgid ""
"#+name: org-mode-doc-version #+begin_src sh :exports none #!/bin/sh git "
"describe --abbrev=4 #+end_src"
msgstr ""

#. type: Plain text
#: org-mode.org:98
msgid ""
"#+name: org-mode-version #+begin_src sh :exports none cd ~/git/org-mode && "
"git describe HEAD #+end_src"
msgstr ""

#. type: Plain text
#: org-mode.org:102
msgid ""
"This is version call_org-mode-doc-version() of this document.  This document "
"is created using the publishing features of =org-mode= git version "
"call_org-mode-version()."
msgstr ""

#. type: Plain text
#: org-mode.org:105
msgid ""
"The source for this document can be found as a "
"[[http://doc.norang.ca/org-mode.org][plain text org file]].  I try to update "
"this document about once a month."
msgstr ""

#. type: Plain text
#: org-mode.org:112
msgid ""
"The change history for this document can be found at "
"[[http://git.norang.ca/?p%3Dorg-mode-doc.git%3Ba%3Dsummary][git://git.norang.ca/org-mode-doc.git]].  "
"* Getting Started :PROPERTIES: :CUSTOM_ID: GettingStarted :END:"
msgstr ""

#. type: Plain text
#: org-mode.org:120
msgid ""
"Getting started with =org-mode= is really easy.  You only need a few lines "
"in your emacs startup to use the latest version of org-mode from the =git= "
"repository.  ** Getting org-mode with Git :PROPERTIES: :CUSTOM_ID: "
"GettingOrgModeWithGit :END: [2012-06-24 Sun 11:21]"
msgstr ""

#. type: Plain text
#: org-mode.org:127
msgid ""
"I keep a copy of the org-mode =git= repository in =~/git/org-mode/=.  This "
"clone was created with #+begin_src sh cd ~/git git clone "
"git://orgmode.org/org-mode.git #+end_src"
msgstr ""

#. type: Plain text
#: org-mode.org:134
msgid ""
"To update and get new commits from the org-mode developers you can use "
"#+begin_src sh cd ~/git/org-mode git pull make uncompiled #+end_src"
msgstr ""

#. type: Plain text
#: org-mode.org:136
msgid ""
"I run uncompiled source files in my setup so the uncompiled =make= target is "
"all you need."
msgstr ""

#. type: Plain text
#: org-mode.org:142
msgid ""
"I normally track the =master= branch in the org-mode repository.  ** "
"Org-Mode Setup :PROPERTIES: :CUSTOM_ID: Setup :END:"
msgstr ""

#. type: Plain text
#: org-mode.org:146
msgid ""
"The following setup in my .emacs enables =org-mode= for most buffers.  "
"=org-mode= is the default mode for =.org=, =.org_archive=, and =.txt= files."
msgstr ""

#. type: Plain text
#: org-mode.org:161
msgid ""
"#+header: :tangle no #+begin_src emacs-lisp ;;; ;;; Org Mode ;;; "
"(add-to-list 'load-path (expand-file-name \"~/git/org-mode/lisp\"))  "
"(add-to-list 'auto-mode-alist "
"'(\"\\\\.\\\\(org\\\\|org_archive\\\\|txt\\\\)$\" . org-mode))  (require "
"'org)  ;; ;; Standard key bindings (global-set-key \"\\C-cl\" "
"'org-store-link)  (global-set-key \"\\C-ca\" 'org-agenda)  (global-set-key "
"\"\\C-cb\" 'org-iswitchb)  #+end_src"
msgstr ""

#. type: Plain text
#: org-mode.org:171
#, no-wrap
msgid ""
"#+header: :tangle yes\n"
"#+begin_src emacs-lisp :exports none\n"
";; The following setting is different from the document so that you\n"
";; can override the document path by setting your path in the variable\n"
";; org-mode-user-lisp-path\n"
";;\n"
"(if (boundp 'org-mode-user-lisp-path)\n"
"    (add-to-list 'load-path org-mode-user-lisp-path)\n"
"  (add-to-list 'load-path (expand-file-name \"~/git/org-mode/lisp\")))\n"
msgstr ""

#. type: Plain text
#: org-mode.org:180
msgid ""
"(add-to-list 'auto-mode-alist "
"'(\"\\\\.\\\\(org\\\\|org_archive\\\\|txt\\\\)$\" . org-mode))  (require "
"'org)  ;; ;; Standard key bindings (global-set-key \"\\C-cl\" "
"'org-store-link)  (global-set-key \"\\C-ca\" 'org-agenda)  (global-set-key "
"\"\\C-cb\" 'org-iswitchb)  #+end_src"
msgstr ""

#. type: Plain text
#: org-mode.org:182
msgid "That's all you need to get started using headlines and lists in org-mode."
msgstr ""

#. type: Plain text
#: org-mode.org:190
msgid ""
"The rest of this document describes customizations I use in my setup, how I "
"structure org-mode files, and other changes to fit the way I want org-mode "
"to work.  "

msgid "** Organizing Your Life Into Org Files"
msgstr "** Organizando Tu Vida En Archivos Org"

#. type: Plain text
#: org-mode.org:195
msgid ""
"Tasks are separated into logical groupings or projects.  Use separate org "
"files for large task groupings and subdirectories for collections of files "
"for multiple projects that belong together."
msgstr ""

#. type: Plain text
#: org-mode.org:197
msgid "Here are sample files that I use."
msgstr "Aquí unos archivos de ejemplo que uso."

#. type: Plain text
#: org-mode.org:199
msgid "The following org files collect non-work related tasks:"
msgstr ""

#. type: Plain text
#: org-mode.org:208
#, no-wrap
msgid ""
"| Filename     | Description                                |\n"
"|--------------+--------------------------------------------|\n"
"| todo.org     | Personal tasks and things to keep track of |\n"
"| gsoc2009.org | Google Summer of Code stuff for 2009       |\n"
"| farm.org     | Farm related tasks                         |\n"
"| mark.org     | Tasks related to my son Mark               |\n"
"| org.org      | Org-mode related tasks                     |\n"
"| git.org      | Git related tasks                          |\n"
msgstr ""

#. type: Plain text
#: org-mode.org:210
msgid "The following org-file collects org capture notes and tasks:"
msgstr ""

#. type: Plain text
#: org-mode.org:214
#, no-wrap
msgid ""
"| Filename   | Description         |\n"
"|------------+---------------------|\n"
"| refile.org | Capture task bucket |\n"
msgstr ""

#. type: Plain text
#: org-mode.org:217
msgid ""
"The following work-related org-files keep my business notes (using "
"fictitious client names)"
msgstr ""

#. type: Plain text
#: org-mode.org:226
#, no-wrap
msgid ""
"| Filename    | Description                             |\n"
"|-------------+-----------------------------------------|\n"
"| norang.org  | Norang tasks and notes                  |\n"
"| XYZ.org     | XYZ Corp tasks and notes                |\n"
"| ABC.org     | ABC Ltd tasks                           |\n"
"| ABC-DEF.org | ABC Ltd tasks for their client DEF Corp |\n"
"| ABC-KKK.org | ABC Ltd tasks for their client KKK Inc  |\n"
"| YYY.org     | YYY Inc tasks                           |\n"
msgstr ""

#. type: Plain text
#: org-mode.org:230
msgid ""
"Org-mode is great for dealing with multiple clients and client projects.  An "
"org file becomes the collection of projects, notes, etc. for a single client "
"or client-project."
msgstr ""

#. type: Plain text
#: org-mode.org:236
msgid ""
"Client ABC Ltd. has multiple customer systems that I work on.  Separating "
"the tasks for each client-customer into separate org files helps keep things "
"logically grouped and since clients come and go this allows entire org files "
"to be added or dropped from my agenda to keep only what is important visible "
"in agenda views."
msgstr ""

#. type: Plain text
#: org-mode.org:243
msgid ""
"Other org files are used for publishing only and do not contribute to the "
"agenda.  See [[#Publishing][Publishing and Exporting]] for more details.  "

msgid "** Agenda Setup"
msgstr "** Configuración de Agenda"

#. type: Plain text
#: org-mode.org:251
#, no-wrap
msgid ""
"Here is my current =org-agenda-files= setup.\n"
"#+header: :tangle no\n"
"#+begin_src emacs-lisp\n"
"(setq org-agenda-files (quote (\"~/git/org\"\n"
"                               \"~/git/org/client1\"\n"
"                               \"~/git/client2\")))\n"
"#+end_src\n"
msgstr ""

#. type: Plain text
#: org-mode.org:264
#, no-wrap
msgid ""
"#+header: :tangle yes\n"
"#+begin_src emacs-lisp :exports none\n"
";; The following setting is different from the document so that you\n"
";; can override the document org-agenda-files by setting your\n"
";; org-agenda-files in the variable org-user-agenda-files\n"
";;\n"
"(if (boundp 'org-user-agenda-files)\n"
"    (setq org-agenda-files org-user-agenda-files)\n"
"  (setq org-agenda-files (quote (\"~/git/org\"\n"
"                               \"~/git/org/client1\"\n"
"                               \"~/git/client2\"))))\n"
"#+end_src\n"
msgstr ""

#. type: Plain text
#: org-mode.org:271
msgid ""
"=org-mode= manages the =org-agenda-files= variable automatically using =C-c "
"[= and =C-c ]= to add and remove files respectively.  However, this replaces "
"my directory list with a list of explicit filenames instead and is not what "
"I want.  If this occurs then adding a new org file to any of the above "
"directories will not contribute to my agenda and I will probably miss "
"something important."
msgstr ""

#. type: Plain text
#: org-mode.org:278
msgid ""
"I have disabled the =C-c [= and =C-c ]= keys in =org-mode-hook= to prevent "
"messing up my list of directories in the =org-agenda-files= variable.  I "
"just add and remove directories manually in my =.emacs= file.  Changing the "
"list of directories in =org-agenda-files= happens very rarely since new "
"files in existing directories are automatically picked up."
msgstr ""

#. type: Plain text
#: org-mode.org:282
msgid ""
"I also disable the comment function =C-c ;= since I never use those.  I kept "
"accidentally hitting this key sequence when doing =C-c singlequote= for "
"editing source blocks."
msgstr ""

#. type: Plain text
#: org-mode.org:295
msgid ""
"In the example above I have =~/git/client2= in a separate git repository "
"from ~/git/org.  This gives me the flexibility of leaving confidential "
"information at the client site and having all of my personal information "
"available everywhere I use org-mode.  I synchronize my personal repositories "
"on multiple machines and skip the confidential info on the non-client laptop "
"I travel with.  =org-agenda-files= on this laptop does not include the "
"=~/git/client2= directory.  "

msgid "** Org File Structure"
msgstr "** Estructura de un Archivo Org"

#. type: Plain text
#: org-mode.org:298
msgid ""
"Most of my org files are set up with level 1 headings as main categories "
"only.  Tasks and projects normally start as level 2."
msgstr ""

#. type: Plain text
#: org-mode.org:300
msgid "Here are some examples of my level 1 headings in"
msgstr "Aquí están algunos ejemplos de my nivel 1 de encabezados en"

#. type: Plain text
#: org-mode.org:302
msgid "=todo.org=:"
msgstr "=todo.org=:"

#. type: Plain text
#: org-mode.org:304
msgid "- Special Dates"
msgstr "- Fechas Especiales"

#. type: Plain text
#: org-mode.org:306
#, no-wrap
msgid "  Includes level 2 headings for\n"
msgstr "  Incluye nivel 2 de encabezados para\n"

#. type: Bullet: '  - '
#: org-mode.org:310
msgid "Birthdays"
msgstr "Cumpleaños"

#. type: Bullet: '  - '
#: org-mode.org:310
msgid "Anniversaries"
msgstr "Aniversarios"

#. type: Bullet: '  - '
#: org-mode.org:310
msgid "Holidays"
msgstr "Vacaciones"

#. type: Plain text
#: org-mode.org:319
msgid ""
"- Finances - Health and Recreation - House Maintenance - Lawn and Garden "
"Maintenance - Notes - Tasks - Vehicle Maintenance - Passwords"
msgstr ""

#. type: Plain text
#: org-mode.org:322
msgid "=norang.org=:"
msgstr ""

#. type: Plain text
#: org-mode.org:333
msgid ""
"- System Maintenance - Payroll - Accounting - Finances - Hardware "
"Maintenance - Tasks - Research and Development - Notes - Purchase Order "
"Tracking - Passwords"
msgstr ""

#. type: Plain text
#: org-mode.org:337
msgid ""
"Each of these level 1 tasks normally has a =property drawer= specifying the "
"category for any tasks in that tree.  Level 1 headings are set up like this:"
msgstr ""

#. type: Plain text
#: org-mode.org:353
#, no-wrap
msgid ""
"#+begin_src org :exports src\n"
",* Health and Recreation\n"
"  :PROPERTIES:\n"
"  :CATEGORY: Health\n"
"  :END:\n"
"  ...\n"
",* House Maintenance\n"
"  :PROPERTIES:\n"
"  :CATEGORY: House\n"
"  :END:\n"
"#+end_src\n"
"** Key bindings\n"
":PROPERTIES:\n"
":CUSTOM_ID: KeyBindings\n"
":END:\n"
msgstr ""

#. type: Plain text
#: org-mode.org:357
msgid ""
"I live in the agenda.  To make getting to the agenda faster I mapped =F12= "
"to the sequence =C-c a= since I'm using it hundreds of times a day."
msgstr ""

#. type: Plain text
#: org-mode.org:359
msgid ""
"I have the following custom key bindings set up for my emacs (sorted by "
"frequency)."
msgstr ""

#. type: Plain text
#: org-mode.org:391
#, no-wrap
msgid ""
"| Key     | For                                             | Used       |\n"
"|---------+-------------------------------------------------+------------|\n"
"| F12     | Agenda (1 key less than C-c a)                  | Very Often |\n"
"| C-c b   | Switch to org file                              | Very Often |\n"
"| F11     | Goto currently clocked item                     | Very Often |\n"
"| C-c c   | Capture a task                                  | Very Often |\n"
"| C-F11   | Clock in a task (show menu with prefix)         | Often      |\n"
"| f9 g    | Gnus - I check mail regularly                   | Often      |\n"
"| f5      | Show todo items for this subtree                | Often      |\n"
"| S-f5    | Widen                                           | Often      |\n"
"| f9 b    | Quick access to bbdb data                       | Often      |\n"
"| f9 c    | Calendar access                                 | Often      |\n"
"| C-S-f12 | Save buffers and publish current project        | Often      |\n"
"| C-c l   | Store a link for retrieval with C-c C-l         | Often      |\n"
"| f8      | Go to next org file in org-agenda-files         | Sometimes  |\n"
"| f9 r    | Boxquote selected region                        | Sometimes  |\n"
"| f9 t    | Insert inactive timestamp                       | Sometimes  |\n"
"| f9 v    | Toggle visible mode (for showing/editing links) | Sometimes  |\n"
"| C-f9    | Previous buffer                                 | Sometimes  |\n"
"| C-f10   | Next buffer                                     | Sometimes  |\n"
"| C-x n r | Narrow to region                                | Sometimes  |\n"
"| f9 f    | Boxquote insert a file                          | Sometimes  |\n"
"| f9 i    | Info manual                                     | Sometimes  |\n"
"| f9 I    | Punch Clock In                                  | Sometimes  |\n"
"| f9 O    | Punch Clock Out                                 | Sometimes  |\n"
"| f9 o    | Switch to org scratch buffer                    | Sometimes  |\n"
"| f9 s    | Switch to scratch buffer                        | Sometimes  |\n"
"| f9 h    | Hide other tasks                                | Rare       |\n"
"| f7      | Toggle line truncation/wrap                     | Rare       |\n"
"| f9 T    | Toggle insert inactive timestamp                | Rare       |\n"
"| C-c a   | Enter Agenda (minimal emacs testing)            | Rare       |\n"
msgstr ""

#. type: Plain text
#: org-mode.org:409
msgid ""
"Here is the keybinding setup in lisp: #+header: :tangle yes #+begin_src "
"emacs-lisp ;; Custom Key Bindings (global-set-key (kbd \"<f12>\") "
"'org-agenda)  (global-set-key (kbd \"<f5>\") 'bh/org-todo)  (global-set-key "
"(kbd \"<S-f5>\") 'bh/widen)  (global-set-key (kbd \"<f7>\") "
"'bh/set-truncate-lines)  (global-set-key (kbd \"<f8>\") "
"'org-cycle-agenda-files)  (global-set-key (kbd \"<f9> <f9>\") "
"'bh/show-org-agenda)  (global-set-key (kbd \"<f9> b\") 'bbdb)  "
"(global-set-key (kbd \"<f9> c\") 'calendar)  (global-set-key (kbd \"<f9> "
"f\") 'boxquote-insert-file)  (global-set-key (kbd \"<f9> g\") 'gnus)  "
"(global-set-key (kbd \"<f9> h\") 'bh/hide-other)  (global-set-key (kbd "
"\"<f9> n\") 'bh/toggle-next-task-display)  (global-set-key (kbd \"<f9> w\") "
"'widen)"
msgstr ""

#. type: Plain text
#: org-mode.org:412
msgid ""
"(global-set-key (kbd \"<f9> I\") 'bh/punch-in)  (global-set-key (kbd \"<f9> "
"O\") 'bh/punch-out)"
msgstr ""

#. type: Plain text
#: org-mode.org:414
msgid "(global-set-key (kbd \"<f9> o\") 'bh/make-org-scratch)"
msgstr ""

#. type: Plain text
#: org-mode.org:417
msgid ""
"(global-set-key (kbd \"<f9> r\") 'boxquote-region)  (global-set-key (kbd "
"\"<f9> s\") 'bh/switch-to-scratch)"
msgstr ""

#. type: Plain text
#: org-mode.org:420
msgid ""
"(global-set-key (kbd \"<f9> t\") 'bh/insert-inactive-timestamp)  "
"(global-set-key (kbd \"<f9> T\") 'bh/toggle-insert-inactive-timestamp)"
msgstr ""

#. type: Plain text
#: org-mode.org:432
msgid ""
"(global-set-key (kbd \"<f9> v\") 'visible-mode)  (global-set-key (kbd \"<f9> "
"l\") 'org-toggle-link-display)  (global-set-key (kbd \"<f9> SPC\") "
"'bh/clock-in-last-task)  (global-set-key (kbd \"C-<f9>\") 'previous-buffer)  "
"(global-set-key (kbd \"M-<f9>\") 'org-toggle-inline-images)  (global-set-key "
"(kbd \"C-x n r\") 'narrow-to-region)  (global-set-key (kbd \"C-<f10>\") "
"'next-buffer)  (global-set-key (kbd \"<f11>\") 'org-clock-goto)  "
"(global-set-key (kbd \"C-<f11>\") 'org-clock-in)  (global-set-key (kbd "
"\"C-s-<f12>\") 'bh/save-then-publish)  (global-set-key (kbd \"C-c c\") "
"'org-capture)"
msgstr ""

#. type: Plain text
#: org-mode.org:441
#, no-wrap
msgid ""
"(defun bh/hide-other ()\n"
"  (interactive)\n"
"  (save-excursion\n"
"    (org-back-to-heading 'invisible-ok)\n"
"    (hide-other)\n"
"    (org-cycle)\n"
"    (org-cycle)\n"
"    (org-cycle)))\n"
msgstr ""

#. type: Plain text
#: org-mode.org:450
#, no-wrap
msgid ""
"(defun bh/set-truncate-lines ()\n"
"  \"Toggle value of truncate-lines and refresh window display.\"\n"
"  (interactive)\n"
"  (setq truncate-lines (not truncate-lines))\n"
"  ;; now refresh window display (an idiom from simple.el):\n"
"  (save-excursion\n"
"    (set-window-start (selected-window)\n"
"                      (window-start (selected-window)))))\n"
msgstr ""

#. type: Plain text
#: org-mode.org:455
#, no-wrap
msgid ""
"(defun bh/make-org-scratch ()\n"
"  (interactive)\n"
"  (find-file \"/tmp/publish/scratch.org\")\n"
"  (gnus-make-directory \"/tmp/publish\"))\n"
msgstr ""

#. type: Plain text
#: org-mode.org:460
#, no-wrap
msgid ""
"(defun bh/switch-to-scratch ()\n"
"  (interactive)\n"
"  (switch-to-buffer \"*scratch*\"))\n"
"#+end_src\n"
msgstr ""

#. type: Plain text
#: org-mode.org:470
msgid ""
"The main reason I have special key bindings (like =F11=, and =F12=) is so "
"that the keys work in any mode.  If I'm in the Gnus summary buffer then =C-u "
"C-c C-x C-i= doesn't work, but the =C-F11= key combination does and this "
"saves me time since I don't have to visit an org-mode buffer first just to "
"clock in a recent task.  * Tasks and States :PROPERTIES: :CUSTOM_ID: "
"TasksAndStates :END:"
msgstr ""

#. type: Plain text
#: org-mode.org:475
msgid ""
"I use one set of TODO keywords for all of my org files.  Org-mode lets you "
"define TODO keywords per file but I find it's easier to have a standard set "
"of TODO keywords globally so I can use the same setup in any org file I'm "
"working with."
msgstr ""

#. type: Plain text
#: org-mode.org:484
msgid ""
"The only exception to this is this document :) since I don't want =org-mode= "
"hiding the =TODO= keyword when it appears in headlines.  I've set up a dummy "
"=#+SEQ_TODO: FIXME FIXED= entry at the top of this file just to leave my "
"=TODO= keyword untouched in this document.  ** TODO keywords :PROPERTIES: "
":CUSTOM_ID: TodoKeywords :END:"
msgstr ""

#. type: Plain text
#: org-mode.org:486
msgid ""
"I use a light colour theme in emacs.  I find this easier to read on bright "
"sunny days."
msgstr ""

#. type: Plain text
#: org-mode.org:488
msgid "Here are my =TODO= state keywords and colour settings:"
msgstr "Aquí están mis estados y configuraciones de colores para =TODO=:"

#. type: Plain text
#: org-mode.org:494
#, no-wrap
msgid ""
"#+header: :tangle yes\n"
"#+begin_src emacs-lisp\n"
"(setq org-todo-keywords\n"
"      (quote ((sequence \"TODO(t)\" \"NEXT(n)\" \"|\" \"DONE(d)\")\n"
"              (sequence \"WAITING(w@/!)\" \"HOLD(h@/!)\" \"|\" "
"\"CANCELLED(c@/!)\" \"PHONE\" \"MEETING\"))))\n"
msgstr ""

#. type: Plain text
#: org-mode.org:509
#, no-wrap
msgid ""
"(setq org-todo-keyword-faces\n"
"      (quote ((\"TODO\" :foreground \"red\" :weight bold)\n"
"              (\"NEXT\" :foreground \"blue\" :weight bold)\n"
"              (\"DONE\" :foreground \"forest green\" :weight bold)\n"
"              (\"WAITING\" :foreground \"orange\" :weight bold)\n"
"              (\"HOLD\" :foreground \"magenta\" :weight bold)\n"
"              (\"CANCELLED\" :foreground \"forest green\" :weight bold)\n"
"              (\"MEETING\" :foreground \"forest green\" :weight bold)\n"
"              (\"PHONE\" :foreground \"forest green\" :weight bold))))\n"
"#+end_src\n"

msgid "*** Task States\n"
msgstr "*** Estados de Tareas\n"

#. type: Plain text
#: org-mode.org:511
msgid "Tasks go through the sequence =TODO= -> =DONE=."
msgstr ""

#. type: Plain text
#: org-mode.org:513
msgid "The following diagram shows the possible state transitions for a task."
msgstr "El siguiente diagrama muestra el posible estado de transiciones para una tarea"

#. type: Plain text
#: org-mode.org:541
msgid ""
"#+begin_src plantuml :file normal_task_states.png :cache yes title Task "
"States [*] -> TODO TODO -> NEXT TODO -> DONE NEXT -> DONE DONE -> [*] TODO "
"--> WAITING WAITING --> TODO NEXT --> WAITING WAITING --> NEXT HOLD --> "
"CANCELLED WAITING --> CANCELLED CANCELLED --> [*] TODO --> HOLD HOLD --> "
"TODO TODO --> CANCELLED TODO: t NEXT: n DONE: d WAITING:w note right of "
"WAITING: Note records\\nwhat it is waiting for HOLD:h note right of "
"CANCELLED: Note records\\nwhy it was cancelled CANCELLED:c WAITING --> DONE "
"#+end_src"
msgstr ""

#. type: Plain text
#: org-mode.org:544
msgid ""
"#+results[c0362b66d6337f3ae0ac7ab2d715687debfa6652]: "
"[[file:normal_task_states.png]]"
msgstr ""

#. type: Plain text
#: org-mode.org:549
#, no-wrap
msgid "*** Project Task States\n"
msgstr "*** Estados de Tareas de Proyectos\n"

#. type: Plain text
#: org-mode.org:554
msgid ""
"I use a lazy project definition.  I don't like to bother with manually "
"stating 'this is a project' and 'that is not a project'.  For me a project "
"definition is really simple.  If a task has subtasks with a todo keyword "
"then it's a project.  That's it."
msgstr ""

#. type: Plain text
#: org-mode.org:564
msgid ""
"Projects can be defined at any level - just create a task with a todo state "
"keyword that has at least one subtask also with a todo state keyword and you "
"have a project.  Projects use the same todo keywords as regular tasks.  One "
"subtask of a project needs to be marked =NEXT= so the project is not on the "
"stuck projects list.  "

msgid "*** Phone Calls"
msgstr "*** Llamadas Telefónicas"

#. type: Plain text
#: org-mode.org:575
msgid ""
"Telephone calls are special.  They are created in a done state by a capture "
"task.  The time of the call is recorded for as long as the capture task is "
"active.  If I need to look up other details and want to close the capture "
"task early I can just =C-c C-c= to close the capture task (stopping the "
"clock) and then =f9 SPC= to resume the clock in the phone call while I do "
"other things.  #+begin_src plantuml :file phone_states.png :cache yes title "
"Phone Call Task State [*] -> PHONE PHONE -> [*] #+end_src"
msgstr ""

#. type: Plain text
#: org-mode.org:578
msgid ""
"#+results[7fcae03150f58bbcc260379916083e99a91983c4]: "
"[[file:phone_states.png]]"
msgstr ""

#. type: Plain text
#: org-mode.org:583
#, no-wrap
msgid "*** Meetings\n"
msgstr "*** Reuniones\n"

#. type: Plain text
#: org-mode.org:591
msgid ""
"Meetings are special.  They are created in a done state by a capture task.  "
"I use the MEETING capture template when someone interrupts what I'm doing "
"with a question or discussion.  This is handled similarly to phone calls "
"where I clock the amount of time spent with whomever it is and record some "
"notes of what was discussed (either during or after the meeting) depending "
"on content, length, and complexity of the discussion."
msgstr ""

#. type: Plain text
#: org-mode.org:602
msgid ""
"The time of the meeting is recorded for as long as the capture task is "
"active.  If I need to look up other details and want to close the capture "
"task early I can just =C-c C-c= to close the capture task (stopping the "
"clock) and then =f9 SPC= to resume the clock in the meeting task while I do "
"other things.  #+begin_src plantuml :file meeting_states.png :cache yes "
"title Meeting Task State [*] -> MEETING MEETING -> [*] #+end_src"
msgstr ""

#. type: Plain text
#: org-mode.org:610
#, no-wrap
msgid "** Fast Todo Selection\n"
msgstr "** Rápida selección TODO\n"

#. type: Plain text
#: org-mode.org:614
msgid ""
"Fast todo selection allows changing from any task todo state to any other "
"state directly by selecting the appropriate key from the fast todo selection "
"key menu.  This is a great feature!"
msgstr ""

#. type: Plain text
#: org-mode.org:621
msgid "Changing a task state is done with"
msgstr "Cambiando el estado de una tarea terminada con"

#. type: Plain text
#: org-mode.org:623
msgid ""
"where =KEY= is the appropriate fast todo state selection key as defined in "
"=org-todo-keywords=."
msgstr ""

#. type: Plain text
#: org-mode.org:638
msgid ""
"The setting #+header: :tangle yes #+begin_src emacs-lisp (setq "
"org-treat-S-cursor-todo-selection-as-state-change nil)  #+end_src allows "
"changing todo states with S-left and S-right skipping all of the normal "
"processing when entering or leaving a todo state.  This cycles through the "
"todo states but skips setting timestamps and entering notes which is very "
"convenient when all you want to do is fix up the status of an entry.  ** "
"TODO state triggers :PROPERTIES: :CUSTOM_ID: ToDoStateTriggers :END:"
msgstr ""

#. type: Plain text
#: org-mode.org:644
msgid ""
"I have a few triggers that automatically assign tags to tasks based on state "
"changes.  If a task moves to =CANCELLED= state then it gets a =CANCELLED= "
"tag.  Moving a =CANCELLED= task back to =TODO= removes the =CANCELLED= tag.  "
"These are used for filtering tasks in agenda views which I'll talk about "
"later."
msgstr ""

#. type: Plain text
#: org-mode.org:646
msgid "The triggers break down to the following rules:"
msgstr ""

#. type: Plain text
#: org-mode.org:654
msgid ""
"- Moving a task to =CANCELLED= adds a =CANCELLED= tag - Moving a task to "
"=WAITING= adds a =WAITING= tag - Moving a task to =HOLD= adds =WAITING= and "
"=HOLD= tags - Moving a task to a done state removes =WAITING= and =HOLD= "
"tags - Moving a task to =TODO= removes =WAITING=, =CANCELLED=, and =HOLD= "
"tags - Moving a task to =NEXT= removes =WAITING=, =CANCELLED=, and =HOLD= "
"tags - Moving a task to =DONE= removes =WAITING=, =CANCELLED=, and =HOLD= "
"tags"
msgstr ""

#. type: Plain text
#: org-mode.org:656
msgid "The tags are used to filter tasks in the agenda views conveniently."
msgstr ""

#. type: Plain text
#: org-mode.org:672
#, no-wrap
msgid ""
"#+header: :tangle yes\n"
"#+begin_src emacs-lisp \n"
"(setq org-todo-state-tags-triggers\n"
"      (quote ((\"CANCELLED\" (\"CANCELLED\" . t))\n"
"              (\"WAITING\" (\"WAITING\" . t))\n"
"              (\"HOLD\" (\"WAITING\") (\"HOLD\" . t))\n"
"              (done (\"WAITING\") (\"HOLD\"))\n"
"              (\"TODO\" (\"WAITING\") (\"CANCELLED\") (\"HOLD\"))\n"
"              (\"NEXT\" (\"WAITING\") (\"CANCELLED\") (\"HOLD\"))\n"
"              (\"DONE\" (\"WAITING\") (\"CANCELLED\") (\"HOLD\")))))\n"
"#+end_src\n"
"* Adding New Tasks Quickly with Org Capture\n"
":PROPERTIES:\n"
":CUSTOM_ID: Capture\n"
":END:\n"
msgstr ""

#. type: Plain text
#: org-mode.org:674
msgid "Org Capture mode replaces remember mode for capturing tasks and notes."
msgstr ""

#. type: Plain text
#: org-mode.org:679
msgid ""
"To add new tasks efficiently I use a minimal number of capture templates.  I "
"used to have lots of capture templates, one for each org-file.  I'd start "
"org-capture with =C-c c= and then pick a template that filed the task under "
"=* Tasks= in the appropriate file."
msgstr ""

#. type: Plain text
#: org-mode.org:690
msgid ""
"I found I still needed to refile these capture tasks again to the correct "
"location within the org-file so all of these different capture templates "
"weren't really helping at all.  Since then I've changed my workflow to use a "
"minimal number of capture templates -- I create the new task quickly and "
"refile it once.  This also saves me from maintaining my org-capture "
"templates when I add a new org file.  "

msgid "** Capture Templates"
msgstr "** Plantillas para Capturar"

#. type: Plain text
#: org-mode.org:693
msgid "When a new task needs to be added I categorize it into one of a few things:"
msgstr "Cuando necesito agregar una nueva tarea la categorizo en una de pocas cosas:"

#. type: Plain text
#: org-mode.org:701
msgid "- A phone call (p)  - A meeting (m)  - An email I need to respond to (r)  - "
msgstr "- Una llamada telefónica (p)  - Una reunión (m)  - Un email que necesito responder a (r)  - "

msgid "A new task (t)  - A new note (n)  - An interruption (j)  - A new habit (h)"
msgstr "Una nueva tarea (t)  - Una nueva nota (n)  - Una interrupción (j)  - Un nuevo habito (h)"

#. type: Plain text
#: org-mode.org:703
msgid "and pick the appropriate capture task."
msgstr ""

#. type: Plain text
#: org-mode.org:705
msgid "Here is my setup for org-capture"
msgstr ""

#. type: Plain text
#: org-mode.org:710
msgid ""
"#+header: :tangle yes #+begin_src emacs-lisp (setq org-directory "
"\"~/git/org\")  (setq org-default-notes-file \"~/git/org/refile.org\")"
msgstr ""

#. type: Plain text
#: org-mode.org:713
msgid ""
";; I use C-c c to start capture mode (global-set-key (kbd \"C-c c\") "
"'org-capture)"
msgstr ""

#. type: Plain text
#: org-mode.org:733
#, no-wrap
msgid ""
";; Capture templates for: TODO tasks, Notes, appointments, phone calls, "
"meetings, and org-protocol\n"
"(setq org-capture-templates\n"
"      (quote ((\"t\" \"todo\" entry (file \"~/git/org/refile.org\")\n"
"               \"* TODO %?\\n%U\\n%a\\n\" :clock-in t :clock-resume t)\n"
"              (\"r\" \"respond\" entry (file \"~/git/org/refile.org\")\n"
"               \"* NEXT Respond to %:from on %:subject\\nSCHEDULED: "
"%t\\n%U\\n%a\\n\" :clock-in t :clock-resume t :immediate-finish t)\n"
"              (\"n\" \"note\" entry (file \"~/git/org/refile.org\")\n"
"               \"* %? :NOTE:\\n%U\\n%a\\n\" :clock-in t :clock-resume t)\n"
"              (\"j\" \"Journal\" entry (file+datetree "
"\"~/git/org/diary.org\")\n"
"               \"* %?\\n%U\\n\" :clock-in t :clock-resume t)\n"
"              (\"w\" \"org-protocol\" entry (file "
"\"~/git/org/refile.org\")\n"
"               \"* TODO Review %c\\n%U\\n\" :immediate-finish t)\n"
"              (\"m\" \"Meeting\" entry (file \"~/git/org/refile.org\")\n"
"               \"* MEETING with %? :MEETING:\\n%U\" :clock-in t "
":clock-resume t)\n"
"              (\"p\" \"Phone call\" entry (file \"~/git/org/refile.org\")\n"
"               \"* PHONE %? :PHONE:\\n%U\" :clock-in t :clock-resume t)\n"
"              (\"h\" \"Habit\" entry (file \"~/git/org/refile.org\")\n"
"               \"* NEXT %?\\n%U\\n%a\\nSCHEDULED: %(format-time-string "
"\\\"<%Y-%m-%d %a .+1d/3d>\\\")\\n:PROPERTIES:\\n:STYLE: "
"habit\\n:REPEAT_TO_STATE: NEXT\\n:END:\\n\"))))\n"
"#+end_src\n"
msgstr ""

#. type: Plain text
#: org-mode.org:739
msgid ""
"Capture mode now handles automatically clocking in and out of a capture "
"task.  This all works out of the box now without special hooks.  When I "
"start a capture mode task the task is clocked in as specified by =:clock-in "
"t= and when the task is filed with =C-c C-c= the clock resumes on the "
"original clocking task."
msgstr ""

#. type: Plain text
#: org-mode.org:745
msgid ""
"The quick clocking in and out of capture mode tasks (often it takes less "
"than a minute to capture some new task details) can leave empty clock "
"drawers in my tasks which aren't really useful.  Since I remove clocking "
"lines with 0:00 length I end up with a clock drawer like this:"
msgstr ""

#. type: Plain text
#: org-mode.org:754
#, no-wrap
msgid ""
"#+begin_src org :exports src\n"
",* TODO New Capture Task\n"
"  :LOGBOOK:\n"
"  :END:\n"
"  [2010-05-08 Sat 13:53]\n"
"#+end_src\n"
"I have the following setup to remove these empty =LOGBOOK= drawers if\n"
"they occur.\n"
msgstr ""

#. type: Plain text
#: org-mode.org:763
#, no-wrap
msgid ""
"#+header: :tangle yes\n"
"#+begin_src emacs-lisp\n"
";; Remove empty LOGBOOK drawers on clock out\n"
"(defun bh/remove-empty-drawer-on-clock-out ()\n"
"  (interactive)\n"
"  (save-excursion\n"
"    (beginning-of-line 0)\n"
"    (org-remove-empty-drawer-at (point))))\n"
msgstr ""

#. type: Plain text
#: org-mode.org:770
msgid ""
"(add-hook 'org-clock-out-hook 'bh/remove-empty-drawer-on-clock-out 'append)  "
"#+end_src ** Separate file for Capture Tasks :PROPERTIES: :CUSTOM_ID: "
"CaptureRefileOrg :END:"
msgstr ""

#. type: Plain text
#: org-mode.org:772
msgid "I have a single org file which is the target for my capture templates."
msgstr ""

#. type: Plain text
#: org-mode.org:776
msgid ""
"I store notes, tasks, phone calls, and org-protocol tasks in =refile.org=.  "
"I used to use multiple files but found that didn't really have any advantage "
"over a single file."
msgstr ""

#. type: Plain text
#: org-mode.org:779
msgid ""
"Normally this file is empty except for a single line at the top which "
"creates a =REFILE= tag for anything in the file."
msgstr ""

#. type: Plain text
#: org-mode.org:788
msgid ""
"The file has a single permanent line at the top like this #+begin_src org "
":exports src ,#+FILETAGS: REFILE #+end_src ** Capture Tasks is all about "
"being FAST :PROPERTIES: :CUSTOM_ID: CaptureTasksAreFast :END:"
msgstr ""

#. type: Plain text
#: org-mode.org:793
msgid ""
"Okay I'm in the middle of something and oh yeah - I have to remember to do "
"that.  I don't stop what I'm doing.  I'm probably clocking a project I'm "
"working on and I don't want to lose my focus on that but I can't afford to "
"forget this little thing that just came up."
msgstr ""

#. type: Plain text
#: org-mode.org:796
msgid ""
"So what do I do? Hit =C-c c= to start capture mode and select =t= since it's "
"a new task and I get a buffer like this:"
msgstr ""

#. type: Plain text
#: org-mode.org:800
#, no-wrap
msgid ""
"#+begin_src org :exports src\n"
",* TODO \n"
"  [2010-08-05 Thu 21:06]\n"
msgstr ""

#. type: Plain text
#: org-mode.org:803
#, no-wrap
msgid ""
"  "
"[[file:~/git/org-mode-doc/org-mode.org::*Capture%20Tasks%20is%20all%20about%20being%20FAST][Capture "
"Tasks is all about being FAST]]\n"
"#+end_src\n"
msgstr ""

#. type: Plain text
#: org-mode.org:808
msgid ""
"Enter the details of the TODO item and =C-c C-c= to file it away in "
"refile.org and go right back to what I'm really working on secure in the "
"knowledge that that item isn't going to get lost and I don't have to think "
"about it anymore at all now."
msgstr ""

#. type: Plain text
#: org-mode.org:817
msgid ""
"The amount of time I spend entering the captured note is clocked.  The "
"capture templates are set to automatically clock in and out of the capture "
"task.  This is great for interruptions and telephone calls too.  * Refiling "
"Tasks :PROPERTIES: :CUSTOM_ID: Refiling :END:"
msgstr ""

#. type: Plain text
#: org-mode.org:822
msgid ""
"Refiling tasks is easy.  After collecting a bunch of new tasks in my "
"refile.org file using capture mode I need to move these to the correct org "
"file and topic.  All of my active org-files are in my =org-agenda-files= "
"variable and contribute to the agenda."
msgstr ""

#. type: Plain text
#: org-mode.org:830
msgid ""
"I collect capture tasks in refile.org for up to a week.  These now stand out "
"daily on my block agenda and I usually refile them during the day.  I like "
"to keep my refile task list empty.  ** Refile Setup :PROPERTIES: :CUSTOM_ID: "
"RefileSetup :END:"
msgstr ""

#. type: Plain text
#: org-mode.org:832
msgid "To refile tasks in org you need to tell it where you want to refile things."
msgstr ""

#. type: Plain text
#: org-mode.org:835
msgid ""
"In my setup I let any file in =org-agenda-files= and the current file "
"contribute to the list of valid refile targets."
msgstr ""

#. type: Plain text
#: org-mode.org:849
msgid ""
"I've recently moved to using IDO to complete targets directly.  I find this "
"to be faster than my previous complete in steps setup.  At first I didn't "
"like IDO but after reviewing the documentation again and learning about "
"=C-SPC= to limit target searches I find it is much better than my previous "
"complete-in-steps setup.  Now when I want to refile something I do =C-c C-w= "
"to start the refile process, then type something to get some matching "
"targets, then =C-SPC= to restrict the matches to the current list, then "
"continue searching with some other text to find the target I need.  =C-j= "
"also selects the current completion as the final target.  I like this a "
"lot.  I show full outline paths in the targets so I can have the same "
"heading in multiple subtrees or projects and still tell them apart while "
"refiling."
msgstr ""

#. type: Plain text
#: org-mode.org:852
msgid ""
"I now exclude =DONE= state tasks as valid refile targets.  This helps to "
"keep the refile target list to a reasonable size."
msgstr ""

#. type: Plain text
#: org-mode.org:859
#, no-wrap
msgid ""
"Here is my refile configuration:\n"
"#+header: :tangle yes\n"
"#+begin_src emacs-lisp\n"
"; Targets include this file and any file contributing to the agenda - up to "
"9 levels deep\n"
"(setq org-refile-targets (quote ((nil :maxlevel . 9)\n"
"                                 (org-agenda-files :maxlevel . 9))))\n"
msgstr ""

#. type: Plain text
#: org-mode.org:862
msgid ""
"; Use full outline paths for refile targets - we file directly with IDO "
"(setq org-refile-use-outline-path t)"
msgstr ""

#. type: Plain text
#: org-mode.org:865
msgid ""
"; Targets complete directly with IDO (setq "
"org-outline-path-complete-in-steps nil)"
msgstr ""

#. type: Plain text
#: org-mode.org:868
msgid ""
"; Allow refile to create parent tasks with confirmation (setq "
"org-refile-allow-creating-parent-nodes (quote confirm))"
msgstr ""

#. type: Plain text
#: org-mode.org:879
msgid ""
"; Use IDO for both buffer and file completion and ido-everywhere to t (setq "
"org-completion-use-ido t)  (setq ido-everywhere t)  (setq "
"ido-max-directory-size 100000)  (ido-mode (quote both))  ; Use the current "
"window when visiting files and buffers with ido (setq "
"ido-default-file-method 'selected-window)  (setq ido-default-buffer-method "
"'selected-window)  ; Use the current window for indirect buffer display "
"(setq org-indirect-buffer-display 'current-window)"
msgstr ""

#. type: Plain text
#: org-mode.org:885
#, no-wrap
msgid ""
";;;; Refile settings\n"
"; Exclude DONE state tasks from refile targets\n"
"(defun bh/verify-refile-target ()\n"
"  \"Exclude todo keywords with a done state from refile targets\"\n"
"  (not (member (nth 2 (org-heading-components)) org-done-keywords)))\n"
msgstr ""

#. type: Plain text
#: org-mode.org:888
msgid "(setq org-refile-target-verify-function 'bh/verify-refile-target)  #+end_src"
msgstr ""

#. type: Plain text
#: org-mode.org:896
msgid ""
"To refile a task to my =norang.org= file under =System Maintenance= I just "
"put the cursor on the task and hit =C-c C-w= and enter =nor C-SPC sys RET= "
"and it's done.  IDO completion makes locating targets a snap.  ** Refiling "
"Tasks :PROPERTIES: :CUSTOM_ID: RefilingTasks :END:"
msgstr ""

#. type: Plain text
#: org-mode.org:901
msgid ""
"Tasks to refile are in their own section of the block agenda.  To find tasks "
"to refile I run my agenda view with =F12 SPC= and scroll down to second "
"section of the block agenda: =Tasks to Refile=.  This view shows all tasks "
"(even ones marked in a =done= state)."
msgstr ""

#. type: Plain text
#: org-mode.org:907
msgid ""
"Bulk refiling in the agenda works very well for multiple tasks going to the "
"same place.  Just mark the tasks with =m= and then =B r= to refile all of "
"them to a new location.  Occasionally I'll also refile tasks as subtasks of "
"the current clocking task using =C-2 C-c C-w= from the =refile.org= file."
msgstr ""

#. type: Plain text
#: org-mode.org:914
msgid ""
"Refiling all of my tasks tends to take less than a minute so I normally do "
"this a couple of times a day.  ** Refiling Notes :PROPERTIES: :CUSTOM_ID: "
"RefilingNotes :END:"
msgstr ""

#. type: Plain text
#: org-mode.org:919
msgid ""
"I keep a =* Notes= headline in most of my org-mode files.  Notes have a "
"=NOTE= tag which is created by the capture template for notes.  This allows "
"finding notes across multiple files easily using the agenda search "
"functions."
msgstr ""

#. type: Plain text
#: org-mode.org:930
msgid ""
"Notes created by capture tasks go first to =refile.org= and are later "
"refiled to the appropriate project file.  Some notes that are project "
"related get filed to the appropriate project instead of under the catchall "
"=* NOTES= task.  Generally these types of notes are specific to the project "
"and not generally useful -- so removing them from the notes list when the "
"project is archived makes sense.  ** Refiling Phone Calls and Meetings "
":PROPERTIES: :CUSTOM_ID: RefilingPhoneCalls :END:"
msgstr ""

#. type: Plain text
#: org-mode.org:935
msgid ""
"Phone calls and meetings are handled using capture mode.  I time my calls "
"and meetings using the capture mode template settings to clock in and out "
"the capture task while the phone call or meeting is in progress."
msgstr ""

#. type: Plain text
#: org-mode.org:945
msgid ""
"Phone call and meeting tasks collect in =refile.org= and are later refiled "
"to the appropriate location.  Some phone calls are billable and we want "
"these tracked in the appropriate category.  I refile my phone call and "
"meeting tasks under the appropriate project so time tracking and reports are "
"as accurate as possible.  * Custom agenda views :PROPERTIES: :CUSTOM_ID: "
"CustomAgendaViews :END:"
msgstr ""

#. type: Plain text
#: org-mode.org:952
msgid ""
"I now have one block agenda view that has everything on it.  I also keep "
"separate single view agenda commands for use on my slower Eee PC - since it "
"takes prohibitively long to generate my block agenda on that slow machine.  "
"I'm striving to simplify my layout with everything at my fingertips in a "
"single agenda on my workstation which is where I spend the bulk of my time."
msgstr ""

#. type: Plain text
#: org-mode.org:957
msgid ""
"Most of my old custom agenda views were rendered obsolete when filtering "
"functionality was added to the agenda in newer versions of =org-mode= and "
"now with block agenda functionality I can combine everything into a single "
"view."
msgstr ""

#. type: Plain text
#: org-mode.org:970
#, no-wrap
msgid ""
"Custom agenda views are used for:\n"
"- Single block agenda shows the following\n"
"  - overview of today\n"
"  - Finding tasks to be refiled\n"
"  - Finding stuck projects\n"
"  - Finding NEXT tasks to work on\n"
"  - Show all related tasks\n"
"  - Reviewing projects\n"
"  - Finding tasks waiting on something\n"
"  - Findings tasks to be archived\n"
"- Finding notes\n"
"- Viewing habits\n"
msgstr ""

#. type: Plain text
#: org-mode.org:980
msgid ""
"If I want just today's calendar view then =F12 a= is still faster than "
"generating the block agenda - especially if I want to view a week or month's "
"worth of information, or check my clocking data.  In that case the extra "
"detail on the block agenda view is never really needed and I don't want to "
"spend time waiting for it to be generated.  ** Setup :PROPERTIES: "
":CUSTOM_ID: CustomAgendaViewSetup :END:"
msgstr ""

#. type: Plain text
#: org-mode.org:985
msgid ""
"#+header: :tangle yes #+begin_src emacs-lisp ;; Do not dim blocked tasks "
"(setq org-agenda-dim-blocked-tasks nil)"
msgstr ""

#. type: Plain text
#: org-mode.org:988
msgid ";; Compact the block agenda view (setq org-agenda-compact-blocks t)"
msgstr ""

#. type: Plain text
#: org-mode.org:1060
#, no-wrap
msgid ""
";; Custom agenda command definitions\n"
"(setq org-agenda-custom-commands\n"
"      (quote ((\"N\" \"Notes\" tags \"NOTE\"\n"
"               ((org-agenda-overriding-header \"Notes\")\n"
"                (org-tags-match-list-sublevels t)))\n"
"              (\"h\" \"Habits\" tags-todo \"STYLE=\\\"habit\\\"\"\n"
"               ((org-agenda-overriding-header \"Habits\")\n"
"                (org-agenda-sorting-strategy\n"
"                 '(todo-state-down effort-up category-keep))))\n"
"              (\" \" \"Agenda\"\n"
"               ((agenda \"\" nil)\n"
"                (tags \"REFILE\"\n"
"                      ((org-agenda-overriding-header \"Tasks to Refile\")\n"
"                       (org-tags-match-list-sublevels nil)))\n"
"                (tags-todo \"-CANCELLED/!\"\n"
"                           ((org-agenda-overriding-header \"Stuck "
"Projects\")\n"
"                            (org-agenda-skip-function "
"'bh/skip-non-stuck-projects)\n"
"                            (org-agenda-sorting-strategy\n"
"                             '(category-keep))))\n"
"                (tags-todo \"-HOLD-CANCELLED/!\"\n"
"                           ((org-agenda-overriding-header \"Projects\")\n"
"                            (org-agenda-skip-function "
"'bh/skip-non-projects)\n"
"                            (org-tags-match-list-sublevels 'indented)\n"
"                            (org-agenda-sorting-strategy\n"
"                             '(category-keep))))\n"
"                (tags-todo \"-CANCELLED/!NEXT\"\n"
"                           ((org-agenda-overriding-header (concat \"Project "
"Next Tasks\"\n"
"                                                                  (if "
"bh/hide-scheduled-and-waiting-next-tasks\n"
"                                                                      \"\"\n"
"                                                                    \" "
"(including WAITING and SCHEDULED tasks)\")))\n"
"                            (org-agenda-skip-function "
"'bh/skip-projects-and-habits-and-single-tasks)\n"
"                            (org-tags-match-list-sublevels t)\n"
"                            (org-agenda-todo-ignore-scheduled "
"bh/hide-scheduled-and-waiting-next-tasks)\n"
"                            (org-agenda-todo-ignore-deadlines "
"bh/hide-scheduled-and-waiting-next-tasks)\n"
"                            (org-agenda-todo-ignore-with-date "
"bh/hide-scheduled-and-waiting-next-tasks)\n"
"                            (org-agenda-sorting-strategy\n"
"                             '(todo-state-down effort-up category-keep))))\n"
"                (tags-todo \"-REFILE-CANCELLED-WAITING-HOLD/!\"\n"
"                           ((org-agenda-overriding-header (concat \"Project "
"Subtasks\"\n"
"                                                                  (if "
"bh/hide-scheduled-and-waiting-next-tasks\n"
"                                                                      \"\"\n"
"                                                                    \" "
"(including WAITING and SCHEDULED tasks)\")))\n"
"                            (org-agenda-skip-function "
"'bh/skip-non-project-tasks)\n"
"                            (org-agenda-todo-ignore-scheduled "
"bh/hide-scheduled-and-waiting-next-tasks)\n"
"                            (org-agenda-todo-ignore-deadlines "
"bh/hide-scheduled-and-waiting-next-tasks)\n"
"                            (org-agenda-todo-ignore-with-date "
"bh/hide-scheduled-and-waiting-next-tasks)\n"
"                            (org-agenda-sorting-strategy\n"
"                             '(category-keep))))\n"
"                (tags-todo \"-REFILE-CANCELLED-WAITING-HOLD/!\"\n"
"                           ((org-agenda-overriding-header (concat "
"\"Standalone Tasks\"\n"
"                                                                  (if "
"bh/hide-scheduled-and-waiting-next-tasks\n"
"                                                                      \"\"\n"
"                                                                    \" "
"(including WAITING and SCHEDULED tasks)\")))\n"
"                            (org-agenda-skip-function "
"'bh/skip-project-tasks)\n"
"                            (org-agenda-todo-ignore-scheduled "
"bh/hide-scheduled-and-waiting-next-tasks)\n"
"                            (org-agenda-todo-ignore-deadlines "
"bh/hide-scheduled-and-waiting-next-tasks)\n"
"                            (org-agenda-todo-ignore-with-date "
"bh/hide-scheduled-and-waiting-next-tasks)\n"
"                            (org-agenda-sorting-strategy\n"
"                             '(category-keep))))\n"
"                (tags-todo \"-CANCELLED+WAITING|HOLD/!\"\n"
"                           ((org-agenda-overriding-header \"Waiting and "
"Postponed Tasks\")\n"
"                            (org-agenda-skip-function "
"'bh/skip-stuck-projects)\n"
"                            (org-tags-match-list-sublevels nil)\n"
"                            (org-agenda-todo-ignore-scheduled t)\n"
"                            (org-agenda-todo-ignore-deadlines t)))\n"
"                (tags \"-REFILE/\"\n"
"                      ((org-agenda-overriding-header \"Tasks to Archive\")\n"
"                       (org-agenda-skip-function "
"'bh/skip-non-archivable-tasks)\n"
"                       (org-tags-match-list-sublevels nil))))\n"
"               nil))))\n"
"#+end_src\n"
msgstr ""

#. type: Plain text
#: org-mode.org:1064
msgid ""
"My block agenda view looks like this when not narrowed to a project.  This "
"shows top-level projects and =NEXT= tasks but hides the project details "
"since we are not focused on any particular project."
msgstr ""

#. type: Plain text
#: org-mode.org:1066
msgid "[[file:block-agenda-nonproject.png]]"
msgstr ""

#. type: Plain text
#: org-mode.org:1070
msgid ""
"After selecting a project (with =P= on any task in the agenda) the block "
"agenda changes to show the project and any subprojects in the Projects "
"section.  Tasks show project-related tasks that are hidden when not narrowed "
"to a project."
msgstr ""

#. type: Plain text
#: org-mode.org:1072
msgid "This makes it easy to focus on the task at hand."
msgstr ""

#. type: Plain text
#: org-mode.org:1074
msgid "[[file:block-agenda-project.png]]"
msgstr ""

#. type: Plain text
#: org-mode.org:1078
msgid ""
"I generally work top-down on the agenda.  Things with deadlines and "
"scheduled dates (planned to work on today or earlier) show up in the agenda "
"at the top."
msgstr ""

#. type: Plain text
#: org-mode.org:1080
msgid "My day goes generally like this:"
msgstr ""

#. type: Bullet: '- '
#: org-mode.org:1103
msgid "Punch in (this starts the clock on the default task)"
msgstr ""

#. type: Bullet: '- '
#: org-mode.org:1103
msgid ""
"Look at the agenda and make a mental note of anything important to deal with "
"today"
msgstr ""

#. type: Plain text
#: org-mode.org:1103
#, no-wrap
msgid ""
"- Read email and news\n"
"  - create notes, and tasks for things that need responses with "
"org-capture\n"
"- Check refile tasks and respond to emails\n"
"- Look at my agenda and work on important tasks for today\n"
"  - Clock it in\n"
"  - Work on it until it is =DONE= or it gets interrupted\n"
"- Work on tasks\n"
"- Make journal entries (=C-c c j=) for interruptions\n"
"- Punch out for lunch and punch back in after lunch\n"
"- work on more tasks\n"
"- Refile tasks to empty the list\n"
"  - Tag tasks to be refiled with =m= collecting all tasks for the same "
"target\n"
"  - Bulk refile the tasks to the target location with =B r=\n"
"  - Repeat (or refile individually with =C-c C-w=) until all refile tasks "
"are gone\n"
"- Mark habits done today as DONE\n"
"- Punch out at the end of the work day\n"
"** What do I work on next?\n"
":PROPERTIES:\n"
":CUSTOM_ID: WhatDoIWorkOnNext\n"
":END:\n"
msgstr ""

#. type: Plain text
#: org-mode.org:1111
msgid ""
"Start with deadlines and tasks scheduled today or earlier from the daily "
"agenda view.  Then move on to tasks in the =Next Tasks= list in the block "
"agenda view.  I tend to schedule current projects to 'today' when I start "
"work on them and they sit on my daily agenda reminding me that they need to "
"be completed.  I normally only schedule one or two projects to the daily "
"agenda and unschedule things that are no longer important and don't deserve "
"my attention today."
msgstr ""

#. type: Plain text
#: org-mode.org:1114
msgid ""
"When I look for a new task to work on I generally hit =F12 SPC= to get the "
"block agenda and follow this order:"
msgstr ""

#. type: Plain text
#: org-mode.org:1128
#, no-wrap
msgid ""
"- Pick something off today's agenda\n"
"  - deadline for today (do this first - it's not late yet)\n"
"  - deadline in the past (it's already late)\n"
"  - a scheduled task for today (it's supposed to be done today)\n"
"  - a scheduled task that is still on the agenda\n"
"  - deadline that is coming up soon\n"
"- pick a NEXT task\n"
"- If you run out of items to work on look for a NEXT task in the current "
"context\n"
"  pick a task from the Tasks list of the current project.\n"
"*** Why keep it all on the =NEXT= list?\n"
":PROPERTIES:\n"
":CUSTOM_ID: CustomAgendaViewsNextList\n"
":END:\n"
msgstr ""

#. type: Plain text
#: org-mode.org:1134
msgid ""
"I've moved to a more GTD way of doing things.  Now I just use a =NEXT= "
"list.  Only projects get tasks with =NEXT= keywords since stuck projects "
"initiate the need for marking or creating =NEXT= tasks.  A =NEXT= task is "
"something that is available to work on /now/, it is the next logical step in "
"some project."
msgstr ""

#. type: Plain text
#: org-mode.org:1139
msgid ""
"I used to have a special keyword =ONGOING= for things that I do a lot and "
"want to clock but never really start/end.  I had a special agenda view for "
"=ONGOING= tasks that I would pull up to easily find the thing I want to "
"clock."
msgstr ""

#. type: Plain text
#: org-mode.org:1148
msgid ""
"Since then I've moved away from using the =ONGOING= todo keyword.  Having an "
"agenda view that shows =NEXT= tasks makes it easy to pick the thing to clock "
"- and I don't have to remember if I need to look in the =ONGOING= list or "
"the =NEXT= list when looking for the task to clock-in.  The =NEXT= list is "
"basically 'what is current' - any task that moves a project forward.  I want "
"to find the thing to work on as fast as I can and actually do work on it - "
"not spend time hunting through my org files for the task that needs to be "
"clocked-in."
msgstr ""

#. type: Plain text
#: org-mode.org:1155
msgid ""
"To drop a task off the =NEXT= list simply move it back to the =TODO= state.  "
"** Reading email, newsgroups, and conversations on IRC :PROPERTIES: "
":CUSTOM_ID: ReadingMailNewsIRC :END:"
msgstr ""

#. type: Plain text
#: org-mode.org:1168
msgid ""
"When reading email, newsgroups, and conversations on IRC I just let the "
"default task (normally =** Organization=) clock the time I spend on these "
"tasks.  To read email I go to Gnus and read everything in my inboxes.  If "
"there are emails that require a response I use org-capture to create a new "
"task with a heading of 'Respond to <user>' for each one.  This automatically "
"links to the email in the task and makes it easy to find later.  Some emails "
"are quick to respond to and some take research and a significant amount of "
"time to complete.  I clock each one in it's own task just in case I need "
"that clocked time later.  The capture template for Repond To tasks is now "
"scheduled for today so I can refile the task to the appropriate org file "
"without losing the task for a week."
msgstr ""

#. type: Plain text
#: org-mode.org:1173
msgid ""
"Next, I go to my newly created tasks to be refiled from the block agenda "
"with =F12 a= and clock in an email task and deal with it.  Repeat this until "
"all of the 'Respond to <user>' tasks are marked =DONE=."
msgstr ""

#. type: Plain text
#: org-mode.org:1184
msgid ""
"I read email and newgroups in Gnus so I don't separate clocked time for "
"quickly looking at things.  If an article has a useful piece of information "
"I want to remember I create a note for it with =C-c c n= and enter the topic "
"and file it.  This takes practically no time at all and I know the note is "
"safely filed for later retrieval.  The time I spend in the capture buffer is "
"clocked with that capture note.  ** Filtering :PROPERTIES: :CUSTOM_ID: "
"CustomAgendaViewFiltering :END:"
msgstr ""

#. type: Plain text
#: org-mode.org:1188
msgid ""
"So many tasks, so little time.  I have hundreds of tasks at any given time "
"(373 right now).  There is so much stuff to look at it can be daunting.  "
"This is where agenda filtering saves the day."
msgstr ""

#. type: Plain text
#: org-mode.org:1193
msgid ""
"It's 11:53AM and I'm in work mode just before lunch.  I don't want to see "
"tasks that are not work related right now.  I also don't want to work on a "
"big project just before lunch... so I need to find small tasks that I can "
"knock off the list."
msgstr ""

#. type: Plain text
#: org-mode.org:1205
msgid ""
"How do we do this? Get a list of NEXT tasks from the block agenda and then "
"narrow it down with filtering.  Tasks are ordered in the NEXT agenda view by "
"estimated effort so the short tasks are first -- just start at the top and "
"work your way down.  I can limit the displayed agenda tasks to those "
"estimates of 10 minutes or less with =/ + 1= and I can pick something that "
"fits the minutes I have left before I take off for lunch.  *** Automatically "
"removing context based tasks with / RET :PROPERTIES: :CUSTOM_ID: "
"CustomAgendaViewFilteringContext :END:"
msgstr ""

#. type: Plain text
#: org-mode.org:1209
msgid ""
"=/ RET= in the agenda is really useful.  This awesome feature was added to "
"org-mode by John Wiegley.  It removes tasks automatically by filtering based "
"on a user-provided function."
msgstr ""

#. type: Plain text
#: org-mode.org:1216
msgid ""
"At work I have projects I'm working on which are assigned by my manager.  "
"Sometimes priorities changes and projects are delayed to sometime in the "
"future.  This means I need to stop working on these immediately.  I put the "
"project task on =HOLD= and work on something else.  The =/ RET= filter "
"removes =HOLD= tasks and subtasks (because of tag inheritance)."
msgstr ""

#. type: Plain text
#: org-mode.org:1222
msgid ""
"At home I have some tasks tagged with =farm= since these need to be "
"performed when I am physically at our family farm.  Since I am there "
"infrequently I have added =farm= to the list of auto-excluded tags on my "
"system.  I can always explicitly filter to just =farm= tasks with =/ TAB "
"farm RET= when I am physically there."
msgstr ""

#. type: Plain text
#: org-mode.org:1225
msgid ""
"I have the following setup to allow =/ RET= to filter tasks based on the "
"description above."
msgstr ""

#. type: Plain text
#: org-mode.org:1236
#, no-wrap
msgid ""
"#+header: :tangle yes\n"
"#+begin_src emacs-lisp\n"
"(defun bh/org-auto-exclude-function (tag)\n"
"  \"Automatic task exclusion in the agenda with / RET\"\n"
"  (and (cond\n"
"        ((string= tag \"hold\")\n"
"         t)\n"
"        ((string= tag \"farm\")\n"
"         t))\n"
"       (concat \"-\" tag)))\n"
msgstr ""

#. type: Plain text
#: org-mode.org:1239
msgid ""
"(setq org-agenda-auto-exclude-function 'bh/org-auto-exclude-function)  "
"#+end_src"
msgstr ""

#. type: Plain text
#: org-mode.org:1242
msgid ""
"This lets me filter tasks with just =/ RET= on the agenda which removes "
"tasks I'm not supposed to be working on now from the list of returned "
"results."
msgstr ""

#. type: Plain text
#: org-mode.org:1248
msgid ""
"This helps to keep my agenda clutter-free.  * Time Clocking :PROPERTIES: "
":CUSTOM_ID: Clocking :END:"
msgstr ""

#. type: Plain text
#: org-mode.org:1250
msgid "Okay, I admit it.  I'm a clocking fanatic."
msgstr ""

#. type: Plain text
#: org-mode.org:1254
msgid ""
"I clock everything at work.  Org-mode makes this really easy.  I'd rather "
"clock too much stuff than not enough so I find it's easier to get in the "
"habit of clocking everything."
msgstr ""

#. type: Plain text
#: org-mode.org:1260
msgid ""
"This makes it possible to look back at the day and see where I'm spending "
"too much time, or not enough time on specific projects.  This also helps a "
"lot when you need to estimate how long something is going to take to do -- "
"you can use your clocking data from similar tasks to help tune your "
"estimates so they are more accurate."
msgstr ""

#. type: Plain text
#: org-mode.org:1263
msgid ""
"Without clocking data it's hard to tell how long something took to do after "
"the fact."
msgstr ""

#. type: Plain text
#: org-mode.org:1268
msgid ""
"I now use the concept of =punching in= and =punching out= at the start and "
"end of my work day.  I punch in when I arrive at work, punch out for lunch, "
"punch in after lunch, and punch out at the end of the day.  Every minute is "
"clocked between punch-in and punch-out times."
msgstr ""

#. type: Plain text
#: org-mode.org:1276
msgid ""
"Punching in defines a default task to clock time on whenever the clock would "
"normally stop.  I found that with the default org-mode setup I would lose "
"clocked minutes during the day, a minute here, a minute there, and that all "
"adds up.  This is especially true if you write notes when moving to a DONE "
"state - in this case the clock normally stops before you have composed the "
"note -- and good notes take a few minutes to write."
msgstr ""

#. type: Plain text
#: org-mode.org:1278
msgid "My clocking setup basically works like this:"
msgstr ""

#. type: Plain text
#: org-mode.org:1287
#, no-wrap
msgid ""
"- Punch in (start the clock)\n"
"  - This clocks in a predefined task by =org-id= that is the default\n"
"    task to clock in whenever the clock normally stops\n"
"- Clock in tasks normally, and let moving to a DONE state clock out\n"
"  - clocking out automatically clocks time on a parent task or moves\n"
"    back to the predefined default task if no parent exists.\n"
"- Continue clocking whatever tasks you work on\n"
"- Punch out (stop the clock)\n"
msgstr ""

#. type: Plain text
#: org-mode.org:1292
msgid ""
"I'm free to change the default task multiple times during the day but with "
"the clock moving up the project tree on clock out I no longer need to do "
"this.  I simply have a single task that gets clocked in when I punch-in."
msgstr ""

#. type: Plain text
#: org-mode.org:1296
msgid ""
"If I punch-in with a prefix on a task in =Project X= then that task "
"automatically becomes the default task and all clocked time goes on that "
"project until I either punch out or punch in some other task."
msgstr ""

#. type: Plain text
#: org-mode.org:1298
msgid "My org files look like this:"
msgstr ""

#. type: Plain text
#: org-mode.org:1311
#, no-wrap
msgid ""
"=todo.org=:\n"
"#+begin_src org :exports src\n"
",#+FILETAGS: PERSONAL\n"
"...\n"
",* Tasks\n"
",** Organization\n"
"   :PROPERTIES:\n"
"   :CLOCK_MODELINE_TOTAL: today\n"
"   :ID:       eb155a82-92b2-4f25-a3c6-0304591af2f9\n"
"   :END:\n"
"   ...\n"
"#+end_src\n"
msgstr ""

#. type: Plain text
#: org-mode.org:1320
msgid ""
"If I am working on some task, then I simply clock in on the task.  Clocking "
"out moves the clock up to a parent task with a todo keyword (if any) which "
"keeps the clock time in the same subtree.  If there is no parent task with a "
"todo keyword then the clock moves back to the default clocking task until I "
"punch out or clock in some other task.  When an interruption occurs I start "
"a capture task which keeps clocked time on the interruption task until I "
"close it with C-c C-c."
msgstr ""

#. type: Plain text
#: org-mode.org:1322
msgid "This works really well for me."
msgstr ""

#. type: Plain text
#: org-mode.org:1324
msgid "For example, consider the following org file:"
msgstr ""

#. type: Plain text
#: org-mode.org:1333
msgid ""
"#+begin_src org :exports src ,* TODO Project A ,** NEXT TASK 1 ,** TODO TASK "
"2 ,** TODO TASK 3 ,* Tasks ,** TODO Some miscellaneous task #+end_src"
msgstr ""

#. type: Plain text
#: org-mode.org:1335
msgid "I'll work on this file in the following sequence:"
msgstr ""

#. type: Bullet: '1. '
#: org-mode.org:1337
msgid "I punch in with =F9-I= at the start of my day"
msgstr ""

#. type: Plain text
#: org-mode.org:1339
#, no-wrap
msgid "   That clocks in the =Organization= task by id in my =todo.org= file.\n"
msgstr ""

#. type: Bullet: '2. '
#: org-mode.org:1341
msgid "=F12-SPC= to review my block agenda"
msgstr ""

#. type: Plain text
#: org-mode.org:1344
#, no-wrap
msgid ""
"   Pick 'TODO Some miscellaneous task' to work on next and clock that in "
"with =I=\n"
"   The clock is now on 'TODO Some miscellaneous task'\n"
msgstr ""

#. type: Bullet: '3. '
#: org-mode.org:1346
msgid "I complete that task and mark it done with =C-c C-t d="
msgstr ""

#. type: Plain text
#: org-mode.org:1348
#, no-wrap
msgid "   This stops the clock and moves it back to the =Organization= task.\n"
msgstr ""

#. type: Bullet: '4. '
#: org-mode.org:1350
msgid "Now I want to work on =Project A= so I clock in =Task 1="
msgstr ""

#. type: Plain text
#: org-mode.org:1353
#, no-wrap
msgid ""
"   I work on Task 1 and mark it =DONE=.  This clocks out =Task 1= and "
"moves\n"
"   the clock to =Project A=.  Now I work on =Task 2= and clock that in.\n"
msgstr ""

#. type: Plain text
#: org-mode.org:1362
msgid ""
"The entire time I'm working on and clocking some subtask of =Project A= all "
"of the clock time in the interval is applied somewhere to the =Project A= "
"tree.  When I eventually mark =Project A= done then the clock will move back "
"to the default organization task.  ** Clock Setup :PROPERTIES: :CUSTOM_ID: "
"ClockSetup :END:"
msgstr ""

#. type: Plain text
#: org-mode.org:1369
msgid ""
"To get started we need to punch in which clocks in the default task and "
"keeps the clock running.  This is now simply a matter of punching in the "
"clock with =F9 I=.  You can do this anywhere.  Clocking out will now clock "
"in the parent task (if there is one with a todo keyword) or clock in the "
"default task if not parent exists."
msgstr ""

#. type: Plain text
#: org-mode.org:1374
msgid ""
"Keeping the clock running when moving a subtask to a =DONE= state means "
"clocking continues to apply to the project task.  I can pick the next task "
"from the parent and clock that in without losing a minute or two while I'm "
"deciding what to work on next."
msgstr ""

#. type: Plain text
#: org-mode.org:1377
msgid ""
"I keep clock times, state changes, and other notes in the =:LOGBOOK:= "
"drawer."
msgstr ""

#. type: Plain text
#: org-mode.org:1379
msgid "I have the following org-mode settings for clocking:"
msgstr ""

#. type: Plain text
#: org-mode.org:1408
msgid ""
"#+header: :tangle yes #+begin_src emacs-lisp ;; ;; Resume clocking task when "
"emacs is restarted (org-clock-persistence-insinuate)  ;; ;; Show lot of "
"clocking history so it's easy to pick items off the C-F11 list (setq "
"org-clock-history-length 23)  ;; Resume clocking task on clock-in if the "
"clock is open (setq org-clock-in-resume t)  ;; Change tasks to NEXT when "
"clocking in (setq org-clock-in-switch-to-state 'bh/clock-in-to-next)  ;; "
"Separate drawers for clocking and logs (setq org-drawers (quote "
"(\"PROPERTIES\" \"LOGBOOK\")))  ;; Save clock data and state changes and "
"notes in the LOGBOOK drawer (setq org-clock-into-drawer t)  ;; Sometimes I "
"change tasks I'm clocking quickly - this removes clocked tasks with 0:00 "
"duration (setq org-clock-out-remove-zero-time-clocks t)  ;; Clock out when "
"moving task to a done state (setq org-clock-out-when-done t)  ;; Save the "
"running clock and all clock history when exiting Emacs, load it on startup "
"(setq org-clock-persist t)  ;; Do not prompt to resume an active clock (setq "
"org-clock-persist-query-resume nil)  ;; Enable auto clock resolution for "
"finding open clocks (setq org-clock-auto-clock-resolution (quote "
"when-no-clock-is-running))  ;; Include current clocking task in clock "
"reports (setq org-clock-report-include-clocking-task t)"
msgstr ""

#. type: Plain text
#: org-mode.org:1410
msgid "(setq bh/keep-clock-running nil)"
msgstr ""

#. type: Plain text
#: org-mode.org:1423
#, no-wrap
msgid ""
"(defun bh/clock-in-to-next (kw)\n"
"  \"Switch a task from TODO to NEXT when clocking in.\n"
"Skips capture tasks, projects, and subprojects.\n"
"Switch projects and subprojects from NEXT back to TODO\"\n"
"  (when (not (and (boundp 'org-capture-mode) org-capture-mode))\n"
"    (cond\n"
"     ((and (member (org-get-todo-state) (list \"TODO\"))\n"
"           (bh/is-task-p))\n"
"      \"NEXT\")\n"
"     ((and (member (org-get-todo-state) (list \"NEXT\"))\n"
"           (bh/is-project-p))\n"
"      \"TODO\"))))\n"
msgstr ""

#. type: Plain text
#: org-mode.org:1434
#, no-wrap
msgid ""
"(defun bh/find-project-task ()\n"
"  \"Move point to the parent (project) task if any\"\n"
"  (save-restriction\n"
"    (widen)\n"
"    (let ((parent-task (save-excursion (org-back-to-heading 'invisible-ok) "
"(point))))\n"
"      (while (org-up-heading-safe)\n"
"        (when (member (nth 2 (org-heading-components)) "
"org-todo-keywords-1)\n"
"          (setq parent-task (point))))\n"
"      (goto-char parent-task)\n"
"      parent-task)))\n"
msgstr ""

#. type: Plain text
#: org-mode.org:1459
#, no-wrap
msgid ""
"(defun bh/punch-in (arg)\n"
"  \"Start continuous clocking and set the default task to the\n"
"selected task.  If no task is selected set the Organization task\n"
"as the default task.\"\n"
"  (interactive \"p\")\n"
"  (setq bh/keep-clock-running t)\n"
"  (if (equal major-mode 'org-agenda-mode)\n"
"      ;;\n"
"      ;; We're in the agenda\n"
"      ;;\n"
"      (let* ((marker (org-get-at-bol 'org-hd-marker))\n"
"             (tags (org-with-point-at marker (org-get-tags-at))))\n"
"        (if (and (eq arg 4) tags)\n"
"            (org-agenda-clock-in '(16))\n"
"          (bh/clock-in-organization-task-as-default)))\n"
"    ;;\n"
"    ;; We are not in the agenda\n"
"    ;;\n"
"    (save-restriction\n"
"      (widen)\n"
"      ; Find the tags on the current task\n"
"      (if (and (equal major-mode 'org-mode) (not "
"(org-before-first-heading-p)) (eq arg 4))\n"
"          (org-clock-in '(16))\n"
"        (bh/clock-in-organization-task-as-default)))))\n"
msgstr ""

#. type: Plain text
#: org-mode.org:1466
#, no-wrap
msgid ""
"(defun bh/punch-out ()\n"
"  (interactive)\n"
"  (setq bh/keep-clock-running nil)\n"
"  (when (org-clock-is-active)\n"
"    (org-clock-out))\n"
"  (org-agenda-remove-restriction-lock))\n"
msgstr ""

#. type: Plain text
#: org-mode.org:1471
#, no-wrap
msgid ""
"(defun bh/clock-in-default-task ()\n"
"  (save-excursion\n"
"    (org-with-point-at org-clock-default-task\n"
"      (org-clock-in))))\n"
msgstr ""

#. type: Plain text
#: org-mode.org:1486
#, no-wrap
msgid ""
"(defun bh/clock-in-parent-task ()\n"
"  \"Move point to the parent (project) task if any and clock in\"\n"
"  (let ((parent-task))\n"
"    (save-excursion\n"
"      (save-restriction\n"
"        (widen)\n"
"        (while (and (not parent-task) (org-up-heading-safe))\n"
"          (when (member (nth 2 (org-heading-components)) "
"org-todo-keywords-1)\n"
"            (setq parent-task (point))))\n"
"        (if parent-task\n"
"            (org-with-point-at parent-task\n"
"              (org-clock-in))\n"
"          (when bh/keep-clock-running\n"
"            (bh/clock-in-default-task)))))))\n"
msgstr ""

#. type: Plain text
#: org-mode.org:1488
msgid "(defvar bh/organization-task-id \"eb155a82-92b2-4f25-a3c6-0304591af2f9\")"
msgstr ""

#. type: Plain text
#: org-mode.org:1493
#, no-wrap
msgid ""
"(defun bh/clock-in-organization-task-as-default ()\n"
"  (interactive)\n"
"  (org-with-point-at (org-id-find bh/organization-task-id 'marker)\n"
"    (org-clock-in '(16))))\n"
msgstr ""

#. type: Plain text
#: org-mode.org:1500
#, no-wrap
msgid ""
"(defun bh/clock-out-maybe ()\n"
"  (when (and bh/keep-clock-running\n"
"             (not org-clock-clocking-in)\n"
"             (marker-buffer org-clock-default-task)\n"
"             (not org-clock-resolving-clocks-due-to-idleness))\n"
"    (bh/clock-in-parent-task)))\n"
msgstr ""

#. type: Plain text
#: org-mode.org:1503
msgid "(add-hook 'org-clock-out-hook 'bh/clock-out-maybe 'append)  #+end_src"
msgstr ""

#. type: Plain text
#: org-mode.org:1508
msgid ""
"I used to clock in tasks by ID using the following function but with the new "
"punch-in and punch-out I don't need these as much anymore.  =f9-SPC= calls "
"=bh/clock-in-last-task= which switches the clock back to the previously "
"clocked task."
msgstr ""

#. type: Plain text
#: org-mode.org:1516
#, no-wrap
msgid ""
"#+header: :tangle yes\n"
"#+begin_src emacs-lisp\n"
"(require 'org-id)\n"
"(defun bh/clock-in-task-by-id (id)\n"
"  \"Clock in a task by id\"\n"
"  (org-with-point-at (org-id-find id 'marker)\n"
"    (org-clock-in nil)))\n"
msgstr ""

#. type: Plain text
#: org-mode.org:1539
#, no-wrap
msgid ""
"(defun bh/clock-in-last-task (arg)\n"
"  \"Clock in the interrupted task if there is one\n"
"Skip the default task and get the next one.\n"
"A prefix arg forces clock in of the default task.\"\n"
"  (interactive \"p\")\n"
"  (let ((clock-in-to-task\n"
"         (cond\n"
"          ((eq arg 4) org-clock-default-task)\n"
"          ((and (org-clock-is-active)\n"
"                (equal org-clock-default-task (cadr org-clock-history)))\n"
"           (caddr org-clock-history))\n"
"          ((org-clock-is-active) (cadr org-clock-history))\n"
"          ((equal org-clock-default-task (car org-clock-history)) (cadr "
"org-clock-history))\n"
"          (t (car org-clock-history)))))\n"
"    (widen)\n"
"    (org-with-point-at clock-in-to-task\n"
"      (org-clock-in nil))))\n"
"#+end_src\n"
"** Clocking in\n"
":PROPERTIES:\n"
":CUSTOM_ID: ClockingIn\n"
":END:\n"
msgstr ""

#. type: Plain text
#: org-mode.org:1541
msgid ""
"When I start or continue working on a task I clock it in with any of the "
"following:"
msgstr ""

#. type: Bullet: '  - '
#: org-mode.org:1551
msgid "=C-c C-x C-i="
msgstr ""

#. type: Bullet: '  - '
#: org-mode.org:1551
msgid "=I= in the agenda"
msgstr ""

#. type: Bullet: '  - '
#: org-mode.org:1551
msgid "=I= speed key on the first character of the heading line"
msgstr ""

#. type: Bullet: '  - '
#: org-mode.org:1551
msgid "=f9 I= while on the task in the agenda"
msgstr ""

#. type: Plain text
#: org-mode.org:1551
#, no-wrap
msgid ""
"  - =f9 I= while in the task in an org file\n"
"*** Setting a default clock task\n"
":PROPERTIES:\n"
":CUSTOM_ID: ClockingInDefaultTask\n"
":END:\n"
msgstr ""

#. type: Plain text
#: org-mode.org:1559
msgid ""
"I have a default =** Organization= task in my todo.org file that I tend to "
"put miscellaneous clock time on.  This is the task I clock in on when I "
"punch in at the start of my work day with =F9-I=.  While reorganizing my "
"org-files, reading email, clearing my inbox, and doing other planning work "
"that isn't for a specific project I'll clock in this task.  Punching-in "
"anywhere clocks in this Organization task as the default task."
msgstr ""

#. type: Plain text
#: org-mode.org:1564
msgid ""
"If I want to change the default clocking task I just visit the new task in "
"any org buffer and clock it in with =C-u C-u C-c C-x C-i=.  Now this new "
"task that collects miscellaneous clock minutes when the clock would normally "
"stop."
msgstr ""

#. type: Plain text
#: org-mode.org:1573
msgid ""
"You can quickly clock in the default clocking task with =C-u C-c C-x C-i "
"d=.  Another option is to repeatedly clock out so the clock moves up the "
"project tree until you clock out the top-level task and the clock moves to "
"the default task.  *** Using the clock history to clock in old tasks "
":PROPERTIES: :CUSTOM_ID: ClockingInByClockHistory :END:"
msgstr ""

#. type: Plain text
#: org-mode.org:1577
msgid ""
"You can use the clock history to restart clocks on old tasks you've clocked "
"or to jump directly to a task you have clocked previously.  I use this "
"mainly to clock in whatever got interrupted by something."
msgstr ""

#. type: Plain text
#: org-mode.org:1579
msgid "Consider the following scenario:"
msgstr ""

#. type: Plain text
#: org-mode.org:1584
msgid ""
"- You are working on and clocking =Task A= (Organization)  - You get "
"interrupted and switch to =Task B= (Document my use of org-mode)  - You "
"complete =Task B= (Document my use of org-mode)  - Now you want to go back "
"to =Task A= (Organization) again to continue"
msgstr ""

#. type: Plain text
#: org-mode.org:1586
msgid "This is easy to deal with."
msgstr ""

#. type: Bullet: '1. '
#: org-mode.org:1590
msgid "Clock in =Task A=, work on it"
msgstr ""

#. type: Bullet: '2. '
#: org-mode.org:1590
msgid "Go to =Task B= (or create a new task) and clock it in"
msgstr ""

#. type: Bullet: '3. '
#: org-mode.org:1590
msgid "When you are finished with =Task B= hit =C-u C-c C-x C-i i="
msgstr ""

#. type: Plain text
#: org-mode.org:1593
msgid ""
"This displays a clock history selection window like the following and "
"selects the interrupted =[i]= entry."
msgstr ""

#. type: Plain text
#: org-mode.org:1612
#, no-wrap
msgid ""
"*Clock history selection buffer for C-u C-c C-x C-i*\n"
"#+begin_example\n"
"Default Task\n"
"[d] norang          Organization                          <-- Task B\n"
"The task interrupted by starting the last one\n"
"[i] norang          Organization                          <-- Task B\n"
"Current Clocking Task\n"
"[c] org             NEXT Document my use of org-mode      <-- Task A\n"
"Recent Tasks\n"
"[1] org             NEXT Document my use of org-mode      <-- Task A\n"
"[2] norang          Organization                          <-- Task B\n"
"...\n"
"[Z] org             DONE Fix default section links        <-- 35 clock task "
"entries ago\n"
"#+end_example\n"
"** Clock Everything - Create New Tasks\n"
":PROPERTIES:\n"
":CUSTOM_ID: ClockEverythingWithNewTasks\n"
":END:\n"
msgstr ""

#. type: Plain text
#: org-mode.org:1617
msgid ""
"In order to clock everything you need a task for everything.  That's fine "
"for planned projects but interruptions inevitably occur and you need some "
"place to record whatever time you spend on that interruption."
msgstr ""

#. type: Plain text
#: org-mode.org:1620
msgid ""
"To deal with this we create a new capture task to record the thing we are "
"about to do.  The workflow goes something like this:"
msgstr ""

#. type: Plain text
#: org-mode.org:1627
msgid ""
"- You are clocking some task and an interruption occurs - Create a quick "
"capture task journal entry =C-c c j= - Type the heading - go do that thing "
"(eat lunch, whatever)  - file it =C-c C-c=, this restores the clock back to "
"the previous clocking task - clock something else in or continue with the "
"current clocking task"
msgstr ""

#. type: Plain text
#: org-mode.org:1632
msgid ""
"This means you can ignore the details like where this task really belongs in "
"your org file layout and just get on with completing the thing.  Refiling a "
"bunch of tasks later in a group when it is convenient to refile the tasks "
"saves time in the long run."
msgstr ""

#. type: Plain text
#: org-mode.org:1642
msgid ""
"If it's a one-shot uninteresting task (like a coffee break) I create a "
"capture journal entry for it that goes to the diary.org date tree.  If it's "
"a task that actually needs to be tracked and marked done, and applied to "
"some project then I create a capture task instead which files it in "
"refile.org.  ** Finding tasks to clock in :PROPERTIES: :CUSTOM_ID: "
"FindTasksToClockIn :END:"
msgstr ""

#. type: Plain text
#: org-mode.org:1645
msgid ""
"To find a task to work on I use one of the following options (generally "
"listed most frequently used first)"
msgstr ""

#. type: Bullet: '- '
#: org-mode.org:1654
msgid ""
"Use the clock history C-u C-c C-x C-i Go back to something I was clocking "
"that is not finished"
msgstr ""

#. type: Bullet: '- '
#: org-mode.org:1654
msgid ""
"Pick something off today's block agenda =SCHEDULED= or =DEADLINE= items that "
"need to be done soon"
msgstr ""

#. type: Bullet: '- '
#: org-mode.org:1654
msgid ""
"Pick something off the =NEXT= tasks agenda view Work on some unfinished task "
"to move to completion"
msgstr ""

#. type: Bullet: '- '
#: org-mode.org:1654
msgid "Pick something off the other task list"
msgstr ""

#. type: Bullet: '- '
#: org-mode.org:1654
msgid "Use an agenda view with filtering to pick something to work on"
msgstr ""

#. type: Plain text
#: org-mode.org:1661
msgid ""
"Punching in on the task you select will restrict the agenda view to that "
"project so you can focus on just that thing for some period of time.  ** "
"Editing clock entries :PROPERTIES: :CUSTOM_ID: EditingClockEntries :END:"
msgstr ""

#. type: Plain text
#: org-mode.org:1664
msgid ""
"Sometimes it is necessary to edit clock entries so they reflect reality.  I "
"find I do this for maybe 2-3 entries in a week."
msgstr ""

#. type: Plain text
#: org-mode.org:1668
msgid ""
"Occassionally I cannot clock in a task on time because I'm away from my "
"computer.  In this case the previous clocked task is still running and "
"counts time for both tasks which is wrong."
msgstr ""

#. type: Plain text
#: org-mode.org:1672
msgid ""
"I make a note of the time and then when I get back to my computer I clock in "
"the right task and edit the start and end times to correct the clock "
"history."
msgstr ""

#. type: Plain text
#: org-mode.org:1678
msgid ""
"To visit the clock line for an entry quickly use the agenda log mode.  =F12 "
"a l= shows all clock lines for today.  I use this to navigate to the "
"appropriate clock lines quickly.  F11 goes to the current clocked task but "
"the agenda log mode is better for finding and visiting older clock entries."
msgstr ""

#. type: Plain text
#: org-mode.org:1682
msgid ""
"Use =F12 a l= to open the agenda in log mode and show only logged clock "
"times.  Move the cursor down to the clock line you need to edit and hit "
"=TAB= and you're there."
msgstr ""

#. type: Plain text
#: org-mode.org:1687
msgid ""
"To edit a clock entry just put the cursor on the part of the date you want "
"to edit (use the keyboard not the mouse - since the clicking on the "
"timestamp with the mouse goes back to the agenda for that day) and hit the "
"=S-<up arrow>= or =S-<down arrow>= keys to change the time."
msgstr ""

#. type: Plain text
#: org-mode.org:1694
msgid ""
"The following setting makes time editing use discrete minute intervals (no "
"rounding)  increments: #+header: :tangle yes #+begin_src emacs-lisp (setq "
"org-time-stamp-rounding-minutes (quote (1 1)))  #+end_src"
msgstr ""

#. type: Plain text
#: org-mode.org:1697
msgid ""
"Editing the time with the shift arrow combination also updates the total for "
"the clock line which is a nice convenience."
msgstr ""

#. type: Plain text
#: org-mode.org:1702
msgid ""
"I always check that I haven't created task overlaps when fixing time clock "
"entries by viewing them with log mode on in the agenda.  There is a new view "
"in the agenda for this -- just hit =v c= in the daily agenda and clock gaps "
"and overlaps are identified."
msgstr ""

#. type: Plain text
#: org-mode.org:1704
msgid "I want my clock entries to be as accurate as possible."
msgstr ""

#. type: Plain text
#: org-mode.org:1722
#, no-wrap
msgid ""
"The following setting shows 1 minute clocking gaps.\n"
"#+header: :tangle yes\n"
"#+begin_src emacs-lisp\n"
"(setq org-agenda-clock-consistency-checks\n"
"      (quote (:max-duration \"4:00\"\n"
"              :min-duration 0\n"
"              :max-gap 0\n"
"              :gap-ok-around (\"4:00\"))))\n"
"#+end_src\n"
"* Time reporting and tracking\n"
":PROPERTIES:\n"
":CUSTOM_ID: TimeReportingAndTracking\n"
":END:\n"
"** Billing clients based on clocked time\n"
":PROPERTIES:\n"
":CUSTOM_ID: BillingClientsForClockedTime\n"
":END:\n"
msgstr ""

#. type: Plain text
#: org-mode.org:1726
msgid ""
"At the beginning of the month I invoice my clients for work done last "
"month.  This is where I review my clocking data for correctness before "
"billing for the clocked time."
msgstr ""

#. type: Plain text
#: org-mode.org:1728
msgid "Billing for clocked time basically boils down to the following steps:"
msgstr ""

#. type: Bullet: '1. '
#: org-mode.org:1732
msgid "Verify that the clock data is complete and correct"
msgstr ""

#. type: Bullet: '2. '
#: org-mode.org:1732
msgid "Use clock reports to summarize time spent"
msgstr ""

#. type: Bullet: '3. '
#: org-mode.org:1732
msgid "Create an invoice based on the clock data"
msgstr ""

#. type: Plain text
#: org-mode.org:1735
#, no-wrap
msgid ""
"   I currently create invoices in an external software package\n"
"   based on the org-mode clock data.\n"
msgstr ""

#. type: Bullet: '4. '
#: org-mode.org:1737
msgid "Archive complete tasks so they are out of the way."
msgstr ""

#. type: Plain text
#: org-mode.org:1743
#, no-wrap
msgid ""
"   See [[#Archiving][Archiving]] for more details.\n"
"*** Verify that the clock data is complete and correct\n"
":PROPERTIES:\n"
":CUSTOM_ID: VerifyingClockData\n"
":END:\n"
msgstr ""

#. type: Plain text
#: org-mode.org:1752
msgid ""
"Since I change tasks often (sometimes more than once in a minute) I use the "
"following setting to remove clock entries with a zero duration.  #+header: "
":tangle yes #+begin_src emacs-lisp ;; Sometimes I change tasks I'm clocking "
"quickly - this removes clocked tasks with 0:00 duration (setq "
"org-clock-out-remove-zero-time-clocks t)  #+end_src"
msgstr ""

#. type: Plain text
#: org-mode.org:1755
msgid ""
"This setting just keeps my clocked log entries clean - only keeping clock "
"entries that contribute to the clock report."
msgstr ""

#. type: Plain text
#: org-mode.org:1762
msgid ""
"Before invoicing for clocked time it is important to make sure your clocked "
"time data is correct.  If you have a clocked time with an entry that is not "
"closed (ie. it has no end time) then that is a hole in your clocked day and "
"it gets counted as zero (0) for time spent on the task when generating clock "
"reports.  Counting it as zero is almost certainly wrong."
msgstr ""

#. type: Plain text
#: org-mode.org:1766
msgid ""
"To check for unclosed clock times I use the agenda-view clock check (=v c= "
"in the agenda).  This view shows clocking gaps and overlaps in the agenda."
msgstr ""

#. type: Plain text
#: org-mode.org:1772
msgid ""
"To check the last month's clock data I use =F12 a v m b v c= which shows a "
"full month in the agenda, moves to the previous month, and shows the clocked "
"times only.  It's important to remove any agenda restriction locks and "
"filters when checking the logs for gaps and overlaps."
msgstr ""

#. type: Plain text
#: org-mode.org:1781
msgid ""
"The clocked-time only display in the agenda makes it easy to quickly scan "
"down the list to see if an entry is missing an end time.  If an entry is not "
"closed you can manually fix the clock entry based on other clock info around "
"that time.  *** Using clock reports to summarize time spent :PROPERTIES: "
":CUSTOM_ID: ClockReports :END:"
msgstr ""

#. type: Plain text
#: org-mode.org:1783
msgid "Billable time for clients are kept in separate org files."
msgstr ""

#. type: Plain text
#: org-mode.org:1789
msgid ""
"To get a report of time spent on tasks for =XYZ.org= you simply visit the "
"=XYZ.org= file and run an agenda clock report for the last month with =F12 < "
"a v m b R=.  This limits the agenda to this one file, shows the agenda for a "
"full month, moves to last month, and generates a clock report."
msgstr ""

#. type: Plain text
#: org-mode.org:1799
#, no-wrap
msgid ""
"My agenda org clock report settings show 5 levels of detail with links\n"
"to the tasks.  I like wider reports than the default compact setting\n"
"so I override the =:narrow= value.\n"
"#+header: :tangle yes\n"
"#+begin_src emacs-lisp\n"
";; Agenda clock report parameters\n"
"(setq org-agenda-clockreport-parameter-plist\n"
"      (quote (:link t :maxlevel 5 :fileskip0 t :compact t :narrow 80)))\n"
"#+end_src\n"
msgstr ""

#. type: Plain text
#: org-mode.org:1805
msgid ""
"I used to have a monthly clock report dynamic block in each project org file "
"and manually updated them at the end of my billing cycle.  I used this as "
"the basis for billing my clients for time spent on their projects.  I found "
"updating the dynamic blocks fairly tedious when you have more than a couple "
"of files for the month."
msgstr ""

#. type: Plain text
#: org-mode.org:1814
msgid ""
"I have since moved to using agenda clock reports shortly after that feature "
"was added.  I find this much more convenient.  The data isn't normally for "
"consumption by anyone else so the format of the agenda clock report format "
"is great for my use-case.  ** Task Estimates and column view :PROPERTIES: "
":CUSTOM_ID: TaskEstimates :END:"
msgstr ""

#. type: Plain text
#: org-mode.org:1818
msgid ""
"Estimating how long tasks take to complete is a difficult skill to master.  "
"Org-mode makes it easy to practice creating estimates for tasks and then "
"clock the actual time it takes to complete."
msgstr ""

#. type: Plain text
#: org-mode.org:1825
msgid ""
"By repeatedly estimating tasks and reviewing how your estimate relates to "
"the actual time clocked you can tune your estimating skills.  *** Creating a "
"task estimate with column mode :PROPERTIES: :CUSTOM_ID: "
"CreatingTaskEstimates :END:"
msgstr ""

#. type: Plain text
#: org-mode.org:1827
msgid "I use =properties= and =column view= to do project estimates."
msgstr ""

#. type: Plain text
#: org-mode.org:1834
msgid ""
"I set up column view globally with the following headlines #+header: :tangle "
"yes #+begin_src emacs-lisp ; Set default column view headings: Task Effort "
"Clock_Summary (setq org-columns-default-format \"%80ITEM(Task) "
"%10Effort(Effort){:} %10CLOCKSUM\")  #+end_src"
msgstr ""

#. type: Plain text
#: org-mode.org:1837
msgid ""
"This makes column view show estimated task effort and clocked times "
"side-by-side which is great for reviewing your project estimates."
msgstr ""

#. type: Plain text
#: org-mode.org:1841
msgid ""
"A property called =Effort= records the estimated amount of time a given task "
"will take to complete.  The estimate times I use are one of:"
msgstr ""

#. type: Plain text
#: org-mode.org:1852
msgid ""
"- 10 minutes - 30 minutes - 1 hour - 2 hours - 3 hours - 4 hours - 5 hours - "
"6 hours - 7 hours - 8 hours"
msgstr ""

#. type: Plain text
#: org-mode.org:1862
#, no-wrap
msgid ""
"These are stored for easy use in =column mode= in the global property\n"
"=Effort_ALL=.\n"
"#+header: :tangle yes\n"
"#+begin_src emacs-lisp\n"
"; global Effort estimate values\n"
"; global STYLE property values for completion\n"
"(setq org-global-properties (quote ((\"Effort_ALL\" . \"0:15 0:30 0:45 1:00 "
"2:00 3:00 4:00 5:00 6:00 0:00\")\n"
"                                    (\"STYLE_ALL\" . \"habit\"))))\n"
"#+end_src\n"
msgstr ""

#. type: Plain text
#: org-mode.org:1867
msgid ""
"To create an estimate for a task or subtree start column mode with =C-c C-x "
"C-c= and collapse the tree with =c=.  This shows a table overlayed on top of "
"the headlines with the task name, effort estimate, and clocked time in "
"columns."
msgstr ""

#. type: Plain text
#: org-mode.org:1870
msgid ""
"With the cursor in the =Effort= column for a task you can easily set the "
"estimated effort value with the quick keys =1= through =9=."
msgstr ""

#. type: Plain text
#: org-mode.org:1876
msgid ""
"After setting the effort values exit =column mode= with =q=.  *** Saving "
"your estimate :PROPERTIES: :CUSTOM_ID: SavingEstimate :END:"
msgstr ""

#. type: Plain text
#: org-mode.org:1880
msgid ""
"For fixed price jobs where you provide your estimate to a client, then work "
"to complete the project it is useful to save the original estimate that is "
"provided to the client."
msgstr ""

#. type: Plain text
#: org-mode.org:1885
msgid ""
"Save your original estimate by creating a dynamic clock report table at the "
"top of your estimated project subtree.  Entering =C-c C-x i RET= inserts a "
"clock table report with your estimated values and any clocked time to date."
msgstr ""

#. type: Plain text
#: org-mode.org:1905
#, no-wrap
msgid ""
"#+begin_src org :exports src\n"
"Original Estimate\n"
",#+BEGIN: columnview :hlines 1 :id local\n"
"| Task                        | Estimated Effort | CLOCKSUM |\n"
"|-----------------------------+------------------+----------|\n"
"| ** TODO Project to estimate |             5:40 |          |\n"
"| *** TODO Step 1             |             0:10 |          |\n"
"| *** TODO Step 2             |             0:10 |          |\n"
"| *** TODO Step 3             |             5:10 |          |\n"
"| **** TODO Step 3.1          |             2:00 |          |\n"
"| **** TODO Step 3.2          |             3:00 |          |\n"
"| **** TODO Step 3.3          |             0:10 |          |\n"
"| *** TODO Step 4             |             0:10 |          |\n"
",#+END:\n"
"#+end_src\n"
"I normally delete the =#+BEGIN:= and =#+END:= lines from the original\n"
"table after providing the estimate to the client to ensure I don't\n"
"accidentally update the table by hitting =C-c C-c= on the =#+BEGIN:=\n"
"line.\n"
msgstr ""

#. type: Plain text
#: org-mode.org:1913
msgid ""
"Saving the original estimate data makes it possible to refine the project "
"tasks into subtasks as you work on the project without losing the original "
"estimate data.  *** Reviewing your estimate :PROPERTIES: :CUSTOM_ID: "
"ReviewingEstimates :END:"
msgstr ""

#. type: Plain text
#: org-mode.org:1917
msgid ""
"=Column view= is great for reviewing your estimate.  This shows your "
"estimated time value and the total clock time for the project side-by-side."
msgstr ""

#. type: Plain text
#: org-mode.org:1921
msgid ""
"Creating a dynamic clock table with =C-c C-x i RET= is a great way to save "
"this project review if you need to make it available to other applications."
msgstr ""

#. type: Plain text
#: org-mode.org:1929
msgid ""
"=C-c C-x C-d= also provides a quick summary of clocked time for the current "
"org file.  ** Providing progress reports to others :PROPERTIES: :CUSTOM_ID: "
"ProgressReporting :END: [2012-02-12 Sun 16:11]"
msgstr ""

#. type: Plain text
#: org-mode.org:1933
msgid ""
"When someone wants details of what I've done recently I simple generate a "
"log report in the agenda with tasks I've completed and state changes "
"combined with a clock report for the appropriate time period."
msgstr ""

#. type: Plain text
#: org-mode.org:1937
msgid ""
"The following setting shows closed tasks and state changes in the agenda.  "
"Combined with the agenda clock report ('R') I can quickly generate all of "
"the details required."
msgstr ""

#. type: Plain text
#: org-mode.org:1943
msgid ""
"#+header: :tangle yes #+begin_src emacs-lisp ;; Agenda log mode items to "
"display (closed and state changes by default)  (setq "
"org-agenda-log-mode-items (quote (closed state)))  #+end_src"
msgstr ""

#. type: Plain text
#: org-mode.org:1948
msgid ""
"To generate the report I pull up the agenda for the appropriate time frame "
"(today, yesterday, this week, or last week) and hit the key sequence =l R= "
"to add the log report (without clocking data lines) and the agenda clock "
"report at the end."
msgstr ""

#. type: Plain text
#: org-mode.org:1953
msgid ""
"Then it's simply a matter of exporting the resulting agenda in some useful "
"format to provide to other people.  =C-x C-w /tmp/agenda.html RET= exports "
"to HTML and =C-x C-w /tmp/agenda.txt RET= exports to plain text.  Other "
"formats are available but I use these two the most."
msgstr ""

#. type: Plain text
#: org-mode.org:1956
msgid ""
"Combining this export with tag filters and =C-u R= can limit the report to "
"exactly the tags that people are interested in."
msgstr ""

#. type: Plain text
#: org-mode.org:1961
#, no-wrap
msgid ""
"* Tags\n"
":PROPERTIES:\n"
":CUSTOM_ID: Tags\n"
":END:\n"
msgstr ""

#. type: Plain text
#: org-mode.org:1963
msgid "Tasks can have any number of arbitrary tags.  Tags are used for:"
msgstr ""

#. type: Plain text
#: org-mode.org:1973
msgid ""
"- filtering todo lists and agenda views - providing context for tasks - "
"tagging notes - tagging phone calls - tagging meetings - tagging tasks to be "
"refiled - tagging tasks in a WAITING state because a parent task is WAITING "
"- tagging cancelled tasks because a parent task is CANCELLED - preventing "
"export of some subtrees when publishing"
msgstr ""

#. type: Plain text
#: org-mode.org:1977
msgid ""
"I use tags mostly for filtering in the agenda.  This means you can find "
"tasks with a specific tag easily across your large number of org-mode files."
msgstr ""

#. type: Plain text
#: org-mode.org:1986
msgid ""
"Some tags are mutually exclusive.  These are defined in a group so that only "
"one of the tags can be applied to a task at a time (disregarding tag "
"inheritance).  I use these types for tags for applying context to a task.  "
"(Work tasks have an =@office= tag, and are done at the office, Farm tasks "
"have an =@farm= tag and are done at the farm -- I can't change the oil on "
"the tractor if I'm not at the farm... so I hide these and other tasks by "
"filtering my agenda view to only =@office= tasks when I'm at the office.)"
msgstr ""

#. type: Plain text
#: org-mode.org:1995
msgid ""
"Tasks are grouped together in org-files and a =#+FILETAGS:= entry applies a "
"tag to all tasks in the file.  I use this to apply a tag to all tasks in the "
"file.  My norang.org file creates a NORANG file tag so I can filter tasks in "
"the agenda in the norang.org file easily.  ** Tags :PROPERTIES: :CUSTOM_ID: "
"OrgTagAlist :END:"
msgstr ""

#. type: Plain text
#: org-mode.org:1998
msgid ""
"Here are my tag definitions with associated keys for filtering in the agenda "
"views."
msgstr ""

#. type: Plain text
#: org-mode.org:2004
msgid ""
"The startgroup - endgroup (=@XXX=) tags are mutually exclusive - selecting "
"one removes a similar tag already on the task.  These are the context tags - "
"you can't be in two places at once so if a task is marked with @farm and you "
"add @office then the @farm tag is removed automagically."
msgstr ""

#. type: Plain text
#: org-mode.org:2010
msgid ""
"The other tags =WAITING= .. =FLAGGED= are not mutually exclusive and "
"multiple tags can appear on a single task.  Some of those tags are created "
"by todo state change triggers.  The shortcut key is used to add or remove "
"the tag using =C-c C-q= or to apply the task for filtering on the agenda."
msgstr ""

#. type: Plain text
#: org-mode.org:2017
msgid ""
"I have both =FARM= and =@farm= tags.  =FARM= is set by a =FILETAGS= entry "
"and just gives me a way to filter anything farm related.  The =@farm= tag "
"signifies that the task as to be done /at the farm/.  If I have to call "
"someone about something that would have a =FARM= tag but I can do that at "
"home on my lunch break.  I don't physically have to be at the farm to make "
"the call."
msgstr ""

#. type: Plain text
#: org-mode.org:2038
#, no-wrap
msgid ""
"#+header: :tangle yes\n"
"#+begin_src emacs-lisp\n"
"; Tags with fast selection keys\n"
"(setq org-tag-alist (quote ((:startgroup)\n"
"                            (\"@errand\" . ?e)\n"
"                            (\"@office\" . ?o)\n"
"                            (\"@home\" . ?H)\n"
"                            (\"@farm\" . ?f)\n"
"                            (:endgroup)\n"
"                            (\"WAITING\" . ?w)\n"
"                            (\"HOLD\" . ?h)\n"
"                            (\"PERSONAL\" . ?P)\n"
"                            (\"WORK\" . ?W)\n"
"                            (\"FARM\" . ?F)\n"
"                            (\"ORG\" . ?O)\n"
"                            (\"NORANG\" . ?N)\n"
"                            (\"crypt\" . ?E)\n"
"                            (\"NOTE\" . ?n)\n"
"                            (\"CANCELLED\" . ?c)\n"
"                            (\"FLAGGED\" . ??))))\n"
msgstr ""

#. type: Plain text
#: org-mode.org:2041
msgid ""
"; Allow setting single tags without the menu (setq "
"org-fast-tag-selection-single-key (quote expert))"
msgstr ""

#. type: Plain text
#: org-mode.org:2049
msgid ""
"; For tag searches ignore tasks with scheduled and deadline dates (setq "
"org-agenda-tags-todo-honor-ignore-options t)  #+end_src ** Filetags "
":PROPERTIES: :CUSTOM_ID: FileTags :END:"
msgstr ""

#. type: Plain text
#: org-mode.org:2052
msgid ""
"Filetags are a convenient way to apply one or more tags to all of the "
"headings in a file."
msgstr ""

#. type: Plain text
#: org-mode.org:2054
msgid "Filetags look like this:"
msgstr ""

#. type: Plain text
#: org-mode.org:2058
msgid "#+begin_src org :exports src ,#+FILETAGS: NORANG @office #+end_src"
msgstr ""

#. type: Plain text
#: org-mode.org:2064
msgid ""
"I have the following =#+FILETAGS:= entries in my org-mode files: *** "
"Non-work related org-mode files :PROPERTIES: :CUSTOM_ID: TaggingNonWorkFiles "
":END:"
msgstr ""

#. type: Plain text
#: org-mode.org:2077
#, no-wrap
msgid ""
"| File         | Tags                  |\n"
"|--------------+-----------------------|\n"
"| todo.org     | PERSONAL              |\n"
"| gsoc2009.org | GSOC PERSONAL         |\n"
"| git.org      | GIT WORK              |\n"
"| org.org      | ORG WORK              |\n"
"| mark.org     | MARK PERSONAL         |\n"
"| farm.org     | FARM PERSONAL         |\n"
"*** Work related org-mode files\n"
":PROPERTIES:\n"
":CUSTOM_ID: TaggingWorkFiles\n"
":END:\n"
msgstr ""

#. type: Plain text
#: org-mode.org:2090
#, no-wrap
msgid ""
"| File        | Tags            |\n"
"|-------------+-----------------|\n"
"| norang.org  | NORANG @office  |\n"
"| ABC.org     | ABC @office     |\n"
"| XYZ.org     | XYZ @office     |\n"
"| ABC-DEF.org | ABC DEF @office |\n"
"| ABC-KKK.org | ABC KKK @office |\n"
"| YYY.org     | YYY @office     |\n"
"*** Refile tasks\n"
":PROPERTIES:\n"
":CUSTOM_ID: RefileTasks\n"
":END:\n"
msgstr ""

#. type: Plain text
#: org-mode.org:2099
#, no-wrap
msgid ""
"| File       | Tags         |\n"
"|------------+--------------|\n"
"| refile.org | REFILE       |\n"
"|------------+--------------|\n"
"** State Trigger Tags\n"
":PROPERTIES:\n"
":CUSTOM_ID: StateTriggerTags\n"
":END:\n"
msgstr ""

#. type: Plain text
#: org-mode.org:2102
msgid ""
"The following tags are automatically added or removed by todo state triggers "
"described previously in [[#ToDoStateTriggers][ToDo state triggers]]"
msgstr ""

#. type: Plain text
#: org-mode.org:2109
msgid ""
"- =WAITING= - =CANCELLED= * Handling Notes :PROPERTIES: :CUSTOM_ID: "
"HandlingNotes :END:"
msgstr ""

#. type: Plain text
#: org-mode.org:2114
#, no-wrap
msgid ""
"  Notes are little gems of knowledge that you come across during your\n"
"  day.  They are just like tasks except there is nothing to do (except\n"
"  learn and memorize the gem of knowledge).  Unfortunately there are way\n"
"  too many gems to remember and my head explodes just thinking about it.\n"
msgstr ""

#. type: Plain text
#: org-mode.org:2116
#, no-wrap
msgid "  org-mode to the rescue!\n"
msgstr ""

#. type: Plain text
#: org-mode.org:2122
#, no-wrap
msgid ""
"  Often I'll find some cool feature or thing I want to remember while\n"
"  reading the org-mode and git mailing lists in Gnus.  To create a note\n"
"  I use my note capture template =C-c c n=, type a heading for the note\n"
"  and =C-c C-c= to save it.  The only other thing to do is to refile it\n"
"  (later) to the appropriate project file.\n"
msgstr ""

#. type: Plain text
#: org-mode.org:2133
#, no-wrap
msgid ""
"  I have an agenda view just to find notes.  Notes are refiled to an\n"
"  appropriate project file and task.  If there is no specific task it\n"
"  belongs to it goes to the catchall =* Notes= task.  I generally have a\n"
"  catchall notes task in every project file.  Notes are created with a\n"
"  =NOTE= tag already applied by the capture template so I'm free to\n"
"  refile the note anywhere.  As long as the note is in a project file\n"
"  that contributes to my agenda (ie. in org-agenda-files) then I can\n"
"  find the note back easily with my notes agenda view by hitting the key\n"
"  combination =F12 N=.  I'm free to limit the agenda view of notes using\n"
"  standard agenda tag filtering.\n"
msgstr ""

#. type: Plain text
#: org-mode.org:2137
#, no-wrap
msgid ""
"  Short notes with a meaningful headline are a great way to remember\n"
"  technical details without the need to actually remember anything -\n"
"  other than how to find them back when you need them using =F12 N=.\n"
msgstr ""

#. type: Plain text
#: org-mode.org:2141
#, no-wrap
msgid ""
"  Notes that are project related and not generally useful can be\n"
"  archived with the project and removed from the agenda when the project\n"
"  is removed.\n"
msgstr ""

#. type: Plain text
#: org-mode.org:2152
#, no-wrap
msgid ""
"  So my org notes go in org.org and my git notes go in git.org both\n"
"  under the =* Notes= task.  I'll forever be able to find those.  A note\n"
"  about some work project detail I want to remember with the project is\n"
"  filed to the project task under the appropriate work org-mode file and\n"
"  eventually gets removed from the agenda when the project is complete\n"
"  and archived.\n"
"* Handling Phone Calls\n"
":PROPERTIES:\n"
":CUSTOM_ID: HandlinePhoneCalls\n"
":END:\n"
msgstr ""

#. type: Plain text
#: org-mode.org:2158
msgid ""
"Phone calls are interruptions and I use capture mode to deal with these "
"(like all interruptions).  Most of the heavy lifting for phone calls is done "
"by capture mode.  I use a special capture template for phone calls combined "
"with a custom function that replaces text with information from my =bbdb= "
"addressbook database."
msgstr ""

#. type: Plain text
#: org-mode.org:2170
msgid ""
"=C-c c p= starts a capture task normally and I'm free to enter notes from "
"the call in the template immediately.  The cursor starts in the template "
"normally where the name of the caller would be inserted.  I can use a =bbdb= "
"lookup function to insert the name with =f9-p= or I can just type in "
"whatever is appropriate.  If a =bbdb= entry needs to be created for the "
"caller I can do that and replace the caller details with =f9-p= anytime that "
"is convenient for me.  I found that automatically calling the bbdb lookup "
"function would interrupt my workflow during the call in cases where the "
"information about the caller was not readily available.  Sometimes I want to "
"make notes first and get the caller details later during the call."
msgstr ""

#. type: Plain text
#: org-mode.org:2175
msgid ""
"The phone call capture template starts the clock as soon as the phone rings "
"and I'm free to lookup and replace the caller in bbdb anytime during or "
"after the call.  Capture mode starts the clock using the =:clock-in t= "
"setting in the template."
msgstr ""

#. type: Plain text
#: org-mode.org:2183
msgid ""
"When the phone call ends I simple do =C-c C-c= to close the capture buffer "
"and stop the clock.  If I have to close it early and look up other "
"information during the call I just do =C-c C-c F9-SPC= to close the capture "
"buffer (which stops the clock) and then immediately switch back to the last "
"clocked item to continue the clock in the phone call task.  When the phone "
"call ends I clock out which normally clocks in my default task again (if "
"any)."
msgstr ""

#. type: Plain text
#: org-mode.org:2187
msgid ""
"Here is my set up for phone calls.  I would like to thank Gregory J. Grubbs "
"for the original bbdb lookup functions which this version is based on."
msgstr ""

#. type: Plain text
#: org-mode.org:2190
msgid ""
"Below is the partial capture template showing the phone call template "
"followed by the phone-call related lookup functions."
msgstr ""

#. type: Plain text
#: org-mode.org:2200
#, no-wrap
msgid ""
"#+header: :tangle no\n"
"#+begin_src emacs-lisp\n"
";; Capture templates for: TODO tasks, Notes, appointments, phone calls, and "
"org-protocol\n"
"(setq org-capture-templates\n"
"      (quote (...\n"
"              (\"p\" \"Phone call\" entry (file \"~/git/org/refile.org\")\n"
"               \"* PHONE %? :PHONE:\\n%U\" :clock-in t :clock-resume t)\n"
"              ...)))\n"
"#+end_src\n"
msgstr ""

#. type: Plain text
#: org-mode.org:2205
msgid ""
"#+header: :tangle yes #+begin_src emacs-lisp (require 'bbdb)  (require "
"'bbdb-com)"
msgstr ""

#. type: Plain text
#: org-mode.org:2207
msgid "(global-set-key (kbd \"<f9> p\") 'bh/phone-call)"
msgstr ""

#. type: Plain text
#: org-mode.org:2226
#, no-wrap
msgid ""
";;\n"
";; Phone capture template handling with BBDB lookup\n"
";; Adapted from code by Gregory J. Grubbs\n"
"(defun bh/phone-call ()\n"
"  \"Return name and company info for caller from bbdb lookup\"\n"
"  (interactive)\n"
"  (let* (name rec caller)\n"
"    (setq name (completing-read \"Who is calling? \"\n"
"                                (bbdb-hashtable)\n"
"                                'bbdb-completion-predicate\n"
"                                'confirm))\n"
"    (when (> (length name) 0)\n"
"      ; Something was supplied - look it up in bbdb\n"
"      (setq rec\n"
"            (or (first\n"
"                 (or (bbdb-search (bbdb-records) name nil nil)\n"
"                     (bbdb-search (bbdb-records) nil name nil)))\n"
"                name)))\n"
msgstr ""

#. type: Plain text
#: org-mode.org:2244
#, no-wrap
msgid ""
"    ; Build the bbdb link if we have a bbdb record, otherwise just return "
"the name\n"
"    (setq caller (cond ((and rec (vectorp rec))\n"
"                        (let ((name (bbdb-record-name rec))\n"
"                              (company (bbdb-record-company rec)))\n"
"                          (concat \"[[bbdb:\"\n"
"                                  name \"][\"\n"
"                                  name \"]]\"\n"
"                                  (when company\n"
"                                    (concat \" - \" company)))))\n"
"                       (rec)\n"
"                       (t \"NameOfCaller\")))\n"
"    (insert caller)))  \n"
"#+end_src\n"
"* GTD stuff\n"
":PROPERTIES:\n"
":CUSTOM_ID: GTD\n"
":END:\n"
msgstr ""

#. type: Plain text
#: org-mode.org:2252
msgid ""
"Most of my day is deadline/schedule driven.  I work off of the agenda first "
"and then pick items from the todo lists as outlined in "
"[[#WhatDoIWorkOnNext][What do I work on next?]] ** Weekly Review Process "
":PROPERTIES: :CUSTOM_ID: GTDWeeklyReview :END:"
msgstr ""

#. type: Plain text
#: org-mode.org:2255
msgid ""
"The first day of the week (usually Monday) I do my weekly review.  I keep a "
"list like this one to remind me what needs to be done."
msgstr ""

#. type: Plain text
#: org-mode.org:2264
msgid ""
"To keep the agenda fast I set #+header: :tangle yes #+begin_src emacs-lisp "
"(setq org-agenda-span 'day)  #+end_src so only today's date is shown by "
"default.  I only need the weekly view during my weekly review and this keeps "
"my agenda generation fast."
msgstr ""

#. type: Plain text
#: org-mode.org:2268
msgid ""
"I have a recurring task which keeps my weekly review checklist handy.  This "
"pops up as a reminder on Monday's.  This week I'm doing my weekly review on "
"Tuesday since Monday was a holiday."
msgstr ""

#. type: Plain text
#: org-mode.org:2274
#, no-wrap
msgid ""
"#+begin_src org :exports src\n"
",* NEXT Weekly Review [0/6]\n"
"  SCHEDULED: <2009-05-18 Mon ++1w> \n"
"  :LOGBOOK:...\n"
"  :PROPERTIES:...\n"
msgstr ""

#. type: Plain text
#: org-mode.org:2276
#, no-wrap
msgid "  What to review:\n"
msgstr ""

#. type: Bullet: '   - '
#: org-mode.org:2284
msgid "[ ] Check follow-up folder"
msgstr ""

#. type: Bullet: '   - '
#: org-mode.org:2284
msgid "[ ] Review weekly agenda =F12 a w //="
msgstr ""

#. type: Bullet: '   - '
#: org-mode.org:2284
msgid "[ ] Check clocking data for past week =v c="
msgstr ""

#. type: Plain text
#: org-mode.org:2284
#, no-wrap
msgid ""
"   - [ ] Review clock report for past week =R=\n"
"     - Check where we spent time (too much or too little) and rectify this "
"week\n"
"   - [ ] Look at entire agenda for today  =F12 SPC=\n"
"   - [ ] Review projects =F12 SPC //= and =V= repeatedly to view each "
"project\n"
msgstr ""

#. type: Plain text
#: org-mode.org:2295
#, no-wrap
msgid ""
"   - start work\n"
"     - daily agenda first - knock off items\n"
"     - then work on NEXT tasks\n"
"#+end_src\n"
"The first item [ ] Check follow-up folder makes me pull out the paper\n"
"file I dump stuff into all week long - things I need to take care of\n"
"but are in no particular hurry to deal with.  Stuff I get in the mail\n"
"etc. that I don't want to deal with now.  I just toss it in my\n"
"=Follow-Up= folder in the filing cabinet and forget about it until the\n"
"weekly review.\n"
msgstr ""

#. type: Plain text
#: org-mode.org:2300
msgid ""
"I go through the folder and weed out anything that needs to be dealt with.  "
"After that everything else is in =org-mode=.  I tend to schedule tasks onto "
"the agenda for the coming week so that I don't spend lots of time trying to "
"find what needs to be worked on next."
msgstr ""

#. type: Plain text
#: org-mode.org:2306
msgid ""
"This works for me.  Your mileage may vary ;)  ** Project definition and "
"finding stuck projects :PROPERTIES: :CUSTOM_ID: Projects :END:"
msgstr ""

#. type: Plain text
#: org-mode.org:2310
msgid ""
"I'm using a new lazy project definition to mark tasks as projects.  This "
"requires zero effort from me.  Any task with a subtask using a todo keyword "
"is a project.  Period."
msgstr ""

#. type: Plain text
#: org-mode.org:2313
msgid ""
"Projects are 'stuck' if they have no subtask with a =NEXT= todo keyword task "
"defined."
msgstr ""

#. type: Plain text
#: org-mode.org:2318
msgid ""
"The org-mode stuck projects agenda view lists projects that have no =NEXT= "
"task defined.  Stuck projects show up on my block agenda and I tend to "
"assign a =NEXT= task so the list remains empty.  This helps to keep projects "
"moving forward."
msgstr ""

#. type: Plain text
#: org-mode.org:2321
msgid ""
"I disable the default org-mode stuck projects agenda view with the following "
"setting."
msgstr ""

#. type: Plain text
#: org-mode.org:2326
msgid ""
"#+header: :tangle yes #+begin_src emacs-lisp (setq org-stuck-projects (quote "
"(\"\" nil nil \"\")))  #+end_src"
msgstr ""

#. type: Plain text
#: org-mode.org:2331
msgid ""
"This prevents org-mode from trying to show incorrect data if I select the "
"default stuck project view with =F12 #= from the agenda menu.  My customized "
"stuck projects view is part of my block agenda displayed with =F12 SPC=."
msgstr ""

#. type: Plain text
#: org-mode.org:2335
msgid ""
"Projects can have subprojects - and these subprojects can also be stuck.  "
"Any project that is stuck shows up on the stuck projects list so I can "
"indicate or create a =NEXT= task to move that project forward."
msgstr ""

#. type: Plain text
#: org-mode.org:2341
msgid ""
"In the following example =Stuck Project A= is stuck because it has no "
"subtask which is =NEXT=.  =Project C= is not stuck because it has =NEXT= "
"tasks =SubTask G= and =Task I=.  =Stuck Sub Project D= is stuck because "
"=SubTask E= is not =NEXT= and there are no other tasks available in this "
"project."
msgstr ""

#. type: Plain text
#: org-mode.org:2355
msgid ""
"#+begin_src org :exports src ,* Category ,** TODO Stuck Project A ,*** TODO "
"Task B ,** TODO Project C ,*** TODO Stuck Sub Project D ,**** TODO SubTask E "
",*** TODO Sub Project F ,**** NEXT SubTask G ,**** TODO SubTask H ,*** NEXT "
"Task I ,*** TODO Task J #+end_src"
msgstr ""

#. type: Plain text
#: org-mode.org:2364
msgid ""
"All of the stuck projects and subprojects show up in the stuck projects list "
"and that is my indication to assign or create =NEXT= tasks until the stuck "
"projects list is empty.  Occasionally some subtask is =WAITING= for "
"something and the project is stuck until that condition is satisfied.  In "
"this case I leave it on the stuck project list and just work on something "
"else.  This stuck project 'bugs' me regularly when I see it on the block "
"agenda and this prompts me to follow up on the thing that I'm waiting for."
msgstr ""

#. type: Plain text
#: org-mode.org:2384
#, no-wrap
msgid ""
"I have the following helper functions defined for projects which are\n"
"used by agenda views.\n"
"#+header: :tangle yes\n"
"#+begin_src emacs-lisp\n"
"(defun bh/is-project-p ()\n"
"  \"Any task with a todo keyword subtask\"\n"
"  (save-restriction\n"
"    (widen)\n"
"    (let ((has-subtask)\n"
"          (subtree-end (save-excursion (org-end-of-subtree t)))\n"
"          (is-a-task (member (nth 2 (org-heading-components)) "
"org-todo-keywords-1)))\n"
"      (save-excursion\n"
"        (forward-line 1)\n"
"        (while (and (not has-subtask)\n"
"                    (< (point) subtree-end)\n"
"                    (re-search-forward \"^\\*+ \" subtree-end t))\n"
"          (when (member (org-get-todo-state) org-todo-keywords-1)\n"
"            (setq has-subtask t))))\n"
"      (and is-a-task has-subtask))))\n"
msgstr ""

#. type: Plain text
#: org-mode.org:2395
#, no-wrap
msgid ""
"(defun bh/is-project-subtree-p ()\n"
"  \"Any task with a todo keyword that is in a project subtree.\n"
"Callers of this function already widen the buffer view.\"\n"
"  (let ((task (save-excursion (org-back-to-heading 'invisible-ok)\n"
"                              (point))))\n"
"    (save-excursion\n"
"      (bh/find-project-task)\n"
"      (if (equal (point) task)\n"
"          nil\n"
"        t))))\n"
msgstr ""

#. type: Plain text
#: org-mode.org:2411
#, no-wrap
msgid ""
"(defun bh/is-task-p ()\n"
"  \"Any task with a todo keyword and no subtask\"\n"
"  (save-restriction\n"
"    (widen)\n"
"    (let ((has-subtask)\n"
"          (subtree-end (save-excursion (org-end-of-subtree t)))\n"
"          (is-a-task (member (nth 2 (org-heading-components)) "
"org-todo-keywords-1)))\n"
"      (save-excursion\n"
"        (forward-line 1)\n"
"        (while (and (not has-subtask)\n"
"                    (< (point) subtree-end)\n"
"                    (re-search-forward \"^\\*+ \" subtree-end t))\n"
"          (when (member (org-get-todo-state) org-todo-keywords-1)\n"
"            (setq has-subtask t))))\n"
"      (and is-a-task (not has-subtask)))))\n"
msgstr ""

#. type: Plain text
#: org-mode.org:2421
#, no-wrap
msgid ""
"(defun bh/is-subproject-p ()\n"
"  \"Any task which is a subtask of another project\"\n"
"  (let ((is-subproject)\n"
"        (is-a-task (member (nth 2 (org-heading-components)) "
"org-todo-keywords-1)))\n"
"    (save-excursion\n"
"      (while (and (not is-subproject) (org-up-heading-safe))\n"
"        (when (member (nth 2 (org-heading-components)) "
"org-todo-keywords-1)\n"
"          (setq is-subproject t))))\n"
"    (and is-a-task is-subproject)))\n"
msgstr ""

#. type: Plain text
#: org-mode.org:2429
#, no-wrap
msgid ""
"(defun bh/list-sublevels-for-projects-indented ()\n"
"  \"Set org-tags-match-list-sublevels so when restricted to a subtree we "
"list all subtasks.\n"
"  This is normally used by skipping functions where this variable is already "
"local to the agenda.\"\n"
"  (if (marker-buffer org-agenda-restrict-begin)\n"
"      (setq org-tags-match-list-sublevels 'indented)\n"
"    (setq org-tags-match-list-sublevels nil))\n"
"  nil)\n"
msgstr ""

#. type: Plain text
#: org-mode.org:2437
#, no-wrap
msgid ""
"(defun bh/list-sublevels-for-projects ()\n"
"  \"Set org-tags-match-list-sublevels so when restricted to a subtree we "
"list all subtasks.\n"
"  This is normally used by skipping functions where this variable is already "
"local to the agenda.\"\n"
"  (if (marker-buffer org-agenda-restrict-begin)\n"
"      (setq org-tags-match-list-sublevels t)\n"
"    (setq org-tags-match-list-sublevels nil))\n"
"  nil)\n"
msgstr ""

#. type: Plain text
#: org-mode.org:2439
msgid "(defvar bh/hide-scheduled-and-waiting-next-tasks t)"
msgstr ""

#. type: Plain text
#: org-mode.org:2446
#, no-wrap
msgid ""
"(defun bh/toggle-next-task-display ()\n"
"  (interactive)\n"
"  (setq bh/hide-scheduled-and-waiting-next-tasks (not "
"bh/hide-scheduled-and-waiting-next-tasks))\n"
"  (when  (equal major-mode 'org-agenda-mode)\n"
"    (org-agenda-redo))\n"
"  (message \"%s WAITING and SCHEDULED NEXT Tasks\" (if "
"bh/hide-scheduled-and-waiting-next-tasks \"Hide\" \"Show\")))\n"
msgstr ""

#. type: Plain text
#: org-mode.org:2464
#, no-wrap
msgid ""
"(defun bh/skip-stuck-projects ()\n"
"  \"Skip trees that are not stuck projects\"\n"
"  (save-restriction\n"
"    (widen)\n"
"    (let ((next-headline (save-excursion (or (outline-next-heading) "
"(point-max)))))\n"
"      (if (bh/is-project-p)\n"
"          (let* ((subtree-end (save-excursion (org-end-of-subtree t)))\n"
"                 (has-next ))\n"
"            (save-excursion\n"
"              (forward-line 1)\n"
"              (while (and (not has-next) (< (point) subtree-end) "
"(re-search-forward \"^\\\\*+ NEXT \" subtree-end t))\n"
"                (unless (member \"WAITING\" (org-get-tags-at))\n"
"                  (setq has-next t))))\n"
"            (if has-next\n"
"                nil\n"
"              next-headline)) ; a stuck project, has subtasks but no next "
"task\n"
"        nil))))\n"
msgstr ""

#. type: Plain text
#: org-mode.org:2483
#, no-wrap
msgid ""
"(defun bh/skip-non-stuck-projects ()\n"
"  \"Skip trees that are not stuck projects\"\n"
"  ;; (bh/list-sublevels-for-projects-indented)\n"
"  (save-restriction\n"
"    (widen)\n"
"    (let ((next-headline (save-excursion (or (outline-next-heading) "
"(point-max)))))\n"
"      (if (bh/is-project-p)\n"
"          (let* ((subtree-end (save-excursion (org-end-of-subtree t)))\n"
"                 (has-next ))\n"
"            (save-excursion\n"
"              (forward-line 1)\n"
"              (while (and (not has-next) (< (point) subtree-end) "
"(re-search-forward \"^\\\\*+ NEXT \" subtree-end t))\n"
"                (unless (member \"WAITING\" (org-get-tags-at))\n"
"                  (setq has-next t))))\n"
"            (if has-next\n"
"                next-headline\n"
"              nil)) ; a stuck project, has subtasks but no next task\n"
"        next-headline))))\n"
msgstr ""

#. type: Plain text
#: org-mode.org:2499
#, no-wrap
msgid ""
"(defun bh/skip-non-projects ()\n"
"  \"Skip trees that are not projects\"\n"
"  ;; (bh/list-sublevels-for-projects-indented)\n"
"  (if (save-excursion (bh/skip-non-stuck-projects))\n"
"      (save-restriction\n"
"        (widen)\n"
"        (let ((subtree-end (save-excursion (org-end-of-subtree t))))\n"
"          (cond\n"
"           ((bh/is-project-p)\n"
"            nil)\n"
"           ((and (bh/is-project-subtree-p) (not (bh/is-task-p)))\n"
"            nil)\n"
"           (t\n"
"            subtree-end))))\n"
"    (save-excursion (org-end-of-subtree t))))\n"
msgstr ""

#. type: Plain text
#: org-mode.org:2512
#, no-wrap
msgid ""
"(defun bh/skip-project-trees-and-habits ()\n"
"  \"Skip trees that are projects\"\n"
"  (save-restriction\n"
"    (widen)\n"
"    (let ((subtree-end (save-excursion (org-end-of-subtree t))))\n"
"      (cond\n"
"       ((bh/is-project-p)\n"
"        subtree-end)\n"
"       ((org-is-habit-p)\n"
"        subtree-end)\n"
"       (t\n"
"        nil)))))\n"
msgstr ""

#. type: Plain text
#: org-mode.org:2530
#, no-wrap
msgid ""
"(defun bh/skip-projects-and-habits-and-single-tasks ()\n"
"  \"Skip trees that are projects, tasks that are habits, single non-project "
"tasks\"\n"
"  (save-restriction\n"
"    (widen)\n"
"    (let ((next-headline (save-excursion (or (outline-next-heading) "
"(point-max)))))\n"
"      (cond\n"
"       ((org-is-habit-p)\n"
"        next-headline)\n"
"       ((and bh/hide-scheduled-and-waiting-next-tasks\n"
"             (member \"WAITING\" (org-get-tags-at)))\n"
"        next-headline)\n"
"       ((bh/is-project-p)\n"
"        next-headline)\n"
"       ((and (bh/is-task-p) (not (bh/is-project-subtree-p)))\n"
"        next-headline)\n"
"       (t\n"
"        nil)))))\n"
msgstr ""

#. type: Plain text
#: org-mode.org:2554
#, no-wrap
msgid ""
"(defun bh/skip-project-tasks-maybe ()\n"
"  \"Show tasks related to the current restriction.\n"
"When restricted to a project, skip project and sub project tasks, habits, "
"NEXT tasks, and loose tasks.\n"
"When not restricted, skip project and sub-project tasks, habits, and project "
"related tasks.\"\n"
"  (save-restriction\n"
"    (widen)\n"
"    (let* ((subtree-end (save-excursion (org-end-of-subtree t)))\n"
"           (next-headline (save-excursion (or (outline-next-heading) "
"(point-max))))\n"
"           (limit-to-project (marker-buffer org-agenda-restrict-begin)))\n"
"      (cond\n"
"       ((bh/is-project-p)\n"
"        next-headline)\n"
"       ((org-is-habit-p)\n"
"        subtree-end)\n"
"       ((and (not limit-to-project)\n"
"             (bh/is-project-subtree-p))\n"
"        subtree-end)\n"
"       ((and limit-to-project\n"
"             (bh/is-project-subtree-p)\n"
"             (member (org-get-todo-state) (list \"NEXT\")))\n"
"        subtree-end)\n"
"       (t\n"
"        nil)))))\n"
msgstr ""

#. type: Plain text
#: org-mode.org:2570
#, no-wrap
msgid ""
"(defun bh/skip-project-tasks ()\n"
"  \"Show non-project tasks.\n"
"Skip project and sub-project tasks, habits, and project related tasks.\"\n"
"  (save-restriction\n"
"    (widen)\n"
"    (let* ((subtree-end (save-excursion (org-end-of-subtree t))))\n"
"      (cond\n"
"       ((bh/is-project-p)\n"
"        subtree-end)\n"
"       ((org-is-habit-p)\n"
"        subtree-end)\n"
"       ((bh/is-project-subtree-p)\n"
"        subtree-end)\n"
"       (t\n"
"        nil)))))\n"
msgstr ""

#. type: Plain text
#: org-mode.org:2590
#, no-wrap
msgid ""
"(defun bh/skip-non-project-tasks ()\n"
"  \"Show project tasks.\n"
"Skip project and sub-project tasks, habits, and loose non-project tasks.\"\n"
"  (save-restriction\n"
"    (widen)\n"
"    (let* ((subtree-end (save-excursion (org-end-of-subtree t)))\n"
"           (next-headline (save-excursion (or (outline-next-heading) "
"(point-max)))))\n"
"      (cond\n"
"       ((bh/is-project-p)\n"
"        next-headline)\n"
"       ((org-is-habit-p)\n"
"        subtree-end)\n"
"       ((and (bh/is-project-subtree-p)\n"
"             (member (org-get-todo-state) (list \"NEXT\")))\n"
"        subtree-end)\n"
"       ((not (bh/is-project-subtree-p))\n"
"        subtree-end)\n"
"       (t\n"
"        nil)))))\n"
msgstr ""

#. type: Plain text
#: org-mode.org:2603
#, no-wrap
msgid ""
"(defun bh/skip-projects-and-habits ()\n"
"  \"Skip trees that are projects and tasks that are habits\"\n"
"  (save-restriction\n"
"    (widen)\n"
"    (let ((subtree-end (save-excursion (org-end-of-subtree t))))\n"
"      (cond\n"
"       ((bh/is-project-p)\n"
"        subtree-end)\n"
"       ((org-is-habit-p)\n"
"        subtree-end)\n"
"       (t\n"
"        nil)))))\n"
msgstr ""

#. type: Plain text
#: org-mode.org:2619
#, no-wrap
msgid ""
"(defun bh/skip-non-subprojects ()\n"
"  \"Skip trees that are not projects\"\n"
"  (let ((next-headline (save-excursion (outline-next-heading))))\n"
"    (if (bh/is-subproject-p)\n"
"        nil\n"
"      next-headline)))\n"
"#+end_src\n"
"* Archiving\n"
":PROPERTIES:\n"
":CUSTOM_ID: Archiving\n"
":END:\n"
"** Archiving Subtrees\n"
":PROPERTIES:\n"
":CUSTOM_ID: ArchivingSubtrees\n"
":END:\n"
msgstr ""

#. type: Plain text
#: org-mode.org:2624
msgid ""
"My archiving procedure has changed.  I used to move entire subtrees to a "
"separate archive file for the project.  Task subtrees in =FILE.org= get "
"archived to =FILE.org_archive= using the =a y= command in the agenda."
msgstr ""

#. type: Plain text
#: org-mode.org:2634
msgid ""
"I still archive to the same archive file as before but now I archive any "
"done state todo task that is old enough to archive.  Tasks to archive are "
"listed automatically at the end of my block agenda and these are guaranteed "
"to be old enough that I've already billed any time associated with these "
"tasks.  This cleans up my project trees and removes the old tasks that are "
"no longer interesting.  The archived tasks get extra property data created "
"during the archive procedure so that it is possible to reconstruct exactly "
"where the archived entry came from in the rare case where you want to "
"unarchive something."
msgstr ""

#. type: Plain text
#: org-mode.org:2637
msgid ""
"My archive files are huge but so far I haven't found a need to split them by "
"year (or decade) :)"
msgstr ""

#. type: Plain text
#: org-mode.org:2643
msgid ""
"Archivable tasks show up in the last section of my block agenda when a new "
"month starts.  Any tasks that are done but have no timestamps this month or "
"last month (ie. they are over 30 days old) are available to archive.  "
"Timestamps include closed dates, notes, clock data, etc - any active or "
"inactive timestamp in the task."
msgstr ""

#. type: Plain text
#: org-mode.org:2651
msgid ""
"Archiving is trivial.  Just mark all of the entries in the block agenda "
"using the =m= key and then archive them all to the appropriate place with =B "
"$=.  This normally takes less than 5 minutes once a month.  ** Archive Setup "
":PROPERTIES: :CUSTOM_ID: ArchiveSetup :END:"
msgstr ""

#. type: Plain text
#: org-mode.org:2654
msgid ""
"I no longer use an =ARCHIVE= property in my subtrees.  Tasks can just "
"archive normally to the =Archived Tasks= heading in the archive file."
msgstr ""

#. type: Plain text
#: org-mode.org:2659
msgid ""
"The following setting ensures that task states are untouched when they are "
"archived.  This makes it possible to archive tasks that are not marked "
"=DONE=.  By default tasks are archived under the heading =* Archived Tasks= "
"in the archive file."
msgstr ""

#. type: Plain text
#: org-mode.org:2668
msgid ""
"This archiving function does not keep your project trees intact.  It "
"archives done state tasks after they are old enough to they are removed from "
"the main org file.  It should be possible to reconstruct the original tree "
"from the archive detail properties but I've never needed to do this yet.  "
"The archived detail is very useful the few times a year I actually need to "
"look for some archived data but most of the time I just move it out of the "
"way and keep it for historical purposes."
msgstr ""

#. type: Plain text
#: org-mode.org:2674
msgid ""
"#+header: :tangle yes #+begin_src emacs-lisp (setq org-archive-mark-done "
"nil)  (setq org-archive-location \"%s_archive::* Archived Tasks\")  "
"#+end_src"
msgstr ""

#. type: Plain text
#: org-mode.org:2704
#, no-wrap
msgid ""
"#+header: :tangle yes\n"
"#+begin_src emacs-lisp\n"
"(defun bh/skip-non-archivable-tasks ()\n"
"  \"Skip trees that are not available for archiving\"\n"
"  (save-restriction\n"
"    (widen)\n"
"    ;; Consider only tasks with done todo headings as archivable "
"candidates\n"
"    (let ((next-headline (save-excursion (or (outline-next-heading) "
"(point-max))))\n"
"          (subtree-end (save-excursion (org-end-of-subtree t))))\n"
"      (if (member (org-get-todo-state) org-todo-keywords-1)\n"
"          (if (member (org-get-todo-state) org-done-keywords)\n"
"              (let* ((daynr (string-to-int (format-time-string \"%d\" "
"(current-time))))\n"
"                     (a-month-ago (* 60 60 24 (+ daynr 1)))\n"
"                     (last-month (format-time-string \"%Y-%m-\" "
"(time-subtract (current-time) (seconds-to-time a-month-ago))))\n"
"                     (this-month (format-time-string \"%Y-%m-\" "
"(current-time)))\n"
"                     (subtree-is-current (save-excursion\n"
"                                           (forward-line 1)\n"
"                                           (and (< (point) subtree-end)\n"
"                                                (re-search-forward (concat "
"last-month \"\\\\|\" this-month) subtree-end t)))))\n"
"                (if subtree-is-current\n"
"                    subtree-end ; Has a date in this month or last month, "
"skip it\n"
"                  nil))  ; available to archive\n"
"            (or subtree-end (point-max)))\n"
"        next-headline))))\n"
"#+end_src\n"
"** Archive Tag - Hiding Information\n"
":PROPERTIES:\n"
":CUSTOM_ID: ArchiveTagHidesInfo\n"
":END:\n"
msgstr ""

#. type: Plain text
#: org-mode.org:2714
msgid ""
"The only time I set the ARCHIVE tag on a task is to prevent it from opening "
"by default because it has tons of information I don't really need to look at "
"on a regular basis.  I can open the task with C-TAB if I need to see the "
"gory details (like a huge table of data related to the task) but normally I "
"don't need that information displayed.  ** When to Archive :PROPERTIES: "
":CUSTOM_ID: WhenToArchive :END:"
msgstr ""

#. type: Plain text
#: org-mode.org:2722
msgid ""
"Archiving monthly works well for me.  I keep completed tasks around for at "
"least 30 days before archiving them.  This keeps current clocking "
"information for the last 30 days out of the archives.  This keeps my files "
"that contribute to the agenda fairly current (this month, and last month, "
"and anything that is unfinished).  I only rarely visit tasks in the archive "
"when I need to pull up ancient history for something."
msgstr ""

#. type: Plain text
#: org-mode.org:2730
msgid ""
"Archiving keeps my main working files clutter-free.  If I ever need the "
"detail for the archived tasks they are available in the appropriate archive "
"file.  * Publishing and Exporting :PROPERTIES: :CUSTOM_ID: Publishing :END:"
msgstr ""

#. type: Plain text
#: org-mode.org:2734
msgid ""
"I don't do a lot of publishing for other people but I do keep a set of "
"private client system documentation online.  Most of this documentation is a "
"collection of notes exported to HTML."
msgstr ""

#. type: Plain text
#: org-mode.org:2737
msgid ""
"Everything at http://doc.norang.ca/ is generated by publishing org-files.  "
"This includes the index pages on this site."
msgstr ""

#. type: Plain text
#: org-mode.org:2739
msgid ""
"Org-mode can export to a variety of publishing formats including (but not "
"limited to)"
msgstr ""

#. type: Bullet: '- '
#: org-mode.org:2749
msgid "ASCII (plain text - but not the original org-mode file)"
msgstr ""

#. type: Bullet: '- '
#: org-mode.org:2749
msgid "HTML"
msgstr ""

#. type: Bullet: '- '
#: org-mode.org:2749
msgid "LaTeX"
msgstr ""

#. type: Bullet: '- '
#: org-mode.org:2749
msgid "Docbook which enables getting to lots of other formats like ODF, XML, etc"
msgstr ""

#. type: Bullet: '- '
#: org-mode.org:2749
msgid "PDF via LaTeX or Docbook"
msgstr ""

#. type: Bullet: '- '
#: org-mode.org:2749
msgid "iCal"
msgstr ""

#. type: Plain text
#: org-mode.org:2756
msgid ""
"I haven't begun the scratch the surface of what org-mode is capable of "
"doing.  My main use case for org-mode publishing is just to create HTML "
"documents for viewing online conveniently.  Someday I'll get time to try out "
"the other formats when I need them for something.  ** New Exporter Setup "
"[2013-04-20 Sat 08:18]"
msgstr ""

#. type: Plain text
#: org-mode.org:2758
msgid "The new exporter created by Nicolas Goaziou was introduced in org 8.0."
msgstr ""

#. type: Plain text
#: org-mode.org:2760
msgid "I have the following setup for the exporters I use."
msgstr ""

#. type: Plain text
#: org-mode.org:2763
msgid ""
"Alphabetical listing options need to be set before the exporters are loaded "
"for filling to work correctly."
msgstr ""

#. type: Plain text
#: org-mode.org:2767
msgid "#+header: :tangle yes #+begin_src emacs-lisp (setq org-alphabetical-lists t)"
msgstr ""

#. type: Plain text
#: org-mode.org:2773
msgid ""
";; Explicitly load required exporters (require 'ox-html)  (require "
"'ox-latex)  (require 'ox-ascii)  #+end_src"
msgstr ""

#. type: Plain text
#: org-mode.org:2777
#, no-wrap
msgid ""
"*** Conversion from the old exporter to the new exporter\n"
"[2013-04-20 Sat 08:20]\n"
msgstr ""

#. type: Plain text
#: org-mode.org:2780
msgid ""
"Here is the list of changes I made to move from the old exporter (pre org "
"8.0) to the new exporter."
msgstr ""

#. type: Plain text
#: org-mode.org:2782
msgid "- Explicitly require exporters"
msgstr ""

#. type: Bullet: '  - '
#: org-mode.org:2784
msgid "Add =ox-html="
msgstr ""

#. type: Bullet: '  - '
#: org-mode.org:2786
msgid "Add =ox-latex="
msgstr ""

#. type: Bullet: '  - '
#: org-mode.org:2788
msgid "Add =ox-ascii="
msgstr ""

#. type: Plain text
#: org-mode.org:2790
msgid "- Rename variables"
msgstr ""

#. type: Bullet: '  - '
#: org-mode.org:2792
msgid "=org-export-html-style-extra= to =org-html-head-extra="
msgstr ""

#. type: Bullet: '  - '
#: org-mode.org:2794
msgid "=org-export-html-validation-link= to =org-html-validation-link="
msgstr ""

#. type: Bullet: '  - '
#: org-mode.org:2796
msgid "=org-export-html-inline-images= to =org-html-inline-images="
msgstr ""

#. type: Bullet: '  - '
#: org-mode.org:2798
msgid ""
"=org-export-html-style-include-default= to "
"=org-html-head-include-default-style="
msgstr ""

#. type: Bullet: '  - '
#: org-mode.org:2800
msgid "=org-export-html-xml-declaration= to =org-html-xml-declaration="
msgstr ""

#. type: Bullet: '  - '
#: org-mode.org:2802
msgid "=org-export-latex-listings= to =org-latex-listings="
msgstr ""

#. type: Bullet: '  - '
#: org-mode.org:2804
msgid "=org-export-html-style-include-scripts= to =org-html-head-include-scripts="
msgstr ""

#. type: Plain text
#: org-mode.org:2806
msgid "- Publishing changes"
msgstr ""

#. type: Bullet: '  - '
#: org-mode.org:2808
msgid "Rename =:publishing-function="
msgstr ""

#. type: Bullet: '    - '
#: org-mode.org:2810
msgid "=org-publish-org-to-html= to =org-html-publish-to-html="
msgstr ""

#. type: Bullet: '    - '
#: org-mode.org:2812
msgid "=org-publish-org-to-org= to =org-org-publish-to-org="
msgstr ""

#. type: Bullet: '  - '
#: org-mode.org:2814
msgid "Change =:style= to =:html-head="
msgstr ""

#. type: Plain text
#: org-mode.org:2816
msgid "- Change =bh/is-late-deadline= to handle modified deadline string in agenda"
msgstr ""

#. type: Plain text
#: org-mode.org:2818
msgid "- Reverse agenda sorting for late deadlines"
msgstr ""

#. type: Plain text
#: org-mode.org:2820
#, no-wrap
msgid "  These are no longer reported with negative values on the agenda\n"
msgstr ""

#. type: Bullet: '- '
#: org-mode.org:2823
msgid ""
"Add a blank line after my inactive timestamps following headings to prevent "
"them from being exported."
msgstr ""

#. type: Plain text
#: org-mode.org:2828
#, no-wrap
msgid ""
"** Org-babel Setup\n"
":PROPERTIES:\n"
":CUSTOM_ID: OrgBabel\n"
":END:\n"
msgstr ""

#. type: Plain text
#: org-mode.org:2831
msgid ""
"Org-babel makes it easy to generate decent graphics using external packages "
"like ditaa, graphviz, PlantUML, and others."
msgstr ""

#. type: Plain text
#: org-mode.org:2835
msgid ""
"The setup is really easy.  =ditaa= is provided with the org-mode source.  "
"You'll have to install the =graphviz= and =PlantUML= packages on your "
"system."
msgstr ""

#. type: Plain text
#: org-mode.org:2840
msgid ""
"#+header: :tangle yes #+begin_src emacs-lisp (setq org-ditaa-jar-path "
"\"~/java/ditaa0_6b.jar\")  (setq org-plantuml-jar-path "
"\"~/java/plantuml.jar\")"
msgstr ""

#. type: Plain text
#: org-mode.org:2842
msgid "(add-hook 'org-babel-after-execute-hook 'bh/display-inline-images 'append)"
msgstr ""

#. type: Plain text
#: org-mode.org:2845
msgid ""
"; Make babel results blocks lowercase (setq org-babel-results-keyword "
"\"results\")"
msgstr ""

#. type: Plain text
#: org-mode.org:2850
#, no-wrap
msgid ""
"(defun bh/display-inline-images ()\n"
"  (condition-case nil\n"
"      (org-display-inline-images)\n"
"    (error nil)))\n"
msgstr ""

#. type: Plain text
#: org-mode.org:2866
#, no-wrap
msgid ""
"(org-babel-do-load-languages\n"
" (quote org-babel-load-languages)\n"
" (quote ((emacs-lisp . t)\n"
"         (dot . t)\n"
"         (ditaa . t)\n"
"         (R . t)\n"
"         (python . t)\n"
"         (ruby . t)\n"
"         (gnuplot . t)\n"
"         (clojure . t)\n"
"         (sh . t)\n"
"         (ledger . t)\n"
"         (org . t)\n"
"         (plantuml . t)\n"
"         (latex . t))))\n"
msgstr ""

#. type: Plain text
#: org-mode.org:2871
msgid ""
"; Do not prompt to confirm evaluation ; This may be dangerous - make sure "
"you understand the consequences ; of setting this -- see the docstring for "
"details (setq org-confirm-babel-evaluate nil)"
msgstr ""

#. type: Plain text
#: org-mode.org:2875
msgid ""
"; Use fundamental mode when editing plantuml blocks with C-c ' (add-to-list "
"'org-src-lang-modes (quote (\"plantuml\" . fundamental)))  #+end_src"
msgstr ""

#. type: Plain text
#: org-mode.org:2880
msgid ""
"Now you just create a =begin-src= block for the appropriate tool, edit the "
"text, and build the pictures with =C-c C-c=.  After evaluating the block "
"results are displayed.  You can toggle display of inline images with =C-c "
"C-x C-v="
msgstr ""

#. type: Plain text
#: org-mode.org:2887
msgid ""
"I disable startup with inline images because when I access my org-files from "
"an SSH session without X this breaks (say from my Android phone) it fails "
"when trying to display the images on a non-X session.  It's much more "
"important for me to be able to access my org files from my Android phone "
"remotely than it is to see images on startup."
msgstr ""

#. type: Plain text
#: org-mode.org:2897
msgid ""
"#+header: :tangle yes #+begin_src emacs-lisp ;; Don't enable this because it "
"breaks access to emacs from my Android phone (setq "
"org-startup-with-inline-images nil)  #+end_src ** Playing with ditaa "
":PROPERTIES: :CUSTOM_ID: playingwithditaa :END:"
msgstr ""

#. type: Plain text
#: org-mode.org:2902
msgid ""
"[[http://ditaa.sourceforge.net/][ditaa]] is a great tool for quickly "
"generating graphics to convey ideas and =ditaa= is distributed with "
"org-mode! All of the graphics in this document are automatically generated "
"by org-mode using plain text source."
msgstr ""

#. type: Plain text
#: org-mode.org:2905
msgid "Artist mode makes it easy to create boxes and lines for ditaa graphics."
msgstr ""

#. type: Plain text
#: org-mode.org:2913
#, no-wrap
msgid ""
"The source for a ditaa graphic looks like this in org-mode:\n"
"#+begin_src org :exports src\n"
",#+begin_src ditaa :file some_filename.png :cmdline -r -s 0.8\n"
"  <context of ditaa source goes here>\n"
",#+end_src\n"
"#+end_src\n"
"Here's an example without the =#+begin_src= and =#+end_src= lines.\n"
msgstr ""

#. type: Plain text
#: org-mode.org:2940
#, no-wrap
msgid ""
"#+begin_src ditaa :file communication.png :cmdline -r -s 0.8 :exports both "
":cache yes\n"
"    +-----------+        +---------+  \n"
"    |    PLC    |        |         |                \n"
"    |  Network  +<------>+   PLC   +<---=---------+ \n"
"    |    cRED   |        |  c707   |              | \n"
"    +-----------+        +----+----+              | \n"
"                              ^                   | \n"
"                              |                   | \n"
"                              |  +----------------|-----------------+\n"
"                              |  |                |                 |\n"
"                              v  v                v                 v\n"
"      +----------+       +----+--+--+      +-------+---+      +-----+-----+       "
"Windows clients\n"
"      |          |       |          |      |           |      |           |      "
"+----+      +----+\n"
"      | Database +<----->+  Shared  +<---->+ Executive +<-=-->+ Operator  "
"+<---->|cYEL| . . .|cYEL|\n"
"      |   c707   |       |  Memory  |      |   c707    |      | Server    |      "
"|    |      |    |\n"
"      +--+----+--+       |{d} cGRE  |      +------+----+      |   c707    |      "
"+----+      +----+\n"
"         ^    ^          +----------+             ^           "
"+-------+---+\n"
"         |    |                                   |                        "
"\n"
"         |    +--------=--------------------------+                    \n"
"         v                                                             \n"
"+--------+--------+                                                         "
"\n"
"|                 |                                                         "
"\n"
"| Millwide System |            -------- Data ---------                      "
"\n"
"| cBLU            |            --=----- Signals ---=--                      "
"\n"
"+-----------------+                                                         "
"\n"
"#+end_src\n"
msgstr ""

#. type: Plain text
#: org-mode.org:2943
msgid ""
"#+results[57642756cd4e509e2a4f67c40a5147ecb935933e]: "
"[[file:communication.png]]"
msgstr ""

#. type: Plain text
#: org-mode.org:2948
#, no-wrap
msgid ""
"** Playing with graphviz\n"
":PROPERTIES:\n"
":CUSTOM_ID: Graphviz\n"
":END:\n"
msgstr ""

#. type: Plain text
#: org-mode.org:2950
msgid ""
"[[http://www.graphviz.org/][Graphviz]] is another great tool for creating "
"graphics in your documents."
msgstr ""

#. type: Plain text
#: org-mode.org:2957
#, no-wrap
msgid ""
"The source for a graphviz graphic looks like this in org-mode:\n"
"#+begin_src org :exports src\n"
",#+begin_src dot :file some_filename.png :cmdline -Kdot -Tpng\n"
"  <context of graphviz source goes here>\n"
",#+end_src\n"
"#+end_src\n"
msgstr ""

#. type: Plain text
#: org-mode.org:2985
#, no-wrap
msgid ""
"#+begin_src dot :file gv01.png :cmdline -Kdot -Tpng :exports both :cache "
"yes\n"
"digraph G {\n"
"  size=\"8,6\"\n"
"  ratio=expand\n"
"  edge [dir=both]\n"
"  plcnet [shape=box, label=\"PLC Network\"]\n"
"  subgraph cluster_wrapline {\n"
"    label=\"Wrapline Control System\"\n"
"    color=purple\n"
"    subgraph {\n"
"    rank=same\n"
"    exec\n"
"    sharedmem [style=filled, fillcolor=lightgrey, shape=box]\n"
"    }\n"
"    edge[style=dotted, dir=none]\n"
"    exec -> opserver\n"
"    exec -> db\n"
"    plc -> exec\n"
"    edge [style=line, dir=both]\n"
"    exec -> sharedmem\n"
"    sharedmem -> db\n"
"    plc -> sharedmem\n"
"    sharedmem -> opserver\n"
"  }\n"
"  plcnet -> plc [constraint=false]\n"
"  millwide [shape=box, label=\"Millwide System\"]\n"
"  db -> millwide\n"
msgstr ""

#. type: Plain text
#: org-mode.org:2998
#, no-wrap
msgid ""
"  subgraph cluster_opclients {\n"
"    color=blue\n"
"    label=\"Operator Clients\"\n"
"    rankdir=LR\n"
"    labelloc=b\n"
"    node[label=client]\n"
"    opserver -> client1\n"
"    opserver -> client2\n"
"    opserver -> client3\n"
"  }\n"
"}\n"
"#+end_src\n"
msgstr ""

#. type: Plain text
#: org-mode.org:3001
msgid "#+results[4bf665d19d319ee40e628cfc80170af69cfb776f]: [[file:gv01.png]]"
msgstr ""

#. type: Plain text
#: org-mode.org:3008
msgid ""
"The =-Kdot= is optional (defaults to =dot=) but you can substitute other "
"graphviz types instead here (ie. =twopi=, =neato=, =circo=, etc).  ** "
"Playing with PlantUML :PROPERTIES: :CUSTOM_ID: PlantUML :END:"
msgstr ""

#. type: Plain text
#: org-mode.org:3012
msgid ""
"I have just started using [[http://plantuml.sourceforge.net/][PlantUML]] "
"which is built on top of [[http://www.graphviz.org/][Graphviz]].  I'm still "
"experimenting with this but so far I like it a lot.  The todo state change "
"diagrams in this document are created with PlantUML."
msgstr ""

#. type: Plain text
#: org-mode.org:3024
#, no-wrap
msgid ""
"The source for a PlantUML graphic looks like this in org-mode:\n"
"#+begin_src org :exports src\n"
",#+begin_src plantuml :file somefile.png\n"
"  <context of PlantUML source goes here>\n"
",#+end_src\n"
"#+end_src\n"
"*** Sequence Diagram\n"
":PROPERTIES:\n"
":CUSTOM_ID: PlantUMLSequence\n"
":END:\n"
"[2011-04-29 Fri 19:03]\n"
msgstr ""

#. type: Plain text
#: org-mode.org:3041
msgid ""
"#+begin_src plantuml :file sequence.png :exports both :cache yes title "
"Example Sequence Diagram activate Client Client -> Server: Session "
"Initiation note right: Client requests new session activate Server Client "
"<-- Server: Authorization Request note left: Server requires authentication "
"Client -> Server: Authorization Response note right: Client provides "
"authentication details Server --> Client: Session Token note left: Session "
"established deactivate Server Client -> Client: Saves token deactivate "
"Client #+end_src"
msgstr ""

#. type: Plain text
#: org-mode.org:3044
msgid "#+results[6aff72a7a7c6801812c59c389114f65d462a61a0]: [[file:sequence.png]]"
msgstr ""

#. type: Plain text
#: org-mode.org:3050
#, no-wrap
msgid ""
"*** Activity Diagram\n"
":PROPERTIES:\n"
":CUSTOM_ID: PlantUMLActivity\n"
":END:\n"
"[2011-09-10 Sat 08:36]\n"
msgstr ""

#. type: Plain text
#: org-mode.org:3072
#, no-wrap
msgid ""
"#+begin_src plantuml :file activity.png :exports both :cache yes\n"
"title Example Activity Diagram\n"
"note right: Example Function\n"
"(*)--> \"Step 1\"\n"
"--> \"Step 2\"\n"
"-> \"Step 3\"\n"
"--> \"Step 4\"\n"
"--> === STARTLOOP ===\n"
"note top: For each element in the array\n"
"if \"Are we done?\" then\n"
"  -> [no] \"Do this\"\n"
"  -> \"Do that\"\n"
"  note bottom: Important note\\ngoes here\n"
"  -up-> \"Increment counters\"\n"
"  --> === STARTLOOP ===\n"
"else\n"
"  --> [yes] === ENDLOOP ===\n"
"endif\n"
"--> \"Last Step\"\n"
"--> (*)\n"
"#+end_src\n"
msgstr ""

#. type: Plain text
#: org-mode.org:3075
msgid "#+results[1a0bdaefe8858ab0a55252b9c57fc16f57e27ea5]: [[file:activity.png]]"
msgstr ""

#. type: Plain text
#: org-mode.org:3080
#, no-wrap
msgid ""
"*** Usecase Diagram\n"
":PROPERTIES:\n"
":CUSTOM_ID: PlantUMLUseCase\n"
":END:\n"
msgstr ""

#. type: Plain text
#: org-mode.org:3085
msgid ""
"#+begin_src plantuml :file usecase.png :exports both :cache yes LabUser --> "
"(Runs Simulation)  LabUser --> (Analyses Results)  #+end_src"
msgstr ""

#. type: Plain text
#: org-mode.org:3088
msgid "#+results[14e8911f8940efbc6b90b57dcfa4eecce4a31d9f]: [[file:usecase.png]]"
msgstr ""

#. type: Plain text
#: org-mode.org:3093
#, no-wrap
msgid ""
"*** Object Diagram\n"
":PROPERTIES:\n"
":CUSTOM_ID: PlantUMLObject\n"
":END:\n"
msgstr ""

#. type: Plain text
#: org-mode.org:3102
msgid ""
"#+begin_src plantuml :file object.png :exports both :cache yes Object1 <|-- "
"Object2 Object1: someVar Object1: execute()  Object2: getState()  Object2: "
"setState()  Object2: state #+end_src"
msgstr ""

#. type: Plain text
#: org-mode.org:3105
msgid "#+results[43eece3c12be40bac32cf12898e47d66ec1251da]: [[file:object.png]]"
msgstr ""

#. type: Plain text
#: org-mode.org:3110
#, no-wrap
msgid ""
"*** State Diagram\n"
":PROPERTIES:\n"
":CUSTOM_ID: PlantUMLState\n"
":END:\n"
msgstr ""

#. type: Plain text
#: org-mode.org:3121
msgid ""
"#+begin_src plantuml :file plantuml_example_states.png :exports both :cache "
"yes [*] --> Start Start -> State2 State2 -> State3 note right of State3: "
"Notes can be\\nattached to states State2 --> State4 State4 -> Finish State3 "
"--> Finish Finish --> [*] #+end_src"
msgstr ""

#. type: Plain text
#: org-mode.org:3124
msgid ""
"#+results[d349aa79d785fec37ad60b1bcf43ced6df10aeb6]: "
"[[file:plantuml_example_states.png]]"
msgstr ""

#. type: Plain text
#: org-mode.org:3129
#, no-wrap
msgid ""
"** Publishing Single Files\n"
":PROPERTIES:\n"
":CUSTOM_ID: PublishingSingleFiles\n"
":END:\n"
msgstr ""

#. type: Plain text
#: org-mode.org:3133
msgid ""
"Org-mode exports the current file to one of the standard formats by invoking "
"an export function.  The standard key binding for this is =C-c C-e= followed "
"by the key for the type of export you want."
msgstr ""

#. type: Plain text
#: org-mode.org:3141
msgid ""
"This works great for single files or parts of files -- if you narrow the "
"buffer to only part of the org-mode file then you only get the narrowed "
"detail in the export.  ** Publishing Projects :PROPERTIES: :CUSTOM_ID: "
"PublishingProjects :END:"
msgstr ""

#. type: Plain text
#: org-mode.org:3145
msgid ""
"I mainly use publishing for publishing multiple files or projects.  I don't "
"want to remember where the created export file needs to move to and org-mode "
"projects are a great solution to this."
msgstr ""

#. type: Plain text
#: org-mode.org:3151
msgid ""
"The [[http://doc.norang.ca]] website (and a bunch of other files that are "
"not publicly available) are all created by editing org-mode files and "
"publishing the project the file is contained in.  This is great for people "
"like me who want to figure out the details once and forget about it.  I love "
"stuff that Just Works(tm)."
msgstr ""

#. type: Plain text
#: org-mode.org:3153
msgid "I have 5 main projects I use org-mode publishing for currently:"
msgstr ""

#. type: Plain text
#: org-mode.org:3159
msgid ""
"- norang (website)  - doc.norang.ca (website, published documents)  - "
"doc.norang.ca/private (website, non-published documents)  - "
"www.norang.ca/tmp (temporary publishing site for testing org-mode stuff)  - "
"org files (which are selectively included by other websites)"
msgstr ""

#. type: Plain text
#: org-mode.org:3161
msgid "Here's my publishing setup:"
msgstr ""

#. type: Plain text
#: org-mode.org:3181
msgid ""
"#+header: :tangle yes #+begin_src emacs-lisp ; experimenting with docbook "
"exports - not finished (setq org-export-docbook-xsl-fo-proc-command \"fop %s "
"%s\")  (setq org-export-docbook-xslt-proc-command \"xsltproc --output %s "
"/usr/share/xml/docbook/stylesheet/nwalsh/fo/docbook.xsl %s\")  ; ; Inline "
"images in HTML instead of producting links to the image (setq "
"org-html-inline-images t)  ; Do not use sub or superscripts - I currently "
"don't need this functionality in my documents (setq "
"org-export-with-sub-superscripts nil)  ; Use org.css from the norang website "
"for export document stylesheets (setq org-html-head-extra \"<link "
"rel=\\\"stylesheet\\\" href=\\\"http://doc.norang.ca/org.css\\\" "
"type=\\\"text/css\\\" />\")  (setq org-html-head-include-default-style nil)  "
"; Do not generate internal css formatting for HTML exports (setq "
"org-export-htmlize-output-type (quote css))  ; Export with LaTeX fragments "
"(setq org-export-with-LaTeX-fragments t)  ; Increase default number of "
"headings to export (setq org-export-headline-levels 6)"
msgstr ""

#. type: Plain text
#: org-mode.org:3343
#, no-wrap
msgid ""
"; List of projects\n"
"; norang       - http://www.norang.ca/\n"
"; doc          - http://doc.norang.ca/\n"
"; org-mode-doc - http://doc.norang.ca/org-mode.html and associated files\n"
"; org          - miscellaneous todo lists for publishing\n"
"(setq org-publish-project-alist\n"
"      ;\n"
"      ; http://www.norang.ca/  (norang website)\n"
"      ; norang-org are the org-files that generate the content\n"
"      ; norang-extra are images and css files that need to be included\n"
"      ; norang is the top-level project that gets published\n"
"      (quote ((\"norang-org\"\n"
"               :base-directory \"~/git/www.norang.ca\"\n"
"               :publishing-directory "
"\"/ssh:www-data@www:~/www.norang.ca/htdocs\"\n"
"               :recursive t\n"
"               :table-of-contents nil\n"
"               :base-extension \"org\"\n"
"               :publishing-function org-html-publish-to-html\n"
"               :style-include-default nil\n"
"               :section-numbers nil\n"
"               :table-of-contents nil\n"
"               :html-head \"<link rel=\\\"stylesheet\\\" "
"href=\\\"norang.css\\\" type=\\\"text/css\\\" />\"\n"
"               :author-info nil\n"
"               :creator-info nil)\n"
"              (\"norang-extra\"\n"
"               :base-directory \"~/git/www.norang.ca/\"\n"
"               :publishing-directory "
"\"/ssh:www-data@www:~/www.norang.ca/htdocs\"\n"
"               :base-extension \"css\\\\|pdf\\\\|png\\\\|jpg\\\\|gif\"\n"
"               :publishing-function org-publish-attachment\n"
"               :recursive t\n"
"               :author nil)\n"
"              (\"norang\"\n"
"               :components (\"norang-org\" \"norang-extra\"))\n"
"              ;\n"
"              ; http://doc.norang.ca/  (norang website)\n"
"              ; doc-org are the org-files that generate the content\n"
"              ; doc-extra are images and css files that need to be "
"included\n"
"              ; doc is the top-level project that gets published\n"
"              (\"doc-org\"\n"
"               :base-directory \"~/git/doc.norang.ca/\"\n"
"               :publishing-directory "
"\"/ssh:www-data@www:~/doc.norang.ca/htdocs\"\n"
"               :recursive nil\n"
"               :section-numbers nil\n"
"               :table-of-contents nil\n"
"               :base-extension \"org\"\n"
"               :publishing-function (org-html-publish-to-html "
"org-org-publish-to-org)\n"
"               :style-include-default nil\n"
"               :html-head \"<link rel=\\\"stylesheet\\\" "
"href=\\\"/org.css\\\" type=\\\"text/css\\\" />\"\n"
"               :author-info nil\n"
"               :creator-info nil)\n"
"              (\"doc-extra\"\n"
"               :base-directory \"~/git/doc.norang.ca/\"\n"
"               :publishing-directory "
"\"/ssh:www-data@www:~/doc.norang.ca/htdocs\"\n"
"               :base-extension \"css\\\\|pdf\\\\|png\\\\|jpg\\\\|gif\"\n"
"               :publishing-function org-publish-attachment\n"
"               :recursive nil\n"
"               :author nil)\n"
"              (\"doc\"\n"
"               :components (\"doc-org\" \"doc-extra\"))\n"
"              (\"doc-private-org\"\n"
"               :base-directory \"~/git/doc.norang.ca/private\"\n"
"               :publishing-directory "
"\"/ssh:www-data@www:~/doc.norang.ca/htdocs/private\"\n"
"               :recursive nil\n"
"               :section-numbers nil\n"
"               :table-of-contents nil\n"
"               :base-extension \"org\"\n"
"               :publishing-function (org-html-publish-to-html "
"org-org-publish-to-org)\n"
"               :style-include-default nil\n"
"               :html-head \"<link rel=\\\"stylesheet\\\" "
"href=\\\"/org.css\\\" type=\\\"text/css\\\" />\"\n"
"               :auto-sitemap t\n"
"               :sitemap-filename \"index.html\"\n"
"               :sitemap-title \"Norang Private Documents\"\n"
"               :sitemap-style \"tree\"\n"
"               :author-info nil\n"
"               :creator-info nil)\n"
"              (\"doc-private-extra\"\n"
"               :base-directory \"~/git/doc.norang.ca/private\"\n"
"               :publishing-directory "
"\"/ssh:www-data@www:~/doc.norang.ca/htdocs/private\"\n"
"               :base-extension \"css\\\\|pdf\\\\|png\\\\|jpg\\\\|gif\"\n"
"               :publishing-function org-publish-attachment\n"
"               :recursive nil\n"
"               :author nil)\n"
"              (\"doc-private\"\n"
"               :components (\"doc-private-org\" \"doc-private-extra\"))\n"
"              ;\n"
"              ; Miscellaneous pages for other websites\n"
"              ; org are the org-files that generate the content\n"
"              (\"org-org\"\n"
"               :base-directory \"~/git/org/\"\n"
"               :publishing-directory \"/ssh:www-data@www:~/org\"\n"
"               :recursive t\n"
"               :section-numbers nil\n"
"               :table-of-contents nil\n"
"               :base-extension \"org\"\n"
"               :publishing-function org-html-publish-to-html\n"
"               :style-include-default nil\n"
"               :html-head \"<link rel=\\\"stylesheet\\\" "
"href=\\\"/org.css\\\" type=\\\"text/css\\\" />\"\n"
"               :author-info nil\n"
"               :creator-info nil)\n"
"              ;\n"
"              ; http://doc.norang.ca/  (norang website)\n"
"              ; org-mode-doc-org this document\n"
"              ; org-mode-doc-extra are images and css files that need to be "
"included\n"
"              ; org-mode-doc is the top-level project that gets published\n"
"              ; This uses the same target directory as the 'doc' project\n"
"              (\"org-mode-doc-org\"\n"
"               :base-directory \"~/git/org-mode-doc/\"\n"
"               :publishing-directory "
"\"/ssh:www-data@www:~/doc.norang.ca/htdocs\"\n"
"               :recursive t\n"
"               :section-numbers nil\n"
"               :table-of-contents nil\n"
"               :base-extension \"org\"\n"
"               :publishing-function (org-html-publish-to-html)\n"
"               :plain-source t\n"
"               :htmlized-source t\n"
"               :style-include-default nil\n"
"               :html-head \"<link rel=\\\"stylesheet\\\" "
"href=\\\"/org.css\\\" type=\\\"text/css\\\" />\"\n"
"               :author-info nil\n"
"               :creator-info nil)\n"
"              (\"org-mode-doc-extra\"\n"
"               :base-directory \"~/git/org-mode-doc/\"\n"
"               :publishing-directory "
"\"/ssh:www-data@www:~/doc.norang.ca/htdocs\"\n"
"               :base-extension "
"\"css\\\\|pdf\\\\|png\\\\|jpg\\\\|gif\\\\|org\"\n"
"               :publishing-function org-publish-attachment\n"
"               :recursive t\n"
"               :author nil)\n"
"              (\"org-mode-doc\"\n"
"               :components (\"org-mode-doc-org\" \"org-mode-doc-extra\"))\n"
"              ;\n"
"              ; http://doc.norang.ca/  (norang website)\n"
"              ; org-mode-doc-org this document\n"
"              ; org-mode-doc-extra are images and css files that need to be "
"included\n"
"              ; org-mode-doc is the top-level project that gets published\n"
"              ; This uses the same target directory as the 'doc' project\n"
"              (\"tmp-org\"\n"
"               :base-directory \"/tmp/publish/\"\n"
"               :publishing-directory "
"\"/ssh:www-data@www:~/www.norang.ca/htdocs/tmp\"\n"
"               :recursive t\n"
"               :section-numbers nil\n"
"               :table-of-contents nil\n"
"               :base-extension \"org\"\n"
"               :publishing-function (org-html-publish-to-html "
"org-org-publish-to-org)\n"
"               :html-head \"<link rel=\\\"stylesheet\\\" "
"href=\\\"http://doc.norang.ca/org.css\\\" type=\\\"text/css\\\" />\"\n"
"               :plain-source t\n"
"               :htmlized-source t\n"
"               :style-include-default nil\n"
"               :auto-sitemap t\n"
"               :sitemap-filename \"index.html\"\n"
"               :sitemap-title \"Test Publishing Area\"\n"
"               :sitemap-style \"tree\"\n"
"               :author-info t\n"
"               :creator-info t)\n"
"              (\"tmp-extra\"\n"
"               :base-directory \"/tmp/publish/\"\n"
"               :publishing-directory "
"\"/ssh:www-data@www:~/www.norang.ca/htdocs/tmp\"\n"
"               :base-extension \"css\\\\|pdf\\\\|png\\\\|jpg\\\\|gif\"\n"
"               :publishing-function org-publish-attachment\n"
"               :recursive t\n"
"               :author nil)\n"
"              (\"tmp\"\n"
"               :components (\"tmp-org\" \"tmp-extra\")))))\n"
msgstr ""

#. type: Plain text
#: org-mode.org:3356
#, no-wrap
msgid ""
"; I'm lazy and don't want to remember the name of the project to publish "
"when I modify\n"
"; a file that is part of a project.  So this function saves the file, and "
"publishes\n"
"; the project that includes this file\n"
";\n"
"; It's bound to C-S-F12 so I just edit and hit C-S-F12 when I'm done and "
"move on to the next thing\n"
"(defun bh/save-then-publish (&optional force)\n"
"  (interactive \"P\")\n"
"  (save-buffer)\n"
"  (org-save-all-org-buffers)\n"
"  (let ((org-html-head-extra)\n"
"        (org-html-validation-link \"<a "
"href=\\\"http://validator.w3.org/check?uri=referer\\\">Validate XHTML "
"1.0</a>\"))\n"
"    (org-publish-current-project force)))\n"
msgstr ""

#. type: Plain text
#: org-mode.org:3359
msgid "(global-set-key (kbd \"C-s-<f12>\") 'bh/save-then-publish)  #+end_src"
msgstr ""

#. type: Plain text
#: org-mode.org:3366
msgid ""
"The main projects are =norang=, =doc=, =doc-private=, =org-mode-doc=, and "
"=tmp=.  These projects publish directly to the webserver directory on a "
"remote web server that serves the site.  Publishing one of these projects "
"exports all modified pages, generates images, and copies the resulting files "
"to the webserver so that they are immediately available for viewing."
msgstr ""

#. type: Plain text
#: org-mode.org:3375
msgid ""
"The http://doc.norang.ca/ site contains subdirectories with client and "
"private documentation that are restricted by using Apache Basic "
"authentication.  I don't create links to these sites from the publicly "
"viewable pages.  http://doc.norang.ca/someclient/ would show the index for "
"any org files under =~/git/doc.norang.ca/someclient/= if that is set up as a "
"viewable website.  I use most of the information myself but give access to "
"clients if they are interested in the information/notes that I keep about "
"their systems."
msgstr ""

#. type: Plain text
#: org-mode.org:3379
msgid ""
"This works great for me - I know where my notes are and I can access them "
"from anywhere on the internet.  I'm also free to share notes with other "
"people by simply giving them the link to the appropriate site."
msgstr ""

#. type: Plain text
#: org-mode.org:3382
msgid ""
"All I need to remember to do is edit the appropriate org file and publish it "
"with C-S-F12 -- not exactly hard :)"
msgstr ""

#. type: Plain text
#: org-mode.org:3392
msgid ""
"I added a temporary publishing site for testing exports and validation.  "
"This is the =tmp= site which takes files from =/tmp/publish= and exports "
"those files to a website publishing directory.  This makes it easy to try "
"new throw-away things on a live server.  ** Miscellaneous Export Settings "
":PROPERTIES: :CUSTOM_ID: MiscBabelExportSettings :END:"
msgstr ""

#. type: Plain text
#: org-mode.org:3399
msgid ""
"This is a collection of export and publishing related settings that I use.  "
"*** Fontify Latex listings for source blocks :PROPERTIES: :CUSTOM_ID: "
"FontifyLatexListings :END:"
msgstr ""

#. type: Plain text
#: org-mode.org:3402
msgid ""
"For export to latex I use the following setting to get fontified listings "
"from source blocks:"
msgstr ""

#. type: Plain text
#: org-mode.org:3411
msgid ""
"#+header: :tangle yes #+begin_src emacs-lisp (setq org-latex-listings t)  "
"#+end_src *** Export HTML without XML header :PROPERTIES: :CUSTOM_ID: "
"ExportHTMLWithoutXMLHeader :END:"
msgstr ""

#. type: Plain text
#: org-mode.org:3415
msgid ""
"I use the following setting to remove the xml header line for HTML exports.  "
"This xml line was confusing Open Office when opening the HTML to convert to "
"ODT."
msgstr ""

#. type: Plain text
#: org-mode.org:3426
#, no-wrap
msgid ""
"#+header: :tangle yes\n"
"#+begin_src emacs-lisp\n"
"(setq org-html-xml-declaration (quote ((\"html\" . \"\")\n"
"                                       (\"was-html\" . \"<?xml "
"version=\\\"1.0\\\" encoding=\\\"%s\\\"?>\")\n"
"                                       (\"php\" . \"<?php echo \\\"<?xml "
"version=\\\\\\\"1.0\\\\\\\" encoding=\\\\\\\"%s\\\\\\\" ?>\\\"; ?>\"))))\n"
"#+end_src\n"
"*** Allow binding variables on export without confirmation\n"
":PROPERTIES:\n"
":CUSTOM_ID: AllowVariableBindingForExport\n"
":END:\n"
msgstr ""

#. type: Plain text
#: org-mode.org:3431
msgid ""
"The following setting allows #+BIND: variables to be set on export without "
"confirmation.  In rare situations where I want to override some org-mode "
"variable for export this allows exporting the document without a prompt."
msgstr ""

#. type: Plain text
#: org-mode.org:3440
msgid ""
"#+header: :tangle yes #+begin_src emacs-lisp (setq org-export-allow-BIND t)  "
"#+end_src * Reminders :PROPERTIES: :CUSTOM_ID: Reminders :END:"
msgstr ""

#. type: Plain text
#: org-mode.org:3444
msgid ""
"I use appt for reminders.  It's simple and unobtrusive -- putting pending "
"appointments in the status bar and beeping as 12, 9, 6, 3, and 0 minutes "
"before the appointment is due."
msgstr ""

#. type: Plain text
#: org-mode.org:3454
msgid ""
"Everytime the agenda is displayed (and that's lots for me) the appointment "
"list is erased and rebuilt from the current agenda details for today.  This "
"means everytime I reschedule something, add or remove tasks that are time "
"related the appointment list is automatically updated the next time I look "
"at the agenda.  ** Reminder Setup :PROPERTIES: :CUSTOM_ID: ReminderSetup "
":END:"
msgstr ""

#. type: Plain text
#: org-mode.org:3462
#, no-wrap
msgid ""
"#+header: :tangle yes\n"
"#+begin_src emacs-lisp\n"
"; Erase all reminders and rebuilt reminders for today from the agenda\n"
"(defun bh/org-agenda-to-appt ()\n"
"  (interactive)\n"
"  (setq appt-time-msg-list nil)\n"
"  (org-agenda-to-appt))\n"
msgstr ""

#. type: Plain text
#: org-mode.org:3465
msgid ""
"; Rebuild the reminders everytime the agenda is displayed (add-hook "
"'org-finalize-agenda-hook 'bh/org-agenda-to-appt 'append)"
msgstr ""

#. type: Plain text
#: org-mode.org:3468
msgid ""
"; This is at the end of my .emacs - so appointments are set up when Emacs "
"starts (bh/org-agenda-to-appt)"
msgstr ""

#. type: Plain text
#: org-mode.org:3471
msgid "; Activate appointments so we get notifications (appt-activate t)"
msgstr ""

#. type: Plain text
#: org-mode.org:3480
msgid ""
"; If we leave Emacs running overnight - reset the appointments one minute "
"after midnight (run-at-time \"24:01\" nil 'bh/org-agenda-to-appt)  #+end_src "
"* Productivity Tools :PROPERTIES: :CUSTOM_ID: ProductivityTools :NOBLOCKING: "
"t :END:"
msgstr ""

#. type: Plain text
#: org-mode.org:3488
msgid ""
"This section is a miscellaneous collection of Emacs customizations that I "
"use with org-mode so that it Works-For-Me(tm).  ** Abbrev-mode and Skeletons "
":PROPERTIES: :CUSTOM_ID: AbbrevMode :END: [2011-09-26 Mon 05:44]"
msgstr ""

#. type: Plain text
#: org-mode.org:3491
msgid ""
"I use skeletons with abbrev-mode to quickly add preconfigured blocks to my "
"Emacs edit buffers."
msgstr ""

#. type: Plain text
#: org-mode.org:3493
msgid "I have blocks for creating:"
msgstr ""

#. type: Bullet: '  - '
#: org-mode.org:3501
msgid "generic blocks in org-mode"
msgstr ""

#. type: Plain text
#: org-mode.org:3501
#, no-wrap
msgid ""
"  - plantuml blocks in org-mode\n"
"    - plantuml activity diagram block in org-mode\n"
"    - plantuml sequence diagram block in org-mode\n"
"  - graphviz dot blocks in org-mode\n"
"  - ditaa blocks in org-mode\n"
"  - elisp source blocks in org-mode\n"
msgstr ""

#. type: Plain text
#: org-mode.org:3504
msgid ""
"I still use =< e TAB= and =< s TAB= for creating example blocks and simple "
"shell script blocks that need no further parameters."
msgstr ""

#. type: Plain text
#: org-mode.org:3509
msgid ""
"Here's my current setup for org-mode related skeletons.  Each one defines an "
"abbrev-mode shortcut so I can type =splantumlRET= to create a Plantuml "
"block. This prompts for the filename (without extension) for the generated "
"image file."
msgstr ""

#. type: Plain text
#: org-mode.org:3515
msgid ""
"At work I add a =:tangle= header to the skeleton and explicitly include the "
"=@startuml= and =@enduml= marker lines in the skeleton so I can tangle the "
"source file and share it with my colleagues.  This makes the tangled source "
"useable in Notepad and the =PlantUML= jar file running standalone."
msgstr ""

#. type: Plain text
#: org-mode.org:3519
msgid ""
"I have put the =s= (src) prefix on the shortcuts to prevent abbrev-mode from "
"trying to expand =PlantUML= when I'm typing it in a sentence."
msgstr ""

#. type: Plain text
#: org-mode.org:3522
msgid ""
"For convenience in activity diagrams I added =sif= and =sfor= and just "
"change the labels for the synchronization bars."
msgstr ""

#. type: Plain text
#: org-mode.org:3528
msgid ""
"#+header: :tangle yes #+begin_src emacs-lisp ;; Enable abbrev-mode (add-hook "
"'org-mode-hook (lambda () (abbrev-mode 1)))"
msgstr ""

#. type: Plain text
#: org-mode.org:3538
#, no-wrap
msgid ""
";; Skeletons\n"
";;\n"
";; sblk - Generic block #+begin_FOO .. #+end_FOO\n"
"(define-skeleton skel-org-block\n"
"  \"Insert an org block, querying for type.\"\n"
"  \"Type: \"\n"
"  \"#+begin_\" str \"\\n\"\n"
"  _ - \\n\n"
"  \"#+end_\" str \"\\n\")\n"
msgstr ""

#. type: Plain text
#: org-mode.org:3540
msgid "(define-abbrev org-mode-abbrev-table \"sblk\" \"\" 'skel-org-block)"
msgstr ""

#. type: Plain text
#: org-mode.org:3548
#, no-wrap
msgid ""
";; splantuml - PlantUML Source block\n"
"(define-skeleton skel-org-block-plantuml\n"
"  \"Insert a org plantuml block, querying for filename.\"\n"
"  \"File (no extension): \"\n"
"  \"#+begin_src plantuml :file \" str \".png :cache yes\\n\"\n"
"  _ - \\n\n"
"  \"#+end_src\\n\")\n"
msgstr ""

#. type: Plain text
#: org-mode.org:3550
msgid ""
"(define-abbrev org-mode-abbrev-table \"splantuml\" \"\" "
"'skel-org-block-plantuml)"
msgstr ""

#. type: Plain text
#: org-mode.org:3567
#, no-wrap
msgid ""
"(define-skeleton skel-org-block-plantuml-activity\n"
"  \"Insert a org plantuml block, querying for filename.\"\n"
"  \"File (no extension): \"\n"
"  \"#+begin_src plantuml :file \" str \"-act.png :cache yes :tangle \" str "
"\"-act.txt\\n\"\n"
"  (bh/plantuml-reset-counters)\n"
"  \"@startuml\\n\"\n"
"  \"skinparam activity {\\n\"\n"
"  \"BackgroundColor<<New>> Cyan\\n\"\n"
"  \"}\\n\\n\"\n"
"  \"title \" str \" - \\n\"\n"
"  \"note left: \" str \"\\n\"\n"
"  \"(*) --> \\\"\" str \"\\\"\\n\"\n"
"  \"--> (*)\\n\"\n"
"  _ - \\n\n"
"  \"@enduml\\n\"\n"
"  \"#+end_src\\n\")\n"
msgstr ""

#. type: Plain text
#: org-mode.org:3569
msgid "(defvar bh/plantuml-if-count 0)"
msgstr ""

#. type: Plain text
#: org-mode.org:3573
#, no-wrap
msgid ""
"(defun bh/plantuml-if () \n"
"  (incf bh/plantuml-if-count)\n"
"  (number-to-string bh/plantuml-if-count))\n"
msgstr ""

#. type: Plain text
#: org-mode.org:3575
msgid "(defvar bh/plantuml-loop-count 0)"
msgstr ""

#. type: Plain text
#: org-mode.org:3579
#, no-wrap
msgid ""
"(defun bh/plantuml-loop () \n"
"  (incf bh/plantuml-loop-count)\n"
"  (number-to-string bh/plantuml-loop-count))\n"
msgstr ""

#. type: Plain text
#: org-mode.org:3584
#, no-wrap
msgid ""
"(defun bh/plantuml-reset-counters ()\n"
"  (setq bh/plantuml-if-count 0\n"
"        bh/plantuml-loop-count 0)\n"
"  \"\")\n"
msgstr ""

#. type: Plain text
#: org-mode.org:3586
msgid ""
"(define-abbrev org-mode-abbrev-table \"sact\" \"\" "
"'skel-org-block-plantuml-activity)"
msgstr ""

#. type: Plain text
#: org-mode.org:3597
#, no-wrap
msgid ""
"(define-skeleton skel-org-block-plantuml-activity-if\n"
"  \"Insert a org plantuml block activity if statement\"\n"
"  \"\" \n"
"  \"if \\\"\\\" then\\n\"\n"
"  \"  -> [condition] ==IF\" (setq ifn (bh/plantuml-if)) \"==\\n\"\n"
"  \"  --> ==IF\" ifn \"M1==\\n\"\n"
"  \"  -left-> ==IF\" ifn \"M2==\\n\"\n"
"  \"else\\n\"\n"
"  \"end if\\n\"\n"
"  \"--> ==IF\" ifn \"M2==\")\n"
msgstr ""

#. type: Plain text
#: org-mode.org:3599
msgid ""
"(define-abbrev org-mode-abbrev-table \"sif\" \"\" "
"'skel-org-block-plantuml-activity-if)"
msgstr ""

#. type: Plain text
#: org-mode.org:3607
#, no-wrap
msgid ""
"(define-skeleton skel-org-block-plantuml-activity-for\n"
"  \"Insert a org plantuml block activity for statement\"\n"
"  \"Loop for each: \" \n"
"  \"--> ==LOOP\" (setq loopn (bh/plantuml-loop)) \"==\\n\"\n"
"  \"note left: Loop\" loopn \": For each \" str \"\\n\"\n"
"  \"--> ==ENDLOOP\" loopn \"==\\n\"\n"
"  \"note left: Loop\" loopn \": End for each \" str \"\\n\" )\n"
msgstr ""

#. type: Plain text
#: org-mode.org:3609
msgid ""
"(define-abbrev org-mode-abbrev-table \"sfor\" \"\" "
"'skel-org-block-plantuml-activity-for)"
msgstr ""

#. type: Plain text
#: org-mode.org:3624
#, no-wrap
msgid ""
"(define-skeleton skel-org-block-plantuml-sequence\n"
"  \"Insert a org plantuml activity diagram block, querying for filename.\"\n"
"  \"File appends (no extension): \"\n"
"  \"#+begin_src plantuml :file \" str \"-seq.png :cache yes :tangle \" str "
"\"-seq.txt\\n\"\n"
"  \"@startuml\\n\"\n"
"  \"title \" str \" - \\n\"\n"
"  \"actor CSR as \\\"Customer Service Representative\\\"\\n\"\n"
"  \"participant CSMO as \\\"CSM Online\\\"\\n\"\n"
"  \"participant CSMU as \\\"CSM Unix\\\"\\n\"\n"
"  \"participant NRIS\\n\"\n"
"  \"actor Customer\"\n"
"  _ - \\n\n"
"  \"@enduml\\n\"\n"
"  \"#+end_src\\n\")\n"
msgstr ""

#. type: Plain text
#: org-mode.org:3626
msgid ""
"(define-abbrev org-mode-abbrev-table \"sseq\" \"\" "
"'skel-org-block-plantuml-sequence)"
msgstr ""

#. type: Plain text
#: org-mode.org:3636
#, no-wrap
msgid ""
";; sdot - Graphviz DOT block\n"
"(define-skeleton skel-org-block-dot\n"
"  \"Insert a org graphviz dot block, querying for filename.\"\n"
"  \"File (no extension): \"\n"
"  \"#+begin_src dot :file \" str \".png :cache yes :cmdline -Kdot "
"-Tpng\\n\"\n"
"  \"graph G {\\n\"\n"
"  _ - \\n\n"
"  \"}\\n\"\n"
"  \"#+end_src\\n\")\n"
msgstr ""

#. type: Plain text
#: org-mode.org:3638
msgid "(define-abbrev org-mode-abbrev-table \"sdot\" \"\" 'skel-org-block-dot)"
msgstr ""

#. type: Plain text
#: org-mode.org:3646
#, no-wrap
msgid ""
";; sditaa - Ditaa source block\n"
"(define-skeleton skel-org-block-ditaa\n"
"  \"Insert a org ditaa block, querying for filename.\"\n"
"  \"File (no extension): \"\n"
"  \"#+begin_src ditaa :file \" str \".png :cache yes\\n\"\n"
"  _ - \\n\n"
"  \"#+end_src\\n\")\n"
msgstr ""

#. type: Plain text
#: org-mode.org:3648
msgid "(define-abbrev org-mode-abbrev-table \"sditaa\" \"\" 'skel-org-block-ditaa)"
msgstr ""

#. type: Plain text
#: org-mode.org:3656
#, no-wrap
msgid ""
";; selisp - Emacs Lisp source block\n"
"(define-skeleton skel-org-block-elisp\n"
"  \"Insert a org emacs-lisp block\"\n"
"  \"\"\n"
"  \"#+begin_src emacs-lisp\\n\"\n"
"  _ - \\n\n"
"  \"#+end_src\\n\")\n"
msgstr ""

#. type: Plain text
#: org-mode.org:3659
msgid ""
"(define-abbrev org-mode-abbrev-table \"selisp\" \"\" 'skel-org-block-elisp)  "
"#+end_src"
msgstr ""

#. type: Plain text
#: org-mode.org:3666
msgid ""
"I also use abbrev-mode when taking notes at work.  I tend to write first "
"names for people which get expanded to their complete name in my notes.  So "
"if I write =mickey= it gets automatically expanded to =Mickey Mouse= as I "
"type.  To create an abbreviation just type in the short form followed by "
"=C-x a i l= to create an abbreviation for the current mode I'm in."
msgstr ""

#. type: Plain text
#: org-mode.org:3670
msgid ""
"The only thing you have to be careful with is not to use a common word for "
"your abbreviation since abbrev-mode will try to expand it everytime you "
"enter it.  I found this annoying when I used =plantuml= as one of my "
"abbreviations."
msgstr ""

#. type: Plain text
#: org-mode.org:3678
msgid ""
"I also use skeletons and abbrev-mode for C source files at work.  This works "
"really well for me.  *** Example PlantUml Activity Diagram Generation "
":PROPERTIES: :CUSTOM_ID: ActivityDiagramExample :END: [2013-07-20 Sat 03:27]"
msgstr ""

#. type: Plain text
#: org-mode.org:3682
msgid ""
"When creating activity diagrams I can use 'sif' and 'sfor' to add IF and FOR "
"blocks to the diagram with unique numbering automatically generated."
msgstr ""

#. type: Plain text
#: org-mode.org:3684
msgid "Example: Create a new diagram and enter 2 IFs and 2 FOR blocks"
msgstr ""

#. type: Plain text
#: org-mode.org:3686
msgid "Create diagram: \"sact RET test RET\""
msgstr ""

#. type: Plain text
#: org-mode.org:3688 org-mode.org:3709 org-mode.org:3737 org-mode.org:3773
msgid "gives"
msgstr ""

#. type: Plain text
#: org-mode.org:3694
msgid ""
"#+begin_src plantuml :file test-act.png :cache yes :tangle test-act.txt "
":exports both @startuml skinparam activity { BackgroundColor<<New>> Cyan }"
msgstr ""

#. type: Plain text
#: org-mode.org:3699
msgid "title test - note left: test (*) --> \"test\" --> (*)"
msgstr ""

#. type: Plain text
#: org-mode.org:3702 org-mode.org:3730 org-mode.org:3765 org-mode.org:3810
msgid "@enduml #+end_src"
msgstr ""

#. type: Plain text
#: org-mode.org:3705
msgid "#+results[e196c6f48d5adbbf2b0300c87127c560d9913669]: [[file:test-act.png]]"
msgstr ""

#. type: Plain text
#: org-mode.org:3707
msgid "Put cursor on --> (*) and enter \"sif RET\""
msgstr ""

#. type: Plain text
#: org-mode.org:3715
msgid ""
"#+begin_src plantuml :file test-act2.png :cache yes :tangle test-act2.txt "
":exports both @startuml skinparam activity { BackgroundColor<<New>> Cyan }"
msgstr ""

#. type: Plain text
#: org-mode.org:3727
#, no-wrap
msgid ""
"title test - \n"
"note left: test\n"
"(*) --> \"test\"\n"
"if \"\" then\n"
"  -> [condition] ==IF1==\n"
"  --> ==IF1M1==\n"
"  -left-> ==IF1M2==\n"
"else\n"
"end if\n"
"--> ==IF1M2==\n"
"--> (*)\n"
msgstr ""

#. type: Plain text
#: org-mode.org:3733
msgid "#+results[44839e6d5984e19cc3be9d5392f18fc11aade43c]: [[file:test-act2.png]]"
msgstr ""

#. type: Plain text
#: org-mode.org:3735
msgid "repeat on --> (*) line"
msgstr ""

#. type: Plain text
#: org-mode.org:3743
msgid ""
"#+begin_src plantuml :file test-act3.png :cache yes :tangle test-act3.txt "
":exports both @startuml skinparam activity { BackgroundColor<<New>> Cyan }"
msgstr ""

#. type: Plain text
#: org-mode.org:3762
#, no-wrap
msgid ""
"title test - \n"
"note left: test\n"
"(*) --> \"test\"\n"
"if \"\" then\n"
"  -> [condition] ==IF1==\n"
"  --> ==IF1M1==\n"
"  -left-> ==IF1M2==\n"
"else\n"
"end if\n"
"--> ==IF1M2==\n"
"if \"\" then\n"
"  -> [condition] ==IF2==\n"
"  --> ==IF2M1==\n"
"  -left-> ==IF2M2==\n"
"else\n"
"end if\n"
"--> ==IF2M2==\n"
"--> (*)\n"
msgstr ""

#. type: Plain text
#: org-mode.org:3768
msgid "#+results[4f0d2bf2fed3fe0dc067e922132e8629d11bd224]: [[file:test-act3.png]]"
msgstr ""

#. type: Plain text
#: org-mode.org:3771
msgid ""
"and add two for loops at the end with \"sfor RET line in file RET\" and "
"\"sfor RET address in addressbook RET\""
msgstr ""

#. type: Plain text
#: org-mode.org:3779
msgid ""
"#+begin_src plantuml :file test-act4.png :cache yes :tangle test-act4.txt "
":exports both @startuml skinparam activity { BackgroundColor<<New>> Cyan }"
msgstr ""

#. type: Plain text
#: org-mode.org:3805
#, no-wrap
msgid ""
"title test - \n"
"note left: test\n"
"(*) --> \"test\"\n"
"if \"\" then\n"
"  -> [condition] ==IF1==\n"
"  --> ==IF1M1==\n"
"  -left-> ==IF1M2==\n"
"else\n"
"end if\n"
"--> ==IF1M2==\n"
"if \"\" then\n"
"  -> [condition] ==IF2==\n"
"  --> ==IF2M1==\n"
"  -left-> ==IF2M2==\n"
"else\n"
"end if\n"
"--> ==IF2M2==\n"
"--> ==LOOP1==\n"
"note left: Loop1: For each line in file\n"
"--> ==ENDLOOP1==\n"
"note left: Loop1: End for each line in file\n"
"--> ==LOOP2==\n"
"note left: Loop2: For each address in addressbook\n"
"--> ==ENDLOOP2==\n"
"note left: Loop2: End for each address in addressbook\n"
msgstr ""

#. type: Plain text
#: org-mode.org:3807
msgid "--> (*)"
msgstr ""

#. type: Plain text
#: org-mode.org:3813
msgid "#+results[178bbf661c1d4b459cc11b7b88ca339a4d9f85d1]: [[file:test-act4.png]]"
msgstr ""

#. type: Plain text
#: org-mode.org:3815
msgid "I use rectangular cut and paste if I need to indent generated blocks."
msgstr ""

#. type: Plain text
#: org-mode.org:3820
#, no-wrap
msgid ""
"** Focus On Current Work\n"
":PROPERTIES:\n"
":CUSTOM_ID: FocusOnCurrentWork\n"
":END:\n"
msgstr ""

#. type: Plain text
#: org-mode.org:3826
msgid ""
"There is more than one way to do this.  Use what works for you.  *** "
"Narrowing to a subtree with =bh/org-todo= :PROPERTIES: :CUSTOM_ID: "
"NarrowToSubtree :END:"
msgstr ""

#. type: Plain text
#: org-mode.org:3829
msgid ""
"=f5= and =S-f5= are bound the functions for narrowing and widening the emacs "
"buffer as defined below."
msgstr ""

#. type: Plain text
#: org-mode.org:3831
msgid "We now use:"
msgstr ""

#. type: Bullet: '    - '
#: org-mode.org:3837
msgid "T (tasks) for C-c / t on the current buffer"
msgstr ""

#. type: Bullet: '    - '
#: org-mode.org:3837
msgid "N (narrow) narrows to this task subtree"
msgstr ""

#. type: Bullet: '    - '
#: org-mode.org:3837
msgid "U (up) narrows to the immediate parent task subtree without moving"
msgstr ""

#. type: Bullet: '    - '
#: org-mode.org:3837
msgid "P (project) narrows to the parent project subtree without moving"
msgstr ""

#. type: Bullet: '    - '
#: org-mode.org:3837
msgid "F (file) narrows to the current file or file of the existing restriction"
msgstr ""

#. type: Plain text
#: org-mode.org:3840
msgid ""
"The agenda keeps widening the org buffer so this gives a convenient way to "
"focus on what we are doing."
msgstr ""

#. type: Plain text
#: org-mode.org:3844
msgid ""
"#+header: :tangle yes #+begin_src emacs-lisp (global-set-key (kbd \"<f5>\") "
"'bh/org-todo)"
msgstr ""

#. type: Plain text
#: org-mode.org:3853
#, no-wrap
msgid ""
"(defun bh/org-todo (arg)\n"
"  (interactive \"p\")\n"
"  (if (equal arg 4)\n"
"      (save-restriction\n"
"        (bh/narrow-to-org-subtree)\n"
"        (org-show-todo-tree nil))\n"
"    (bh/narrow-to-org-subtree)\n"
"    (org-show-todo-tree nil)))\n"
msgstr ""

#. type: Plain text
#: org-mode.org:3855
msgid "(global-set-key (kbd \"<S-f5>\") 'bh/widen)"
msgstr ""

#. type: Plain text
#: org-mode.org:3864
#, no-wrap
msgid ""
"(defun bh/widen ()\n"
"  (interactive)\n"
"  (if (equal major-mode 'org-agenda-mode)\n"
"      (progn\n"
"        (org-agenda-remove-restriction-lock)\n"
"        (when org-agenda-sticky\n"
"          (org-agenda-redo)))\n"
"    (widen)))\n"
msgstr ""

#. type: Plain text
#: org-mode.org:3868
#, no-wrap
msgid ""
"(add-hook 'org-agenda-mode-hook\n"
"          '(lambda () (org-defkey org-agenda-mode-map \"W\" (lambda () "
"(interactive) (setq bh/hide-scheduled-and-waiting-next-tasks t) "
"(bh/widen))))\n"
"          'append)\n"
msgstr ""

#. type: Plain text
#: org-mode.org:3880
#, no-wrap
msgid ""
"(defun bh/restrict-to-file-or-follow (arg)\n"
"  \"Set agenda restriction to 'file or with argument invoke follow mode.\n"
"I don't use follow mode very often but I restrict to file all the time\n"
"so change the default 'F' binding in the agenda to allow both\"\n"
"  (interactive \"p\")\n"
"  (if (equal arg 4)\n"
"      (org-agenda-follow-mode)\n"
"    (widen)\n"
"    (bh/set-agenda-restriction-lock 4)\n"
"    (org-agenda-redo)\n"
"    (beginning-of-buffer)))\n"
msgstr ""

#. type: Plain text
#: org-mode.org:3884
#, no-wrap
msgid ""
"(add-hook 'org-agenda-mode-hook\n"
"          '(lambda () (org-defkey org-agenda-mode-map \"F\" "
"'bh/restrict-to-file-or-follow))\n"
"          'append)\n"
msgstr ""

#. type: Plain text
#: org-mode.org:3890
#, no-wrap
msgid ""
"(defun bh/narrow-to-org-subtree ()\n"
"  (widen)\n"
"  (org-narrow-to-subtree)\n"
"  (save-restriction\n"
"    (org-agenda-set-restriction-lock)))\n"
msgstr ""

#. type: Plain text
#: org-mode.org:3900
#, no-wrap
msgid ""
"(defun bh/narrow-to-subtree ()\n"
"  (interactive)\n"
"  (if (equal major-mode 'org-agenda-mode)\n"
"      (progn\n"
"        (org-with-point-at (org-get-at-bol 'org-hd-marker)\n"
"          (bh/narrow-to-org-subtree))\n"
"        (when org-agenda-sticky\n"
"          (org-agenda-redo)))\n"
"    (bh/narrow-to-org-subtree)))\n"
msgstr ""

#. type: Plain text
#: org-mode.org:3904
#, no-wrap
msgid ""
"(add-hook 'org-agenda-mode-hook\n"
"          '(lambda () (org-defkey org-agenda-mode-map \"N\" "
"'bh/narrow-to-subtree))\n"
"          'append)\n"
msgstr ""

#. type: Plain text
#: org-mode.org:3910
#, no-wrap
msgid ""
"(defun bh/narrow-up-one-org-level ()\n"
"  (widen)\n"
"  (save-excursion\n"
"    (outline-up-heading 1 'invisible-ok)\n"
"    (bh/narrow-to-org-subtree)))\n"
msgstr ""

#. type: Plain text
#: org-mode.org:3916
#, no-wrap
msgid ""
"(defun bh/get-pom-from-agenda-restriction-or-point ()\n"
"  (or (org-get-at-bol 'org-hd-marker)\n"
"      (and (marker-position org-agenda-restrict-begin) "
"org-agenda-restrict-begin)\n"
"      (and (equal major-mode 'org-mode) (point))\n"
"      org-clock-marker))\n"
msgstr ""

#. type: Plain text
#: org-mode.org:3923
#, no-wrap
msgid ""
"(defun bh/narrow-up-one-level ()\n"
"  (interactive)\n"
"  (if (equal major-mode 'org-agenda-mode)\n"
"      (org-with-point-at (bh/get-pom-from-agenda-restriction-or-point)\n"
"        (bh/narrow-up-one-org-level))\n"
"    (bh/narrow-up-one-org-level)))\n"
msgstr ""

#. type: Plain text
#: org-mode.org:3927
#, no-wrap
msgid ""
"(add-hook 'org-agenda-mode-hook\n"
"          '(lambda () (org-defkey org-agenda-mode-map \"U\" "
"'bh/narrow-up-one-level))\n"
"          'append)\n"
msgstr ""

#. type: Plain text
#: org-mode.org:3933
#, no-wrap
msgid ""
"(defun bh/narrow-to-org-project ()\n"
"  (widen)\n"
"  (save-excursion\n"
"    (bh/find-project-task)\n"
"    (bh/narrow-to-org-subtree)))\n"
msgstr ""

#. type: Plain text
#: org-mode.org:3948
#, no-wrap
msgid ""
"(defun bh/narrow-to-project ()\n"
"  (interactive)\n"
"  (if (equal major-mode 'org-agenda-mode)\n"
"      (progn\n"
"        (org-with-point-at (bh/get-pom-from-agenda-restriction-or-point)\n"
"          (bh/narrow-to-org-project)\n"
"          (save-excursion\n"
"            (bh/find-project-task)\n"
"            (org-agenda-set-restriction-lock)))\n"
"        (org-agenda-redo)\n"
"        (beginning-of-buffer))\n"
"    (bh/narrow-to-org-project)\n"
"    (save-restriction\n"
"      (org-agenda-set-restriction-lock))))\n"
msgstr ""

#. type: Plain text
#: org-mode.org:3952
#, no-wrap
msgid ""
"(add-hook 'org-agenda-mode-hook\n"
"          '(lambda () (org-defkey org-agenda-mode-map \"P\" "
"'bh/narrow-to-project))\n"
"          'append)\n"
msgstr ""

#. type: Plain text
#: org-mode.org:3954
msgid "(defvar bh/project-list nil)"
msgstr ""

#. type: Plain text
#: org-mode.org:3965
#, no-wrap
msgid ""
"(defun bh/view-next-project ()\n"
"  (interactive)\n"
"  (let (num-project-left current-project)\n"
"    (unless (marker-position org-agenda-restrict-begin)\n"
"      (goto-char (point-min))\n"
"      ; Clear all of the existing markers on the list\n"
"      (while bh/project-list\n"
"        (set-marker (pop bh/project-list) nil))\n"
"      (re-search-forward \"Tasks to Refile\")\n"
"      (forward-visible-line 1))\n"
msgstr ""

#. type: Plain text
#: org-mode.org:3978
#, no-wrap
msgid ""
"    ; Build a new project marker list\n"
"    (unless bh/project-list\n"
"      (while (< (point) (point-max))\n"
"        (while (and (< (point) (point-max))\n"
"                    (or (not (org-get-at-bol 'org-hd-marker))\n"
"                        (org-with-point-at (org-get-at-bol 'org-hd-marker)\n"
"                          (or (not (bh/is-project-p))\n"
"                              (bh/is-project-subtree-p)))))\n"
"          (forward-visible-line 1))\n"
"        (when (< (point) (point-max))\n"
"          (add-to-list 'bh/project-list (copy-marker (org-get-at-bol "
"'org-hd-marker)) 'append))\n"
"        (forward-visible-line 1)))\n"
msgstr ""

#. type: Plain text
#: org-mode.org:3995
#, no-wrap
msgid ""
"    ; Pop off the first marker on the list and display\n"
"    (setq current-project (pop bh/project-list))\n"
"    (when current-project\n"
"      (org-with-point-at current-project\n"
"        (setq bh/hide-scheduled-and-waiting-next-tasks nil)\n"
"        (bh/narrow-to-project))\n"
"      ; Remove the marker\n"
"      (setq current-project nil)\n"
"      (org-agenda-redo)\n"
"      (beginning-of-buffer)\n"
"      (setq num-projects-left (length bh/project-list))\n"
"      (if (> num-projects-left 0)\n"
"          (message \"%s projects left to view\" num-projects-left)\n"
"        (beginning-of-buffer)\n"
"        (setq bh/hide-scheduled-and-waiting-next-tasks t)\n"
"        (error \"All projects viewed.\")))))\n"
msgstr ""

#. type: Plain text
#: org-mode.org:4000
#, no-wrap
msgid ""
"(add-hook 'org-agenda-mode-hook\n"
"          '(lambda () (org-defkey org-agenda-mode-map \"V\" "
"'bh/view-next-project))\n"
"          'append)\n"
"#+end_src\n"
msgstr ""

#. type: Plain text
#: org-mode.org:4005
msgid ""
"This makes it easy to hide all of the other details in your org-file "
"temporarily by limiting your view to this task subtree.  Tasks are folded "
"and hilighted so that only tasks which are incomplete are shown."
msgstr ""

#. type: Plain text
#: org-mode.org:4010
msgid ""
"I hit =f5= (or the =T= speed key) a lot.  This basically does a "
"=org-narrow-to-subtree= and =C-c / t= combination leaving the buffer in a "
"narrowed state.  I use =S-f5= (or some other widening speed key like =U=, "
"=W=, =F=) to widen back to the normal view."
msgstr ""

#. type: Plain text
#: org-mode.org:4016
msgid ""
"I also have the following setting to force showing the next headline.  "
"#+header: :tangle yes #+begin_src emacs-lisp (setq org-show-entry-below "
"(quote ((default))))  #+end_src"
msgstr ""

#. type: Plain text
#: org-mode.org:4023
msgid ""
"This prevents too many headlines from being folded together when I'm working "
"with collapsed trees.  *** Limiting the agenda to a subtree :PROPERTIES: "
":CUSTOM_ID: AgendaNarrowToSubtree :END:"
msgstr ""

#. type: Plain text
#: org-mode.org:4029
msgid ""
"=C-c C-x <= turns on the agenda restriction lock for the current subtree.  "
"This keeps your agenda focused on only this subtree.  Alarms and "
"notifications are still active outside the agenda restriction.  =C-c C-x >= "
"turns off the agenda restriction lock returning your agenda view back to "
"normal."
msgstr ""

#. type: Plain text
#: org-mode.org:4038
#, no-wrap
msgid ""
"I have added key bindings for the agenda to allow using =C-c C-x <= in\n"
"the agenda to set the restriction lock to the current task directly.\n"
"The following elisp accomplishes this.\n"
"#+header: :tangle yes\n"
"#+begin_src emacs-lisp\n"
"(add-hook 'org-agenda-mode-hook\n"
"          '(lambda () (org-defkey org-agenda-mode-map \"\\C-c\\C-x<\" "
"'bh/set-agenda-restriction-lock))\n"
"          'append)\n"
msgstr ""

#. type: Plain text
#: org-mode.org:4057
#, no-wrap
msgid ""
"(defun bh/set-agenda-restriction-lock (arg)\n"
"  \"Set restriction lock to current task subtree or file if prefix is "
"specified\"\n"
"  (interactive \"p\")\n"
"  (let* ((pom (bh/get-pom-from-agenda-restriction-or-point))\n"
"         (tags (org-with-point-at pom (org-get-tags-at))))\n"
"    (let ((restriction-type (if (equal arg 4) 'file 'subtree)))\n"
"      (save-restriction\n"
"        (cond\n"
"         ((and (equal major-mode 'org-agenda-mode) pom)\n"
"          (org-with-point-at pom\n"
"            (org-agenda-set-restriction-lock restriction-type))\n"
"          (org-agenda-redo))\n"
"         ((and (equal major-mode 'org-mode) (org-before-first-heading-p))\n"
"          (org-agenda-set-restriction-lock 'file))\n"
"         (pom\n"
"          (org-with-point-at pom\n"
"            (org-agenda-set-restriction-lock restriction-type))))))))\n"
"#+end_src\n"
msgstr ""

#. type: Plain text
#: org-mode.org:4060
msgid ""
"This allows me to set the restriction lock from agenda to task directly.  I "
"work from the agenda a lot and I find this very convenient."
msgstr ""

#. type: Plain text
#: org-mode.org:4067
msgid ""
"Setting the restriction directly to the task is less surprising than "
"automatically moving up the tree to the project level task -- which is what "
"I was doing before.  If the select task is too restrictive it's easy to move "
"the restriction lock up a level by visiting the task in the org file and "
"going up and resetting the lock - in case you want to see move of the "
"project."
msgstr ""

#. type: Plain text
#: org-mode.org:4071
msgid ""
"Selecting the entire project sometimes has too many tasks in it and I want "
"to limit the view to part of the subtree.  This is why I keep the =N= and "
"=U= key bindings for adjusting the narrowed region."
msgstr ""

#. type: Plain text
#: org-mode.org:4076
msgid ""
"I've added new convenience keys for restricting the agenda and org-buffer to "
"subtree, parent task, and project task, as well as removing the "
"restriction.  These keys work both in the agenda and as speed commands on a "
"headline in the org-file."
msgstr ""

#. type: Plain text
#: org-mode.org:4078
msgid "- =N= narrows to the current task subtree"
msgstr ""

#. type: Plain text
#: org-mode.org:4080
#, no-wrap
msgid "  This is the same as same as =C-c C-x <=\n"
msgstr ""

#. type: Plain text
#: org-mode.org:4082
msgid "- =U= narrows to the parent subtree of this task"
msgstr ""

#. type: Plain text
#: org-mode.org:4084
#, no-wrap
msgid "  This goes up one level and narrows to that subtree.\n"
msgstr ""

#. type: Plain text
#: org-mode.org:4086
msgid "- =P= narrows to the entire project containing this task"
msgstr ""

#. type: Plain text
#: org-mode.org:4089
#, no-wrap
msgid ""
"  This goes up the tree to the top-level =TODO= keyword and selects\n"
"  that as the subtree to narrow to\n"
msgstr ""

#. type: Plain text
#: org-mode.org:4091
msgid "- =W= removes the restriction, widening the buffer"
msgstr ""

#. type: Plain text
#: org-mode.org:4096
msgid ""
"I like the highlighting for a restriction to only affect the headline and "
"not the entire body of the agenda restriction.  I use the following setting "
"to keep the highlight on the heading only (as was the case for pre-8.0 "
"versions of org-mode)"
msgstr ""

#. type: Plain text
#: org-mode.org:4102
msgid ""
"#+header: :tangle yes #+begin_src emacs-lisp ;; Limit restriction lock "
"highlighting to the headline only (setq "
"org-agenda-restriction-lock-highlight-subtree nil)  #+end_src"
msgstr ""

#. type: Plain text
#: org-mode.org:4107
#, no-wrap
msgid ""
"*** Limiting the agenda to a file\n"
":PROPERTIES:\n"
":CUSTOM_ID: AgendaNarrowToFile\n"
":END:\n"
msgstr ""

#. type: Plain text
#: org-mode.org:4109
msgid "You can limit the agenda view to a single file in multiple ways."
msgstr ""

#. type: Plain text
#: org-mode.org:4115
msgid ""
"You can use the agenda restriction lock =C-c C-x <= on the any line before "
"the first heading to set the agenda restriction lock to this file only.  "
"This is equivalent using a prefix argumment (=C-u C-c C-x <=) anywhere in "
"the file.  This lock stays in effect until you remove it with =C-c C-x >=."
msgstr ""

#. type: Plain text
#: org-mode.org:4117
msgid "This also works in the agenda with my =C-u C-c c-x <= key binding."
msgstr ""

#. type: Plain text
#: org-mode.org:4126
msgid ""
"Another way is to invoke the agenda with =F12 < a= while visiting an "
"org-mode file.  This limits the agenda view to just this file.  I "
"occasionally use this to view a file not in my =org-agenda-files= in the "
"agenda.  ** Tuning the Agenda Views :PROPERTIES: :CUSTOM_ID: "
"TuningAgendaViews :END:"
msgstr ""

#. type: Plain text
#: org-mode.org:4133
msgid ""
"Various customizations affect how the agenda views show task details.  This "
"section shows each of the customizations I use in my workflow.  *** "
"Highlight the current agenda line :PROPERTIES: :CUSTOM_ID: "
"HighlightCurrentAgendaLine :END:"
msgstr ""

#. type: Plain text
#: org-mode.org:4138
msgid ""
"The following code in my =.emacs= file keeps the current agenda line "
"highlighted.  This makes it obvious what task will be affected by commands "
"issued in the agenda.  No more acting on the wrong task by mistake!"
msgstr ""

#. type: Plain text
#: org-mode.org:4140
msgid "The clock modeline time is also shown with a reverse background."
msgstr ""

#. type: Plain text
#: org-mode.org:4148
#, no-wrap
msgid ""
"#+header: :tangle yes\n"
"#+begin_src emacs-lisp\n"
";; Always hilight the current agenda line\n"
"(add-hook 'org-agenda-mode-hook\n"
"          '(lambda () (hl-line-mode 1))\n"
"          'append)\n"
"#+end_src\n"
msgstr ""

#. type: Plain text
#: org-mode.org:4163
#, no-wrap
msgid ""
"#+header: :tangle no\n"
"#+begin_src emacs-lisp\n"
";; The following custom-set-faces create the highlights\n"
"(custom-set-faces\n"
"  ;; custom-set-faces was added by Custom.\n"
"  ;; If you edit it by hand, you could mess it up, so be careful.\n"
"  ;; Your init file should contain only one such instance.\n"
"  ;; If there is more than one, they won't work right.\n"
" '(org-mode-line-clock ((t (:background \"grey75\" :foreground \"red\" :box "
"(:line-width -1 :style released-button)))) t))\n"
"#+end_src\n"
"*** Keep tasks with timestamps visible on the global todo lists\n"
":PROPERTIES:\n"
":CUSTOM_ID: GlobalTodoListsShowAllTasks\n"
":END:\n"
msgstr ""

#. type: Plain text
#: org-mode.org:4172
msgid ""
"Tasks with dates (=SCHEDULED:=, =DEADLINE:=, or active dates) show up in the "
"agenda when appropriate.  The block agenda view (=F12 a=) tries to keep "
"tasks showing up only in one location (either in the calendar or other todo "
"lists in later sections of the block agenda.)  I now rarely use the global "
"todo list search in org-mode (=F12 t=, =F12 m=)  and when I do I'm trying to "
"find a specific task quickly.  These lists now include _everything_ so I can "
"just search for the item I want and move on."
msgstr ""

#. type: Plain text
#: org-mode.org:4180
msgid ""
"The block agenda prevents display of tasks with deadlines or scheduled dates "
"in the future so you can safely ignore these until the appropriate time.  "
"#+header: :tangle yes #+begin_src emacs-lisp ;; Keep tasks with dates on the "
"global todo lists (setq org-agenda-todo-ignore-with-date nil)"
msgstr ""

#. type: Plain text
#: org-mode.org:4183
msgid ""
";; Keep tasks with deadlines on the global todo lists (setq "
"org-agenda-todo-ignore-deadlines nil)"
msgstr ""

#. type: Plain text
#: org-mode.org:4186
msgid ""
";; Keep tasks with scheduled dates on the global todo lists (setq "
"org-agenda-todo-ignore-scheduled nil)"
msgstr ""

#. type: Plain text
#: org-mode.org:4189
msgid ""
";; Keep tasks with timestamps on the global todo lists (setq "
"org-agenda-todo-ignore-timestamp nil)"
msgstr ""

#. type: Plain text
#: org-mode.org:4192
msgid ""
";; Remove completed deadline tasks from the agenda view (setq "
"org-agenda-skip-deadline-if-done t)"
msgstr ""

#. type: Plain text
#: org-mode.org:4195
msgid ""
";; Remove completed scheduled tasks from the agenda view (setq "
"org-agenda-skip-scheduled-if-done t)"
msgstr ""

#. type: Plain text
#: org-mode.org:4203
msgid ""
";; Remove completed items from search results (setq "
"org-agenda-skip-timestamp-if-done t)  #+end_src *** Use the Diary for "
"Holidays and Appointments :PROPERTIES: :CUSTOM_ID: DiaryForAppointments "
":END:"
msgstr ""

#. type: Plain text
#: org-mode.org:4207
msgid ""
"I don't use the emacs Diary for anything but I like seeing the holidays on "
"my agenda.  This helps with planning for those days when you're not supposed "
"to be working."
msgstr ""

#. type: Plain text
#: org-mode.org:4213
msgid ""
"#+header: :tangle yes #+begin_src emacs-lisp (setq org-agenda-include-diary "
"nil)  (setq org-agenda-diary-file \"~/git/org/diary.org\")  #+end_src"
msgstr ""

#. type: Plain text
#: org-mode.org:4217
msgid ""
"The diary file keeps =date-tree= entries created by the capture mode "
"'appointment' template.  I use this also for miscellaneous tasks I want to "
"clock during interruptions."
msgstr ""

#. type: Plain text
#: org-mode.org:4222
msgid ""
"I don't use a =~/diary= file anymore.  That is just there as a zero-length "
"file to keep Emacs happy.  I use org-mode's diary functions instead.  "
"Inserting entries with =i= in the emacs agenda creates date entries in the "
"=~/git/org/diary.org= file."
msgstr ""

#. type: Plain text
#: org-mode.org:4239
#, no-wrap
msgid ""
"I include holidays from the calendar in my =todo.org= file as follows:\n"
"#+begin_src org :exports src\n"
",#+FILETAGS: PERSONAL\n"
",* Appointments\n"
"  :PROPERTIES:\n"
"  :CATEGORY: Appt\n"
"  :ARCHIVE:  %s_archive::* Appointments\n"
"  :END:      \n"
",** Holidays\n"
"   :PROPERTIES:\n"
"   :Category: Holiday\n"
"   :END:\n"
"   %%(org-calendar-holiday)\n"
",** Some other Appointment\n"
"   ...\n"
"#+end_src\n"
msgstr ""

#. type: Plain text
#: org-mode.org:4242
msgid ""
"I use the following setting so any time strings in the heading are shown in "
"the agenda."
msgstr ""

#. type: Plain text
#: org-mode.org:4251
msgid ""
"#+header: :tangle yes #+begin_src emacs-lisp (setq "
"org-agenda-insert-diary-extract-time t)  #+end_src *** Searches include "
"archive files :PROPERTIES: :CUSTOM_ID: SearchesIncludeArchiveFiles :END:"
msgstr ""

#. type: Plain text
#: org-mode.org:4255
msgid ""
"I keep a single archive file for each of my org-mode project files.  This "
"allows me to search the current file and the archive when I need to dig up "
"old information from the archives."
msgstr ""

#. type: Plain text
#: org-mode.org:4258
msgid ""
"I don't need this often but it sure is handy on the occasions that I do need "
"it."
msgstr ""

#. type: Plain text
#: org-mode.org:4268
msgid ""
"#+header: :tangle yes #+begin_src emacs-lisp ;; Include agenda archive files "
"when searching for things (setq org-agenda-text-search-extra-files (quote "
"(agenda-archives)))  #+end_src *** Agenda view tweaks :PROPERTIES: "
":CUSTOM_ID: AgendaViewTweaks :END:"
msgstr ""

#. type: Plain text
#: org-mode.org:4276
msgid ""
"The following agenda customizations control - display of repeating tasks - "
"display of empty dates on the agenda - task sort order - start the agenda "
"weekly view with Sunday - display of the grid - habits at the bottom"
msgstr ""

#. type: Plain text
#: org-mode.org:4280
msgid ""
"I use a custom sorting function so that my daily agenda lists tasks in order "
"of importance.  Tasks on the daily agenda are listed in the following order:"
msgstr ""

#. type: Bullet: '1. '
#: org-mode.org:4289
msgid "tasks with times at the top so they are hard to miss"
msgstr ""

#. type: Bullet: '2. '
#: org-mode.org:4289
msgid ""
"entries for today (active timestamp headlines that are not scheduled or "
"deadline tasks)"
msgstr ""

#. type: Bullet: '3. '
#: org-mode.org:4289
msgid "deadlines due today"
msgstr ""

#. type: Bullet: '4. '
#: org-mode.org:4289
msgid "late deadline tasks"
msgstr ""

#. type: Bullet: '5. '
#: org-mode.org:4289
msgid "scheduled items for today"
msgstr ""

#. type: Bullet: '6. '
#: org-mode.org:4289
msgid "pending deadlines (due soon)"
msgstr ""

#. type: Bullet: '7. '
#: org-mode.org:4289
msgid "late scheduled items"
msgstr ""

#. type: Bullet: '8. '
#: org-mode.org:4289
msgid "habits"
msgstr ""

#. type: Plain text
#: org-mode.org:4291
msgid "The lisp for this isn't particularly pretty but it works."
msgstr ""

#. type: Plain text
#: org-mode.org:4297
msgid ""
"Here are the =.emacs= settings: #+header: :tangle yes #+begin_src emacs-lisp "
";; Show all future entries for repeating tasks (setq "
"org-agenda-repeating-timestamp-show-all t)"
msgstr ""

#. type: Plain text
#: org-mode.org:4300
msgid ""
";; Show all agenda dates - even if they are empty (setq "
"org-agenda-show-all-dates t)"
msgstr ""

#. type: Plain text
#: org-mode.org:4307
#, no-wrap
msgid ""
";; Sorting order for tasks on the agenda\n"
"(setq org-agenda-sorting-strategy\n"
"      (quote ((agenda habit-down time-up user-defined-up effort-up "
"category-keep)\n"
"              (todo category-up effort-up)\n"
"              (tags category-up effort-up)\n"
"              (search category-up))))\n"
msgstr ""

#. type: Plain text
#: org-mode.org:4310
msgid ";; Start the weekly agenda on Monday (setq org-agenda-start-on-weekday 1)"
msgstr ""

#. type: Plain text
#: org-mode.org:4315
#, no-wrap
msgid ""
";; Enable display of the time grid so we can see the marker for the current "
"time\n"
"(setq org-agenda-time-grid (quote ((daily today remove-match)\n"
"                                   #(\"----------------\" 0 16 (org-heading "
"t))\n"
"                                   (0900 1100 1300 1500 1700))))\n"
msgstr ""

#. type: Plain text
#: org-mode.org:4318
msgid ";; Display tags farther right (setq org-agenda-tags-column -102)"
msgstr ""

#. type: Plain text
#: org-mode.org:4323
msgid ""
";; ;; Agenda sorting functions ;; (setq org-agenda-cmp-user-defined "
"'bh/agenda-sort)"
msgstr ""

#. type: Plain text
#: org-mode.org:4330
#, no-wrap
msgid ""
"(defun bh/agenda-sort (a b)\n"
"  \"Sorting strategy for agenda items.\n"
"Late deadlines first, then scheduled, then non-late deadlines\"\n"
"  (let (result num-a num-b)\n"
"    (cond\n"
"     ; time specific items are already sorted first by "
"org-agenda-sorting-strategy\n"
msgstr ""

#. type: Plain text
#: org-mode.org:4333
#, no-wrap
msgid ""
"     ; non-deadline and non-scheduled items next\n"
"     ((bh/agenda-sort-test 'bh/is-not-scheduled-or-deadline a b))\n"
msgstr ""

#. type: Plain text
#: org-mode.org:4336
#, no-wrap
msgid ""
"     ; deadlines for today next\n"
"     ((bh/agenda-sort-test 'bh/is-due-deadline a b))\n"
msgstr ""

#. type: Plain text
#: org-mode.org:4339
#, no-wrap
msgid ""
"     ; late deadlines next\n"
"     ((bh/agenda-sort-test-num 'bh/is-late-deadline '> a b))\n"
msgstr ""

#. type: Plain text
#: org-mode.org:4342
#, no-wrap
msgid ""
"     ; scheduled items for today next\n"
"     ((bh/agenda-sort-test 'bh/is-scheduled-today a b))\n"
msgstr ""

#. type: Plain text
#: org-mode.org:4345
#, no-wrap
msgid ""
"     ; late scheduled items next\n"
"     ((bh/agenda-sort-test-num 'bh/is-scheduled-late '> a b))\n"
msgstr ""

#. type: Plain text
#: org-mode.org:4348
#, no-wrap
msgid ""
"     ; pending deadlines last\n"
"     ((bh/agenda-sort-test-num 'bh/is-pending-deadline '< a b))\n"
msgstr ""

#. type: Plain text
#: org-mode.org:4352
#, no-wrap
msgid ""
"     ; finally default to unsorted\n"
"     (t (setq result nil)))\n"
"    result))\n"
msgstr ""

#. type: Plain text
#: org-mode.org:4368
#, no-wrap
msgid ""
"(defmacro bh/agenda-sort-test (fn a b)\n"
"  \"Test for agenda sort\"\n"
"  `(cond\n"
"    ; if both match leave them unsorted\n"
"    ((and (apply ,fn (list ,a))\n"
"          (apply ,fn (list ,b)))\n"
"     (setq result nil))\n"
"    ; if a matches put a first\n"
"    ((apply ,fn (list ,a))\n"
"     (setq result -1))\n"
"    ; otherwise if b matches put b first\n"
"    ((apply ,fn (list ,b))\n"
"     (setq result 1))\n"
"    ; if none match leave them unsorted\n"
"    (t nil)))\n"
msgstr ""

#. type: Plain text
#: org-mode.org:4383
#, no-wrap
msgid ""
"(defmacro bh/agenda-sort-test-num (fn compfn a b)\n"
"  `(cond\n"
"    ((apply ,fn (list ,a))\n"
"     (setq num-a (string-to-number (match-string 1 ,a)))\n"
"     (if (apply ,fn (list ,b))\n"
"         (progn\n"
"           (setq num-b (string-to-number (match-string 1 ,b)))\n"
"           (setq result (if (apply ,compfn (list num-a num-b))\n"
"                            -1\n"
"                          1)))\n"
"       (setq result -1)))\n"
"    ((apply ,fn (list ,b))\n"
"     (setq result 1))\n"
"    (t nil)))\n"
msgstr ""

#. type: Plain text
#: org-mode.org:4387
#, no-wrap
msgid ""
"(defun bh/is-not-scheduled-or-deadline (date-str)\n"
"  (and (not (bh/is-deadline date-str))\n"
"       (not (bh/is-scheduled date-str))))\n"
msgstr ""

#. type: Plain text
#: org-mode.org:4390
#, no-wrap
msgid ""
"(defun bh/is-due-deadline (date-str)\n"
"  (string-match \"Deadline:\" date-str))\n"
msgstr ""

#. type: Plain text
#: org-mode.org:4393
#, no-wrap
msgid ""
"(defun bh/is-late-deadline (date-str)\n"
"  (string-match \"\\\\([0-9]*\\\\) d\\. ago:\" date-str))\n"
msgstr ""

#. type: Plain text
#: org-mode.org:4396
#, no-wrap
msgid ""
"(defun bh/is-pending-deadline (date-str)\n"
"  (string-match \"In \\\\([^-]*\\\\)d\\.:\" date-str))\n"
msgstr ""

#. type: Plain text
#: org-mode.org:4401
#, no-wrap
msgid ""
"(defun bh/is-deadline (date-str)\n"
"  (or (bh/is-due-deadline date-str)\n"
"      (bh/is-late-deadline date-str)\n"
"      (bh/is-pending-deadline date-str)))\n"
msgstr ""

#. type: Plain text
#: org-mode.org:4405
#, no-wrap
msgid ""
"(defun bh/is-scheduled (date-str)\n"
"  (or (bh/is-scheduled-today date-str)\n"
"      (bh/is-scheduled-late date-str)))\n"
msgstr ""

#. type: Plain text
#: org-mode.org:4408
#, no-wrap
msgid ""
"(defun bh/is-scheduled-today (date-str)\n"
"  (string-match \"Scheduled:\" date-str))\n"
msgstr ""

#. type: Plain text
#: org-mode.org:4417
#, no-wrap
msgid ""
"(defun bh/is-scheduled-late (date-str)\n"
"  (string-match \"Sched\\.\\\\(.*\\\\)x:\" date-str))\n"
"#+end_src\n"
"*** Sticky Agendas\n"
":PROPERTIES:\n"
":CUSTOM_ID: StickyAgendas\n"
":END:\n"
"[2013-06-23 Sun 10:16]\n"
msgstr ""

#. type: Plain text
#: org-mode.org:4422
msgid ""
"Sticky agendas allow you to have more than one agenda view created "
"simultaneously.  You can quickly switch to the view without incurring an "
"agenda rebuild by invoking the agenda custom command key that normally "
"generates the agenda.  If it already exists it will display the existing "
"view.  =g= forces regeneration of the agenda view."
msgstr ""

#. type: Plain text
#: org-mode.org:4425
msgid ""
"I normally have two views displayed (=F12 a= for the daily/weekly agenda and "
"=F12 SPC= for my project management view)"
msgstr ""

#. type: Plain text
#: org-mode.org:4435
msgid ""
"#+header: :tangle yes #+begin_src emacs-lisp ;; Use sticky agenda's so they "
"persist (setq org-agenda-sticky t)  #+end_src ** Checklist handling "
":PROPERTIES: :CUSTOM_ID: ChecklistHandling :END:"
msgstr ""

#. type: Plain text
#: org-mode.org:4441
msgid ""
"Checklists are great for repeated tasks with lots of things that need to be "
"done.  For a long time I was manually resetting the check boxes to unchecked "
"when marking the repeated task =DONE= but no more! There's a contributed "
"=org-checklist= that can uncheck the boxes automagically when the task is "
"marked done."
msgstr ""

#. type: Plain text
#: org-mode.org:4443
msgid "Add the following to your =.emacs="
msgstr ""

#. type: Plain text
#: org-mode.org:4447
msgid ""
"#+header: :tangle no #+begin_src emacs-lisp (add-to-list 'load-path "
"(expand-file-name \"~/git/org-mode/contrib/lisp\"))"
msgstr ""

#. type: Plain text
#: org-mode.org:4450 org-mode.org:4463
msgid "(require 'org-checklist)  #+end_src"
msgstr ""

#. type: Plain text
#: org-mode.org:4460
#, no-wrap
msgid ""
"#+header: :tangle yes\n"
"#+begin_src emacs-lisp :exports none\n"
";; The following setting is different from the document so that you\n"
";; can override the document path by setting your path in the variable\n"
";; org-mode-user-contrib-lisp-path\n"
";;\n"
"(if (boundp 'org-mode-user-contrib-lisp-path)\n"
"    (add-to-list 'load-path org-mode-user-contrib-lisp-path)\n"
"  (add-to-list 'load-path (expand-file-name "
"\"~/git/org-mode/contrib/lisp\")))\n"
msgstr ""

#. type: Plain text
#: org-mode.org:4466
msgid ""
"and then to use it in a task you simply set the property =RESET_CHECK_BOXES= "
"to =t= like this"
msgstr ""

#. type: Plain text
#: org-mode.org:4473
#, no-wrap
msgid ""
"#+begin_src org :exports src\n"
",* TODO Invoicing and Archive Tasks [0/7]\n"
"  DEADLINE: <2009-07-01 Wed +1m -0d> \n"
"  :PROPERTIES:\n"
"  :RESET_CHECK_BOXES: t\n"
"  :END:\n"
msgstr ""

#. type: Bullet: '  - '
#: org-mode.org:4483
msgid "[ ] Do task 1"
msgstr ""

#. type: Plain text
#: org-mode.org:4483
#, no-wrap
msgid ""
"  - [ ] Do task 2\n"
"  ...\n"
"  - [ ] Do task 7\n"
"#+end_src\n"
"** Backups\n"
":PROPERTIES:\n"
":CUSTOM_ID: Backups\n"
":END:\n"
msgstr ""

#. type: Plain text
#: org-mode.org:4485
msgid "=Backups that you have to work hard at don't get done=."
msgstr ""

#. type: Plain text
#: org-mode.org:4489
msgid ""
"I lost a bunch of data over 10 years ago due to not having a working backup "
"solution.  At the time I said =I'm not going to lose any important data ever "
"again=.  So far so good :)"
msgstr ""

#. type: Plain text
#: org-mode.org:4494
msgid ""
"My backups get done religiously.  What does this have to do with org-mode? "
"Not much really, other than I don't spend time doing backups -- they just "
"happen -- which saves me time for other more interesting things."
msgstr ""

#. type: Plain text
#: org-mode.org:4500
msgid ""
"My backup philosophy is to make it possible to recover your data -- not "
"necessarily easy.  It doesn't have to be easy/fast to do the recovery "
"because I'll rarely have to recover data from the backups.  Saving time for "
"recovery doesn't make sense to me.  I want the backup to be fast and "
"painless since I do those all the time."
msgstr ""

#. type: Plain text
#: org-mode.org:4505
msgid ""
"I set up an automated network backup over 10 years ago that is still serving "
"me well today.  All of my systems gets daily backups to a network drive.  "
"These are collected monthly and written to an external removable USB disk."
msgstr ""

#. type: Plain text
#: org-mode.org:4509
msgid ""
"Once a month my task for backups prompts me to move the current collection "
"of montly backups to the USB drive for external storage.  Backups take "
"minimal effort currently and I'm really happy about that."
msgstr ""

#. type: Plain text
#: org-mode.org:4518
msgid ""
"Since then =git= came into my life, so backups of =git= repositories that "
"are on multiple machines is much less critical than it used to be.  There is "
"an automatic backup of everything pushed to the remote repository.  ** "
"Handling blocked tasks :PROPERTIES: :CUSTOM_ID: HandlingBlockedTasks :END:"
msgstr ""

#. type: Plain text
#: org-mode.org:4522
msgid ""
"Blocked tasks are tasks that have subtasks which are not in a done todo "
"state.  Blocked tasks show up in a grayed font by default in the agenda."
msgstr ""

#. type: Plain text
#: org-mode.org:4524
msgid "To enable task blocking set the following variable:"
msgstr ""

#. type: Plain text
#: org-mode.org:4529
msgid ""
"#+header: :tangle yes #+begin_src emacs-lisp (setq "
"org-enforce-todo-dependencies t)  #+end_src"
msgstr ""

#. type: Plain text
#: org-mode.org:4534
msgid ""
"This setting prevents tasks from changing to =DONE= if any subtasks are "
"still open.  This works pretty well except for repeating tasks.  I find I'm "
"regularly adding =TODO= tasks under repeating tasks and not all of the "
"subtasks need to be complete before the next repeat cycle."
msgstr ""

#. type: Plain text
#: org-mode.org:4538
msgid ""
"You can override the setting temporarily by changing the task with =C-u C-u "
"C-u C-c C-t= but I never remember that.  I set a permanent property on the "
"repeated tasks as follows:"
msgstr ""

#. type: Plain text
#: org-mode.org:4548
#, no-wrap
msgid ""
"#+begin_src org :exports src\n"
",* TODO New Repeating Task\n"
"  SCHEDULED: <2009-06-16 Tue +1w>\n"
"  :PROPERTIES:\n"
"  :NOBLOCKING: t\n"
"  :END:\n"
"  ...\n"
",** TODO Subtask  \n"
"#+end_src\n"
msgstr ""

#. type: Plain text
#: org-mode.org:4551
msgid ""
"This prevents the =New Repeating Task= from being blocked if some of the "
"items under it are not complete."
msgstr ""

#. type: Plain text
#: org-mode.org:4554
msgid ""
"Occassionally I need to complete tasks in a given order.  Org-mode has a "
"property =ORDERED= that enforces this for subtasks."
msgstr ""

#. type: Plain text
#: org-mode.org:4564
#, no-wrap
msgid ""
"#+begin_src org :exports src\n"
",* TODO Some Task\n"
"  :PROPERTIES:\n"
"  :ORDERED: t\n"
"  :END:\n"
",** TODO Step 1\n"
",** TODO Step 2\n"
",** TODO Step 3  \n"
"#+end_src\n"
msgstr ""

#. type: Plain text
#: org-mode.org:4572
msgid ""
"In this case you need to complete =Step 1= before you can complete =Step 2=, "
"etc. and org-mode prevents the state change to a done task until the "
"preceding tasks are complete.  ** Org Task structure and presentation "
":PROPERTIES: :CUSTOM_ID: OrgTaskStructureAndPresentation :END:"
msgstr ""

#. type: Plain text
#: org-mode.org:4579
msgid ""
"This section describes various org-mode settings I use to control how tasks "
"are displayed while I work on my org mode files.  *** Controlling display of "
"leading stars on headlines :PROPERTIES: :CUSTOM_ID: DisplayLeadingStars "
":END:"
msgstr ""

#. type: Plain text
#: org-mode.org:4583
msgid ""
"Org-mode has the ability to show or hide the leading stars on task "
"headlines.  It's also possible to have headlines at odd levels only so that "
"the stars and heading task names line up in sublevels."
msgstr ""

#. type: Plain text
#: org-mode.org:4585
msgid "To make org show leading stars use"
msgstr ""

#. type: Plain text
#: org-mode.org:4590
msgid ""
"#+header: :tangle yes #+begin_src emacs-lisp (setq org-hide-leading-stars "
"nil)  #+end_src"
msgstr ""

#. type: Plain text
#: org-mode.org:4596
msgid ""
"I now use org-indent mode which hides leading stars.  *** org-indent mode "
":PROPERTIES: :CUSTOM_ID: OrgIndentMode :END:"
msgstr ""

#. type: Plain text
#: org-mode.org:4600
msgid ""
"I recently started using org-indent mode.  I like this setting a lot.  It "
"removes the indentation in the org-file but displays it as if it was "
"indented while you are working on the org file buffer."
msgstr ""

#. type: Plain text
#: org-mode.org:4603
msgid ""
"org-indent mode displays as if org-odd-levels-only is true but it has a "
"really clean look that I prefer over my old setup."
msgstr ""

#. type: Plain text
#: org-mode.org:4614
msgid ""
"I have org-indent mode on by default at startup with the following setting: "
"#+header: :tangle yes #+begin_src emacs-lisp (setq org-startup-indented t)  "
"#+end_src *** Handling blank lines :PROPERTIES: :CUSTOM_ID: "
"HandlingBlankLines :END:"
msgstr ""

#. type: Plain text
#: org-mode.org:4619
msgid ""
"Blank lines are evil :).  They keep getting inserted in between headlines "
"and I don't want to see them in collapsed (contents) views.  When I use "
"=TAB= to fold (cycle) tasks I don't want to see any blank lines between "
"headings."
msgstr ""

#. type: Plain text
#: org-mode.org:4622
msgid ""
"The following setting hides blank lines between headings which keeps folded "
"view nice and compact."
msgstr ""

#. type: Plain text
#: org-mode.org:4627
msgid ""
"#+header: :tangle yes #+begin_src emacs-lisp (setq org-cycle-separator-lines "
"0)  #+end_src"
msgstr ""

#. type: Plain text
#: org-mode.org:4633
msgid ""
"I find extra blank lines in lists and headings a bit of a nuisance.  To get "
"a body after a list you need to include a blank line between the list entry "
"and the body -- and indent the body appropriately.  Most of my lists have no "
"body detail so I like the look of collapsed lists with no blank lines "
"better."
msgstr ""

#. type: Plain text
#: org-mode.org:4636
msgid ""
"The following setting prevents creating blank lines before headings but "
"allows list items to adapt to existing blank lines around the items:"
msgstr ""

#. type: Plain text
#: org-mode.org:4646
#, no-wrap
msgid ""
"#+header: :tangle yes\n"
"#+begin_src emacs-lisp\n"
"(setq org-blank-before-new-entry (quote ((heading)\n"
"                                         (plain-list-item . auto))))\n"
"#+end_src\n"
"*** Adding new tasks quickly without disturbing the current task content\n"
":PROPERTIES:\n"
":CUSTOM_ID: AddingNewTasks\n"
":END:\n"
msgstr ""

#. type: Plain text
#: org-mode.org:4650
msgid ""
"To create new headings in a project file it is really convenient to use "
"=C-RET=, =C-S-RET=, =M-RET=, and =M-S-RET=.  This inserts a new headline "
"possibly with a =TODO= keyword.  With the following setting"
msgstr ""

#. type: Plain text
#: org-mode.org:4655
msgid ""
"#+header: :tangle yes #+begin_src emacs-lisp (setq "
"org-insert-heading-respect-content nil)  #+end_src"
msgstr ""

#. type: Plain text
#: org-mode.org:4667
msgid ""
"org inserts the heading at point for the =M-= versions and respects content "
"for the =C-= versions.  The respect content setting is temporarily turned on "
"for the =C-= versions which adds the new heading after the content of the "
"current item.  This lets you hit =C-S-RET= in the middle of an entry and the "
"new heading is added after the body of the current entry but still allow you "
"to split an entry in the middle with =M-S-RET=.  *** Notes at the top "
":PROPERTIES: :CUSTOM_ID: NotesAtTop :END:"
msgstr ""

#. type: Plain text
#: org-mode.org:4681
msgid ""
"I enter notes for tasks with =C-c C-z= (or just =z= in the agenda).  "
"Changing tasks states also sometimes prompt for a note (e.g. moving to "
"=WAITING= prompts for a note and I enter a reason for why it is waiting).  "
"These notes are saved at the top of the task so unfolding the task shows the "
"note first.  #+header: :tangle yes #+begin_src emacs-lisp (setq "
"org-reverse-note-order nil)  #+end_src *** Searching and showing results "
":PROPERTIES: :CUSTOM_ID: SearchingResults :END:"
msgstr ""

#. type: Plain text
#: org-mode.org:4686
msgid ""
"Org-mode's searching capabilities are really effective at finding data in "
"your org files.  =C-c / /= does a regular expression search on the current "
"file and shows matching results in a collapsed view of the org-file."
msgstr ""

#. type: Plain text
#: org-mode.org:4690
msgid ""
"I have org-mode show the hierarchy of tasks above the matched entries and "
"also the immediately following sibling task (but not all siblings)  with the "
"following settings:"
msgstr ""

#. type: Plain text
#: org-mode.org:4697
msgid ""
"#+header: :tangle yes #+begin_src emacs-lisp (setq "
"org-show-following-heading t)  (setq org-show-hierarchy-above t)  (setq "
"org-show-siblings (quote ((default))))  #+end_src"
msgstr ""

#. type: Plain text
#: org-mode.org:4708
msgid ""
"This keeps the results of the search relatively compact and mitigates "
"accidental errors by cutting too much data from your org file with =C-k=.  "
"Cutting folded data (including the ...) can be really dangerous since it "
"cuts text (including following subtrees) which you can't see.  For this "
"reason I always show the following headline when displaying search results.  "
"*** Editing and Special key handling :PROPERTIES: :CUSTOM_ID: "
"SpecialKeyHandling :END:"
msgstr ""

#. type: Plain text
#: org-mode.org:4714
msgid ""
"Org-mode allows special handling of the C-a, C-e, and C-k keys while editing "
"headlines.  I also use the setting that pastes (yanks)  subtrees and adjusts "
"the levels to match the task I am pasting to.  See the docstring (=C-h v "
"org-yank-adjust-subtrees=) for more details on each variable and what it "
"does."
msgstr ""

#. type: Plain text
#: org-mode.org:4719
msgid ""
"I have =org-special-ctrl-a/e= set to enable easy access to the beginning and "
"end of headlines. I use =M-m= or =C-a C-a= to get to the beginning of the "
"line so the speed commands work and =C-a= to give easy access to the "
"beginning of the heading text when I need that."
msgstr ""

#. type: Plain text
#: org-mode.org:4735
msgid ""
"#+header: :tangle yes #+begin_src emacs-lisp (setq org-special-ctrl-a/e t)  "
"(setq org-special-ctrl-k t)  (setq org-yank-adjusted-subtrees t)  #+end_src "
"** Attachments :PROPERTIES: :CUSTOM_ID: Attachments :END: Attachments are "
"great for getting large amounts of data related to your project out of your "
"org-mode files.  Before attachments came along I was including huge blocks "
"of SQL code in my org files to keep track of changes I made to project "
"databases.  This bloated my org file sizes badly."
msgstr ""

#. type: Plain text
#: org-mode.org:4738
msgid ""
"Now I can create the data in a separate file and attach it to my project "
"task so it's easily located again in the future."
msgstr ""

#. type: Plain text
#: org-mode.org:4741
msgid ""
"I set up org-mode to generate unique attachment IDs with =org-id-method= as "
"follows:"
msgstr ""

#. type: Plain text
#: org-mode.org:4746
msgid ""
"#+header: :tangle yes #+begin_src emacs-lisp (setq org-id-method (quote "
"uuidgen))  #+end_src"
msgstr ""

#. type: Plain text
#: org-mode.org:4749
msgid ""
"Say you want to attach a file =x.sql= to your current task.  Create the file "
"data in =/tmp/x.sql= and save it."
msgstr ""

#. type: Plain text
#: org-mode.org:4753
msgid ""
"Attach the file with =C-c C-a a= and enter the filename: =x.sql=.  This "
"generates a unique ID for the task and adds the file in the attachment "
"directory."
msgstr ""

#. type: Plain text
#: org-mode.org:4761
#, no-wrap
msgid ""
"#+begin_src org :exports src\n"
",* Attachments                                                        "
":ATTACH:\n"
"  :PROPERTIES:\n"
"  :Attachments: x.sql\n"
"  :ID:       f1d38e9a-ff70-4cc4-ab50-e8b58b2aaa7b\n"
"  :END:  \n"
"#+end_src\n"
msgstr ""

#. type: Plain text
#: org-mode.org:4767
msgid ""
"The attached file is saved in "
"=data/f1/d38e9a-ff70-4cc4-ab50-e8b58b2aaa7b/=.  Where it goes exactly isn't "
"important for me -- as long as it is saved and retrievable easily.  Org-mode "
"copies the original file =/tmp/x.sql= into the appropriate attachment "
"directory."
msgstr ""

#. type: Plain text
#: org-mode.org:4770
msgid ""
"Tasks with attachments automatically get an =ATTACH= tag so you can easily "
"find tasks with attachments with a tag search."
msgstr ""

#. type: Plain text
#: org-mode.org:4773
msgid ""
"To open the attachment for a task use =C-c C-a o=.  This prompts for the "
"attachment to open and =TAB= completion works here."
msgstr ""

#. type: Plain text
#: org-mode.org:4775
msgid "The =ID= changes for every task header when a new =ID= is generated."
msgstr ""

#. type: Plain text
#: org-mode.org:4778
msgid ""
"It's possible to use named directories for attachments but I haven't needed "
"this functionality yet -- it's there if you need it."
msgstr ""

#. type: Plain text
#: org-mode.org:4786
msgid ""
"I store my org-mode attachments with my org files in a subdirectory =data=.  "
"These are automatically added to my =git= repository along with any other "
"org-mode changes I've made.  ** Deadlines and Agenda Visibility :PROPERTIES: "
":CUSTOM_ID: DeadlinesAndAgendaVisibility :END:"
msgstr ""

#. type: Plain text
#: org-mode.org:4789
msgid ""
"Deadlines and due dates are a fact or life.  By default I want to see "
"deadlines in the agenda 30 days before the due date."
msgstr ""

#. type: Plain text
#: org-mode.org:4791
msgid "The following setting accomplishes this:"
msgstr ""

#. type: Plain text
#: org-mode.org:4796
msgid ""
"#+header: :tangle yes #+begin_src emacs-lisp (setq org-deadline-warning-days "
"30)  #+end_src"
msgstr ""

#. type: Plain text
#: org-mode.org:4799
msgid ""
"This gives me plenty of time to deal with the task so that it is completed "
"on or before the due date."
msgstr ""

#. type: Plain text
#: org-mode.org:4804
msgid ""
"I also use deadlines for repeating tasks.  If the task repeats more often "
"than once per month it would be always bugging me on the agenda view.  For "
"these types of tasks I set an explicit deadline warning date as follows:"
msgstr ""

#. type: Plain text
#: org-mode.org:4809
#, no-wrap
msgid ""
"#+begin_src org :exports src\n"
",* TODO Pay Wages\n"
"  DEADLINE: <2009-07-01 Wed +1m -0d>   \n"
"#+end_src\n"
msgstr ""

#. type: Plain text
#: org-mode.org:4819
msgid ""
"This example repeats monthly and shows up in the agenda on the day it is due "
"(with no prior warning).  You can set any number of lead days you want on "
"DEADLINES using -Nd where N is the number of days in advance the task should "
"show up in the agenda.  If no value is specified the default "
"=org-deadline-warning-days= is used.  ** Exporting Tables to CSV "
":PROPERTIES: :CUSTOM_ID: TableExportToCSV :END:"
msgstr ""

#. type: Plain text
#: org-mode.org:4823
msgid ""
"I generate org-mode tables with details of task specifications and record "
"structures for some of my projects.  My clients like to use spreadsheets for "
"this type of detail."
msgstr ""

#. type: Plain text
#: org-mode.org:4827
msgid ""
"It's easy to share the details of the org-mode table by exporting in HTML "
"but that isn't easy for anyone else to work with if they need to edit data."
msgstr ""

#. type: Plain text
#: org-mode.org:4831
msgid ""
"To solve this problem I export my table as comma delimited values (CSV) and "
"then send that to the client (or read it into a spreadsheet and email the "
"resulting spreadsheet file)."
msgstr ""

#. type: Plain text
#: org-mode.org:4834
msgid ""
"Org-mode can export tables as TAB or comma delimited formats.  I set the "
"default format to CSV with:"
msgstr ""

#. type: Plain text
#: org-mode.org:4839
msgid ""
"#+header: :tangle yes #+begin_src emacs-lisp (setq "
"org-table-export-default-format \"orgtbl-to-csv\")  #+end_src"
msgstr ""

#. type: Plain text
#: org-mode.org:4842
msgid ""
"Exporting to CSV format is the only one I use and this provides the default "
"so I can just hit RETURN when prompted for the format."
msgstr ""

#. type: Plain text
#: org-mode.org:4846
msgid ""
"To export the following table I put the cursor inside the table and hit =M-x "
"org-table-export= which prompts for a filename and the format which defaults "
"to orgtbl-to-csv from the setting above."
msgstr ""

#. type: Plain text
#: org-mode.org:4853
#, no-wrap
msgid ""
"|   One |    Two | Three |\n"
"|-------+--------+-------|\n"
"|     1 |      1 |     2 |\n"
"|     3 |      6 |     5 |\n"
"|  fred |    kpe |  mary |\n"
"| 234.5 | 432.12 | 324.3 |\n"
msgstr ""

#. type: Plain text
#: org-mode.org:4855
msgid "This creates the file with the following data"
msgstr ""

#. type: Plain text
#: org-mode.org:4867
msgid ""
"#+begin_src csv One,Two,Three 1,1,2 3,6,5 fred,kpe,mary 234.5,432.12,324.3 "
"#+end_src ** Minimize Emacs Frames :PROPERTIES: :CUSTOM_ID: MinimizeFrames "
":END:"
msgstr ""

#. type: Plain text
#: org-mode.org:4871
msgid ""
"Links to emails, web pages, and other files are sprinkled all over my org "
"files.  The following setting control how org-mode handles opening the link."
msgstr ""

#. type: Plain text
#: org-mode.org:4877
#, no-wrap
msgid ""
"#+header: :tangle yes\n"
"#+begin_src emacs-lisp\n"
"(setq org-link-frame-setup (quote ((vm . vm-visit-folder)\n"
"                                   (gnus . org-gnus-no-new-news)\n"
"                                   (file . find-file))))\n"
msgstr ""

#. type: Plain text
#: org-mode.org:4881
msgid ""
"; Use the current window for C-c ' source editing (setq org-src-window-setup "
"'current-window)  #+end_src"
msgstr ""

#. type: Plain text
#: org-mode.org:4886
msgid ""
"I like to keep links in the same window so that I don't end up with a ton of "
"frames in my window manager.  I normally work in a full-screen window and "
"having links open in the same window just works better for me."
msgstr ""

#. type: Plain text
#: org-mode.org:4891
msgid ""
"If I need to work in multiple files I'll manually create the second frame "
"with =C-x 5 2= or split the window with =C-x 4 2= or =C-X 4 3=.  When I "
"visit files in Emacs I normally want to replace the current window with the "
"new content."
msgstr ""

#. type: Plain text
#: org-mode.org:4896
#, no-wrap
msgid ""
"** Logging stuff\n"
":PROPERTIES:\n"
":CUSTOM_ID: LoggingStuff\n"
":END:\n"
msgstr ""

#. type: Plain text
#: org-mode.org:4898
msgid "Most of my logging is controlled by the global =org-todo-keywords="
msgstr ""

#. type: Plain text
#: org-mode.org:4906
msgid ""
"My logging settings are set as follows: #+header: :tangle yes #+begin_src "
"emacs-lisp (setq org-log-done (quote time))  (setq org-log-into-drawer t)  "
"(setq org-log-state-notes-insert-after-drawers nil)  #+end_src"
msgstr ""

#. type: Plain text
#: org-mode.org:4908
msgid "My =org-todo-keywords= are set as follows:"
msgstr ""

#. type: Plain text
#: org-mode.org:4915
#, no-wrap
msgid ""
"#+header: :tangle no\n"
"#+begin_src emacs-lisp\n"
"(setq org-todo-keywords\n"
"      (quote ((sequence \"TODO(t)\" \"NEXT(n)\" \"|\" \"DONE(d)\")\n"
"              (sequence \"WAITING(w@/!)\" \"HOLD(h@/!)\" \"|\" "
"\"CANCELLED(c@/!)\" \"PHONE\" \"MEETING\"))))\n"
"#+end_src\n"
msgstr ""

#. type: Plain text
#: org-mode.org:4921
msgid ""
"This adds a log entry whenever a task moves to any of the following states: "
"- to or out of =DONE= status - to =WAITING= status (with a note) or out of "
"=WAITING= status - to =HOLD= status - to =CANCELLED= status (with a note) or "
"out of =CANCELLED= status"
msgstr ""

#. type: Plain text
#: org-mode.org:4931
msgid ""
"I keep clock times and states in the =LOGBOOK= drawer to keep my tasks "
"uncluttered.  If a task is WAITING then the reason for why it is waiting is "
"near the top of the LOGBOOK and unfolding the LOGBOOK drawer provides that "
"information.  From the agenda simply hitting =SPC= on the task will reveal "
"the LOGBOOK drawer.  ** Limiting time spent on tasks :PROPERTIES: "
":CUSTOM_ID: LimitingTimeSpentOnTasks :END:"
msgstr ""

#. type: Plain text
#: org-mode.org:4935
msgid ""
"Org-mode has this great new feature for signalling alarms when the estimated "
"time for a task is reached.  I use this to limit the amount of time I spend "
"on a task during the day."
msgstr ""

#. type: Plain text
#: org-mode.org:4941
msgid ""
"As an example, I've been working on this document for over two months now.  "
"I want to get it finished but I can't just work on it solely until it's done "
"because then nothing else gets done.  I want to do a little bit every day "
"but limit the total amount of time I spend documenting org-mode to an hour a "
"day."
msgstr ""

#. type: Plain text
#: org-mode.org:4943
msgid "To this end I have a task"
msgstr ""

#. type: Plain text
#: org-mode.org:4952
#, no-wrap
msgid ""
"#+begin_src org :exports src\n"
",* NEXT Document my use of org-mode\n"
"  :LOGBOOK:...\n"
"  :PROPERTIES:\n"
"  :CLOCK_MODELINE_TOTAL: today\n"
"  :Effort:   1:00\n"
"  :END:  \n"
"#+end_src\n"
msgstr ""

#. type: Plain text
#: org-mode.org:4955
msgid ""
"The task has an estimated effort of 1 hour and when I clock in the task it "
"gives me a total in the mode-line like this"
msgstr ""

#. type: Plain text
#: org-mode.org:4957
#, no-wrap
msgid ""
": --:**  org-mode.org   91% (2348,73) Git:master  (Org Fly yas "
"Font)-----[0:35/1:00 (Document my use of org-mode)]-------\n"
msgstr ""

#. type: Plain text
#: org-mode.org:4960
msgid ""
"I've spent 35 minutes of my 1 hour so far today on this document and other "
"help on IRC."
msgstr ""

#. type: Plain text
#: org-mode.org:4963
msgid ""
"I set up an alarm so the Star Trek door chime goes off when the total "
"estimated time is hit.  (Yes I'm a Trekkie :) )"
msgstr ""

#. type: Plain text
#: org-mode.org:4968
msgid ""
"#+header: :tangle yes #+begin_src emacs-lisp (setq org-clock-sound "
"\"/usr/local/lib/tngchime.wav\")  #+end_src"
msgstr ""

#. type: Plain text
#: org-mode.org:4974
msgid ""
"When the one hour time limit is hit the alarm sound goes off and a message "
"states that I should be done working on this task.  If I switch tasks and "
"try to clock in this task again I get the sound each and every time I clock "
"in the task.  This nags me to go work on something else :)"
msgstr ""

#. type: Plain text
#: org-mode.org:4984
msgid ""
"You can use similar setups for repeated tasks.  By default the last repeat "
"time is recorded as a property when a repeating task is marked done.  For "
"repeating tasks the mode-line clock total counts since the last repeat time "
"by default.  This lets you accumulate time over multiple days and counts "
"towards your estimated effort limit.  ** Habit Tracking :PROPERTIES: "
":CUSTOM_ID: HabitTracking :END:"
msgstr ""

#. type: Plain text
#: org-mode.org:4986
msgid "John Wiegley recently added support for Habit tracking to org-mode."
msgstr ""

#. type: Plain text
#: org-mode.org:4991
msgid ""
"I have lots of habits (some bad) but I'd still like to improve and build new "
"good habits.  This is what habit tracking is for.  It shows a graph on the "
"agenda of how well you have been doing on developing your habits."
msgstr ""

#. type: Plain text
#: org-mode.org:4993
msgid "I have habits like:"
msgstr ""

#. type: Plain text
#: org-mode.org:4997
msgid "- Hand wash the dishes - 30 minute brisk walk - Clean the house"
msgstr ""

#. type: Plain text
#: org-mode.org:5000
msgid ""
"etc. and most of these need a push to get done regularly.  Logging of the "
"done state needs to be enabled for habit tracking to work."
msgstr ""

#. type: Plain text
#: org-mode.org:5003
msgid ""
"A habit is just like a regular task except it has a special =PROPERTY= value "
"setting and a special =SCHEDULED= date entry like this:"
msgstr ""

#. type: Plain text
#: org-mode.org:5012
#, no-wrap
msgid ""
"#+begin_src org :exports src\n"
",* TODO Update Org Mode Doc\n"
"  SCHEDULED: <2009-11-21 Sat .+7d/30d>\n"
"  [2009-11-14 Sat 11:45]\n"
"  :PROPERTIES:\n"
"  :STYLE: habit\n"
"  :END:  \n"
"#+end_src\n"
msgstr ""

#. type: Plain text
#: org-mode.org:5017
msgid ""
"This marks the task as a habit and separates it from the regular task "
"display on the agenda.  When you mark a habit done it shows up on your daily "
"agenda the next time based on the first interval in the SCHEDULED entry "
"(=.+7d=)"
msgstr ""

#. type: Plain text
#: org-mode.org:5022
msgid ""
"The special =SCHEDULED= entry states that I want to do this every day but at "
"least every 2 days.  If I go 3 days without marking it DONE it shows up RED "
"on the agenda indicating that I have been neglecting this habit."
msgstr ""

#. type: Plain text
#: org-mode.org:5025
msgid ""
"The world isn't going to end if you neglect your habits.  You can hide and "
"display habits quickly using the =K= key on the agenda."
msgstr ""

#. type: Plain text
#: org-mode.org:5027
msgid "These are my settings for habit tracking."
msgstr ""

#. type: Plain text
#: org-mode.org:5048
#, no-wrap
msgid ""
"#+header: :tangle yes\n"
"#+begin_src emacs-lisp\n"
"; Enable habit tracking (and a bunch of other modules)\n"
"(setq org-modules (quote (org-bbdb\n"
"                          org-bibtex\n"
"                          org-crypt\n"
"                          org-gnus\n"
"                          org-id\n"
"                          org-info\n"
"                          org-jsinfo\n"
"                          org-habit\n"
"                          org-inlinetask\n"
"                          org-irc\n"
"                          org-mew\n"
"                          org-mhe\n"
"                          org-protocol\n"
"                          org-rmail\n"
"                          org-vm\n"
"                          org-wl\n"
"                          org-w3m)))\n"
msgstr ""

#. type: Plain text
#: org-mode.org:5052
msgid ""
"; position the habit graph on the agenda to the right of the default (setq "
"org-habit-graph-column 50)  #+end_src"
msgstr ""

#. type: Plain text
#: org-mode.org:5059
msgid ""
"During the day I'll turn off the habit display in the agenda with =K=.  This "
"is a persistent setting and since I leave my Emacs running for days at a "
"time my habit display doesn't come back.  To make sure I look at the habits "
"daily I have the following settings to redisplay the habits in the agenda "
"each day.  This turns the habit display on again at 6AM each morning."
msgstr ""

#. type: Plain text
#: org-mode.org:5068
msgid ""
"#+header: :tangle yes #+begin_src emacs-lisp (run-at-time \"06:00\" 86400 "
"'(lambda () (setq org-habit-show-habits t)))  #+end_src ** Habits only log "
"DONE state changes :PROPERTIES: :CUSTOM_ID: HabitsLogDone :END:"
msgstr ""

#. type: Plain text
#: org-mode.org:5076
msgid ""
"I tend to keep habits under a level 1 task =* Habits= with a special logging "
"property that only logs changes to the =DONE= state.  This allows me to "
"cancel a habit and not record a timestamp for it since that messes up the "
"habit graph.  Cancelling a habit just to get it off my agenda because it's "
"undoable (like get up before 6AM) should not mark the habit as done today.  "
"I only cancel habits that repeat every day."
msgstr ""

#. type: Plain text
#: org-mode.org:5090
#, no-wrap
msgid ""
"My habit tasks look as follows - and I tend to have one in every org\n"
"file that can have habits defined\n"
"#+begin_src org :exports src\n"
",* Habits\n"
"  :PROPERTIES:\n"
"  :LOGGING:  DONE(!)\n"
"  :ARCHIVE:  %s_archive::* Habits\n"
"  :END:  \n"
"#+end_src\n"
"** Auto revert mode\n"
":PROPERTIES:\n"
":CUSTOM_ID: AutoRevertMode\n"
":END:\n"
msgstr ""

#. type: Plain text
#: org-mode.org:5096
msgid ""
"I use git to synchronize my org-mode files between my laptop and my "
"workstation.  This normally requires saving all the current changes, pushing "
"to a bare repo, and fetching on the other system.  After that I need to "
"revert all of my org-mode files to get the updated information."
msgstr ""

#. type: Plain text
#: org-mode.org:5101
msgid ""
"I used to use =org-revert-all-org-buffers= but have since discovered "
"=global-auto-revert-mode=.  With this setting any files that change on disk "
"where there are no changes in the buffer automatically revert to the on-disk "
"version."
msgstr ""

#. type: Plain text
#: org-mode.org:5103
msgid "This is perfect for synchronizing my org-mode files between systems."
msgstr ""

#. type: Plain text
#: org-mode.org:5112
msgid ""
"#+header: :tangle yes #+begin_src emacs-lisp (global-auto-revert-mode t)  "
"#+end_src ** Handling Encryption :PROPERTIES: :CUSTOM_ID: HandlingEncryption "
":END:"
msgstr ""

#. type: Plain text
#: org-mode.org:5117
msgid ""
"I used to keep my encrypted data like account passwords in a separate GPG "
"encrypted file.  Now I keep them in my org-mode files with a special tag "
"instead.  Encrypted data is kept in the org-mode file that it is associated "
"with."
msgstr ""

#. type: Plain text
#: org-mode.org:5122
msgid ""
"=org-crypt= allows you to tag headings with a special tag =crypt= and "
"org-mode can keep data in these headings encrypted when saved to disk.  You "
"decrypt the heading temporarily when you need access to the data and "
"org-mode re-encrypts the heading as soon as you save the file."
msgstr ""

#. type: Plain text
#: org-mode.org:5133
msgid ""
"I use the following setup for encryption: #+header: :tangle yes #+begin_src "
"emacs-lisp (require 'org-crypt)  ; Encrypt all entries before saving "
"(org-crypt-use-before-save-magic)  (setq org-tags-exclude-from-inheritance "
"(quote (\"crypt\")))  ; GPG key to use for encryption (setq org-crypt-key "
"\"F0B66B40\")  #+end_src"
msgstr ""

#. type: Plain text
#: org-mode.org:5140
msgid ""
"=M-x org-decrypt-entry= will prompt for the passphrase associated with your "
"encryption key and replace the encrypted data where the point is with the "
"plaintext details for your encrypted entry.  As soon as you save the file "
"the data is re-encrypted for your key.  Encrypting does not require "
"prompting for the passphrase - that's only for looking at the plain text "
"version of the data."
msgstr ""

#. type: Plain text
#: org-mode.org:5146
msgid ""
"I tend to have a single level 1 encrypted entry per file (like =* "
"Passwords=).  I prevent the =crypt= tag from using inheritance so that I "
"don't have encrypted data inside encrypted data.  I found =M-x "
"org-decrypt-entries= prompting for the passphrase to decrypt data over and "
"over again (once per entry to decrypt) too inconvenient."
msgstr ""

#. type: Plain text
#: org-mode.org:5155
msgid ""
"I leave my entries encrypted unless I have to look up data - I decrypt on "
"demand and then save the file again to re-encrypt the data.  This keeps the "
"data in plain text as short as possible.  *** Auto Save Files :PROPERTIES: "
":CUSTOM_ID: AutoSaveFiles :END: [2011-09-26 Mon 04:57]"
msgstr ""

#. type: Plain text
#: org-mode.org:5162
msgid ""
"Emacs temporarily saves your buffer in an autosave file while you are "
"editing your org buffer and a sufficient number of changes have "
"accumulated.  If you have decrypted subtrees in your buffer these will be "
"written to disk in plain text which possibly leaks sensitive information.  "
"To combat this org-mode now asks if you want to disable the autosave "
"functionality in this buffer."
msgstr ""

#. type: Plain text
#: org-mode.org:5169
msgid ""
"Personally I really like the autosave feature.  99% of the time my encrypted "
"entries are perfectly safe to write to the autosave file since they are "
"still encrypted.  I tend to decrypt an entry, read the details for what I "
"need to look up and then immediately save the file again with =C-x C-s= "
"which re-encrypts the entry immediately.  This pretty much guarantees that "
"my autosave files never have decrypted data stored in them."
msgstr ""

#. type: Plain text
#: org-mode.org:5179
msgid ""
"I disable the default org crypt auto-save setting as follows: #+header: "
":tangle yes #+begin_src emacs-lisp (setq org-crypt-disable-auto-save nil)  "
"#+end_src ** Speed Commands :PROPERTIES: :CUSTOM_ID: SpeedCommands :END:"
msgstr ""

#. type: Plain text
#: org-mode.org:5182
msgid "There's an exciting feature called =org-speed-commands= in the org-mode."
msgstr ""

#. type: Plain text
#: org-mode.org:5187
msgid ""
"Speed commands allow access to frequently used commands when on the "
"beginning of a headline - similar to one-key agenda commands.  Speed "
"commands are user configurable and org-mode provides a good set of default "
"commands."
msgstr ""

#. type: Plain text
#: org-mode.org:5192
msgid ""
"I have the following speed commands set up in addition to the defaults.  I "
"don't use priorities so I override the default settings for the 1, 2, and 3 "
"keys.  I also disable cycling with 'c' and add 'q' as a quick way to get "
"back to the agenda and update the current view."
msgstr ""

#. type: Plain text
#: org-mode.org:5206
#, no-wrap
msgid ""
"#+header: :tangle yes\n"
"#+begin_src emacs-lisp\n"
"(setq org-use-speed-commands t)\n"
"(setq org-speed-commands-user (quote ((\"0\" . ignore)\n"
"                                      (\"1\" . ignore)\n"
"                                      (\"2\" . ignore)\n"
"                                      (\"3\" . ignore)\n"
"                                      (\"4\" . ignore)\n"
"                                      (\"5\" . ignore)\n"
"                                      (\"6\" . ignore)\n"
"                                      (\"7\" . ignore)\n"
"                                      (\"8\" . ignore)\n"
"                                      (\"9\" . ignore)\n"
msgstr ""

#. type: Plain text
#: org-mode.org:5223
#, no-wrap
msgid ""
"                                      (\"a\" . ignore)\n"
"                                      (\"d\" . ignore)\n"
"                                      (\"h\" . bh/hide-other)\n"
"                                      (\"i\" progn\n"
"                                       (forward-char 1)\n"
"                                       (call-interactively "
"'org-insert-heading-respect-content))\n"
"                                      (\"k\" "
". org-kill-note-or-show-branches)\n"
"                                      (\"l\" . ignore)\n"
"                                      (\"m\" . ignore)\n"
"                                      (\"q\" . bh/show-org-agenda)\n"
"                                      (\"r\" . ignore)\n"
"                                      (\"s\" . org-save-all-org-buffers)\n"
"                                      (\"w\" . org-refile)\n"
"                                      (\"x\" . ignore)\n"
"                                      (\"y\" . ignore)\n"
"                                      (\"z\" . org-add-note)\n"
msgstr ""

#. type: Plain text
#: org-mode.org:5246
#, no-wrap
msgid ""
"                                      (\"A\" . ignore)\n"
"                                      (\"B\" . ignore)\n"
"                                      (\"E\" . ignore)\n"
"                                      (\"F\" "
". bh/restrict-to-file-or-follow)\n"
"                                      (\"G\" . ignore)\n"
"                                      (\"H\" . ignore)\n"
"                                      (\"J\" . org-clock-goto)\n"
"                                      (\"K\" . ignore)\n"
"                                      (\"L\" . ignore)\n"
"                                      (\"M\" . ignore)\n"
"                                      (\"N\" . bh/narrow-to-org-subtree)\n"
"                                      (\"P\" . bh/narrow-to-org-project)\n"
"                                      (\"Q\" . ignore)\n"
"                                      (\"R\" . ignore)\n"
"                                      (\"S\" . ignore)\n"
"                                      (\"T\" . bh/org-todo)\n"
"                                      (\"U\" . bh/narrow-up-one-org-level)\n"
"                                      (\"V\" . ignore)\n"
"                                      (\"W\" . bh/widen)\n"
"                                      (\"X\" . ignore)\n"
"                                      (\"Y\" . ignore)\n"
"                                      (\"Z\" . ignore))))\n"
msgstr ""

#. type: Plain text
#: org-mode.org:5254
#, no-wrap
msgid ""
"(defun bh/show-org-agenda ()\n"
"  (interactive)\n"
"  (if org-agenda-sticky\n"
"      (switch-to-buffer \"*Org Agenda( )*\")\n"
"    (switch-to-buffer \"*Org Agenda*\"))\n"
"  (delete-other-windows))\n"
"#+end_src\n"
msgstr ""

#. type: Plain text
#: org-mode.org:5258
msgid ""
"The variable =org-speed-commands-default= sets a lot of useful defaults for "
"speed command keys.  The default keys I use the most are =I= and =O= for "
"clocking in and out and =t= to change todo state."
msgstr ""

#. type: Plain text
#: org-mode.org:5260
msgid "=J= jumps to the current or last clocking task."
msgstr ""

#. type: Plain text
#: org-mode.org:5269
msgid ""
"=c= and =C= are disabled so they self insert.  I use =TAB= and =S-TAB= for "
"cycling - I don't need =c= and =C= as well.  =TAB= works everywhere while "
"=c= and =C= only works on the headline and sometimes I accidentally cycle "
"when I don't intend to.  ** Org Protocol :PROPERTIES: :CUSTOM_ID: "
"OrgProtocol :END:"
msgstr ""

#. type: Plain text
#: org-mode.org:5273
msgid ""
"[[http://orgmode.org/worg/org-contrib/org-protocol.php][Org protocol]] is a "
"great way to create capture notes in org-mode from other applications.  I "
"use this to create tasks to review interesting web pages I visit in Firefox."
msgstr ""

#. type: Plain text
#: org-mode.org:5276
msgid ""
"I have a special capture template set up for org-protocol to use (set up "
"with the =w= key)."
msgstr ""

#. type: Plain text
#: org-mode.org:5287
msgid ""
"My org-mode setup for org-protocol is really simple.  It enables "
"org-protocol and creates a single org-protocol capture template as described "
"in [[#CaptureTemplates][Capture Templates]].  #+header: :tangle yes "
"#+begin_src emacs-lisp (require 'org-protocol)  #+end_src The bulk of the "
"setup is in the Firefox application so that C-c c on a page in Firefox will "
"trigger the org-protocol capture template with details of the page I'm "
"currently viewing in firefox."
msgstr ""

#. type: Plain text
#: org-mode.org:5293
msgid ""
"I set up org-protocol in firefox as described in "
"[[http://orgmode.org/worg/org-contrib/org-protocol.php#sec-9][Keybindings "
"for Firefox]].  ** Require a final newline when saving files :PROPERTIES: "
":CUSTOM_ID: RequireFinalNewline :END:"
msgstr ""

#. type: Plain text
#: org-mode.org:5299
msgid ""
"The following setting was mainly for editing yasnippets where I want to be "
"able to expand a snippet but stay on the same line.  I used this mainly for "
"replacing short strings or initials with full names for people during "
"meeting notes.  I now use =abbrev-mode-= for this and no longer need this "
"setting."
msgstr ""

#. type: Plain text
#: org-mode.org:5304
msgid ""
"#+header: :tangle no #+begin_src emacs-lisp (setq require-final-newline nil)  "
"#+end_src"
msgstr ""

#. type: Plain text
#: org-mode.org:5307
msgid ""
"When I save a file in Emacs I want a final newline - this fits better with "
"the source code projects I work on.  This is the setting I use now:"
msgstr ""

#. type: Plain text
#: org-mode.org:5316
msgid ""
"#+header: :tangle yes #+begin_src emacs-lisp (setq require-final-newline t)  "
"#+end_src ** Insert inactive timestamps and exclude from export :PROPERTIES: "
":CUSTOM_ID: InsertInactiveTimestamps :END:"
msgstr ""

#. type: Plain text
#: org-mode.org:5318
msgid "I insert inactive timestamps when working on org-mode files."
msgstr ""

#. type: Plain text
#: org-mode.org:5321
msgid ""
"For remember tasks the timestamp is in the remember template but for regular "
"structure editing I want the timestamp automatically added when I create the "
"headline."
msgstr ""

#. type: Plain text
#: org-mode.org:5324
msgid ""
"I have a function that is run by an org-mode hook to automatically insert "
"the inactive timestamp whenever a headline is created."
msgstr ""

#. type: Plain text
#: org-mode.org:5327
msgid ""
"Adding the timestamp can be controlled by =f9 T= which toggles the creation "
"of the timestamp on and off for new headlines."
msgstr ""

#. type: Plain text
#: org-mode.org:5332
msgid ""
"#+header: :tangle yes #+begin_src emacs-lisp (defvar "
"bh/insert-inactive-timestamp t)"
msgstr ""

#. type: Plain text
#: org-mode.org:5337
#, no-wrap
msgid ""
"(defun bh/toggle-insert-inactive-timestamp ()\n"
"  (interactive)\n"
"  (setq bh/insert-inactive-timestamp (not bh/insert-inactive-timestamp))\n"
"  (message \"Heading timestamps are %s\" (if bh/insert-inactive-timestamp "
"\"ON\" \"OFF\")))\n"
msgstr ""

#. type: Plain text
#: org-mode.org:5341 org-mode.org:5345
#, no-wrap
msgid ""
"(defun bh/insert-inactive-timestamp ()\n"
"  (interactive)\n"
"  (org-insert-time-stamp nil t t nil nil nil))\n"
msgstr ""

#. type: Plain text
#: org-mode.org:5352
#, no-wrap
msgid ""
"(defun bh/insert-heading-inactive-timestamp ()\n"
"  (save-excursion\n"
"    (when bh/insert-inactive-timestamp\n"
"      (org-return)\n"
"      (org-cycle)\n"
"      (bh/insert-inactive-timestamp))))\n"
msgstr ""

#. type: Plain text
#: org-mode.org:5355
msgid ""
"(add-hook 'org-insert-heading-hook 'bh/insert-heading-inactive-timestamp "
"'append)  #+end_src"
msgstr ""

#. type: Plain text
#: org-mode.org:5358
msgid ""
"Everytime I create a heading with =M-RET= or =M-S-RET= the hook invokes the "
"function and it inserts an inactive timestamp like this"
msgstr ""

#. type: Plain text
#: org-mode.org:5363
#, no-wrap
msgid ""
"#+begin_src org :exports src\n"
",* <point here>\n"
"  [2009-11-22 Sun 18:45]  \n"
"#+end_src\n"
msgstr ""

#. type: Plain text
#: org-mode.org:5365
msgid ""
"This keeps an automatic record of when tasks are created which I find very "
"useful."
msgstr ""

#. type: Plain text
#: org-mode.org:5368
msgid ""
"I also have a short cut key defined to invoke this function on demand so "
"that I can insert the inactive timestamp anywhere on demand."
msgstr ""

#. type: Plain text
#: org-mode.org:5373
msgid ""
"#+header: :tangle no #+begin_src emacs-lisp (global-set-key (kbd \"<f9> t\") "
"'bh/insert-inactive-timestamp)  #+end_src"
msgstr ""

#. type: Plain text
#: org-mode.org:5375
msgid ""
"To prevent the timestamps from being exported in documents I use the "
"following setting"
msgstr ""

#. type: Plain text
#: org-mode.org:5384
msgid ""
"#+header: :tangle yes #+begin_src emacs-lisp (setq "
"org-export-with-timestamps nil)  #+end_src ** Return follows links "
":PROPERTIES: :CUSTOM_ID: ReturnFollowsLink :END:"
msgstr ""

#. type: Plain text
#: org-mode.org:5391
msgid ""
"The following setting make =RET= insert a new line instead of opening "
"links.  This setting is a love-hate relationship for me.  When it first came "
"out I immediately turned it off because I wanted to insert new lines in "
"front of my links and =RET= would open the link instead which at the time I "
"found extremely annoying.  Since then I've retrained my fingers to hit RET "
"at the end of the previous line."
msgstr ""

#. type: Plain text
#: org-mode.org:5400
msgid ""
"#+header: :tangle yes #+begin_src emacs-lisp (setq org-return-follows-link "
"t)  #+end_src ** Highlight clock when running overtime :PROPERTIES: "
":CUSTOM_ID: HighlightClockOvertime :END:"
msgstr ""

#. type: Plain text
#: org-mode.org:5404
msgid ""
"The current clocking task is displayed on the modeline.  If this has an "
"estimated time and we run over the limit I make this stand out on the "
"modeline by changing the background to red as follows"
msgstr ""

#. type: Plain text
#: org-mode.org:5418
#, no-wrap
msgid ""
"#+header: :tangle yes\n"
"#+begin_src emacs-lisp\n"
"(custom-set-faces\n"
"  ;; custom-set-faces was added by Custom.\n"
"  ;; If you edit it by hand, you could mess it up, so be careful.\n"
"  ;; Your init file should contain only one such instance.\n"
"  ;; If there is more than one, they won't work right.\n"
" '(org-mode-line-clock ((t (:foreground \"red\" :box (:line-width -1 :style "
"released-button)))) t))\n"
"#+end_src\n"
"** Meeting Notes\n"
":PROPERTIES:\n"
":CUSTOM_ID: MeetingNotes\n"
":END:\n"
msgstr ""

#. type: Plain text
#: org-mode.org:5422
msgid ""
"I take meeting notes with org-mode.  I record meeting conversations in "
"point-form using org-mode lists.  If action items are decided on in the "
"meeting I'll denote them with a bullet and a TODO: or DONE: flag."
msgstr ""

#. type: Plain text
#: org-mode.org:5427
msgid ""
"A meeting is a task and it is complete when the meeting is over.  The body "
"of the task records all of the interesting meeting details.  If TODO items "
"are created in the meeting I make separate TODO tasks from those."
msgstr ""

#. type: Plain text
#: org-mode.org:5435
msgid ""
"I use the function =bh/prepare-meeting-notes= to prepare the meeting notes "
"for emailing to the participants (in a fixed-width font like \"Courier "
"New\").  As soon as the meeting is over the notes are basically ready for "
"distribution -- there's not need to waste lots of time rewriting the minutes "
"before they go out.  I haven't bothered with fancy HTML output -- the "
"content is more important than the style."
msgstr ""

#. type: Plain text
#: org-mode.org:5456
#, no-wrap
msgid ""
"#+begin_src org :exports src\n"
",* TODO Sample Meeting\n"
"  - Attendees\n"
"    - [ ] Joe\n"
"    - [X] Larry\n"
"    - [X] Mary\n"
"    - [X] Fred\n"
"  - Joe is on vacation this week\n"
"  - Status Updates\n"
"    + Larry\n"
"      - did this\n"
"      - and that\n"
"      - TODO: Needs to follow up on this\n"
"    + Mary\n"
"      - got a promotion for her recent efforts\n"
"    + Fred\n"
"      - completed all his tasks 2 days early\n"
"      - needs more work\n"
"      - DONE: everything  \n"
"#+end_src\n"
msgstr ""

#. type: Plain text
#: org-mode.org:5477
#, no-wrap
msgid ""
"#+begin_src org :exports src\n"
",* TODO Sample Meeting\n"
"   - Attendees\n"
"     - [ ] Joe\n"
"     - [X] Larry\n"
"     - [X] Mary\n"
"     - [X] Fred\n"
"   - Joe is on vacation this week\n"
"   - Status Updates\n"
"     + Larry\n"
"       - did this\n"
"       - and that\n"
">>>>>>>> TODO: Needs to follow up on this\n"
"     + Mary\n"
"       - got a promotion for her recent efforts\n"
"     + Fred\n"
"       - completed all his tasks 2 days early\n"
"       - needs more work\n"
">>>>>>>> DONE: everything  \n"
"#+end_src\n"
msgstr ""

#. type: Plain text
#: org-mode.org:5482
msgid ""
"Here is the formatting function.  Just highlight the region for the notes "
"and it turns tabs into spaces, and highlights todo items.  The resulting "
"notes are in the kill buffer ready to paste to another application."
msgstr ""

#. type: Plain text
#: org-mode.org:5504
#, no-wrap
msgid ""
"#+header: :tangle yes\n"
"#+begin_src emacs-lisp\n"
"(defun bh/prepare-meeting-notes ()\n"
"  \"Prepare meeting notes for email\n"
"   Take selected region and convert tabs to spaces, mark TODOs with leading "
">>>, and copy to kill ring for pasting\"\n"
"  (interactive)\n"
"  (let (prefix)\n"
"    (save-excursion\n"
"      (save-restriction\n"
"        (narrow-to-region (region-beginning) (region-end))\n"
"        (untabify (point-min) (point-max))\n"
"        (goto-char (point-min))\n"
"        (while (re-search-forward \"^\\\\( *-\\\\\\) "
"\\\\(TODO\\\\|DONE\\\\): \" (point-max) t)\n"
"          (replace-match (concat (make-string (length (match-string 1)) ?>) "
"\" \" (match-string 2) \": \")))\n"
"        (goto-char (point-min))\n"
"        (kill-ring-save (point-min) (point-max))))))\n"
"#+end_src\n"
"** Remove Highlights after changes\n"
":PROPERTIES:\n"
":CUSTOM_ID: HighlightPersistAfterEdit\n"
":END:\n"
msgstr ""

#. type: Plain text
#: org-mode.org:5510
msgid ""
"I'm finding I use org-occur =C-c / /= a lot when trying to find details in "
"my org-files.  The following setting keeps the highlighted results of the "
"search even after modifying the text.  This allows me to edit the file "
"without having to reissue the org-occur command to find the other matches in "
"my file. =C-c C-c= removes the highlights."
msgstr ""

#. type: Plain text
#: org-mode.org:5515
msgid ""
"#+header: :tangle no #+begin_src emacs-lisp (setq "
"org-remove-highlights-with-change nil)  #+end_src"
msgstr ""

#. type: Plain text
#: org-mode.org:5518
msgid ""
"Setting this variable to t will automatically remove the yellow highlights "
"as soon as the buffer is modified."
msgstr ""

#. type: Plain text
#: org-mode.org:5522
msgid ""
"I've gone back to automatically removing the highlights with change which is "
"the default setting.  I've been using regular =M-x occur= a lot more lately "
"to find things in any Emacs buffer."
msgstr ""

#. type: Plain text
#: org-mode.org:5527
msgid ""
"#+header: :tangle yes #+begin_src emacs-lisp (setq "
"org-remove-highlights-with-change t)  #+end_src"
msgstr ""

#. type: Plain text
#: org-mode.org:5533
#, no-wrap
msgid ""
"** Getting up to date org-mode info documentation\n"
":PROPERTIES:\n"
":CUSTOM_ID: OrgModeInfoDocumentation\n"
":END:\n"
msgstr ""

#. type: Plain text
#: org-mode.org:5537
msgid ""
"I use the org-mode info documentation from the git repository so I set up "
"emacs to find the info files from git before the regular (out of date) "
"system versions."
msgstr ""

#. type: Plain text
#: org-mode.org:5546
msgid ""
"#+header: :tangle yes #+begin_src emacs-lisp (add-to-list "
"'Info-default-directory-list \"~/git/org-mode/doc\")  #+end_src ** Prefer "
"future dates or not? :PROPERTIES: :CUSTOM_ID: FutureDates :END:"
msgstr ""

#. type: Plain text
#: org-mode.org:5553
msgid ""
"By default org-mode prefers dates in the future.  This means that if today's "
"date is May 2 and you enter a date for April 30th (2 days ago)  org-mode "
"will jump to April 30th of next year.  I used to find this annoying when I "
"wanted to look at what happened last Friday since I have to specify the "
"year.  Now I've trained my fingers to go back relatively in the agenda with "
"=b= so this isn't really an issue for me anymore."
msgstr ""

#. type: Plain text
#: org-mode.org:5560
msgid ""
"To make org-mode prefer the current year when entering dates set the "
"following variable #+header: :tangle no #+begin_src emacs-lisp (setq "
"org-read-date-prefer-future nil)  #+end_src"
msgstr ""

#. type: Plain text
#: org-mode.org:5563
msgid ""
"I now have this variable set to ='time= so times before now (with no date "
"specified) will default to tomorrow.."
msgstr ""

#. type: Plain text
#: org-mode.org:5572
msgid ""
"#+header: :tangle yes #+begin_src emacs-lisp (setq "
"org-read-date-prefer-future 'time)  #+end_src ** Automatically change list "
"bullets :PROPERTIES: :CUSTOM_ID: ListBullets :END:"
msgstr ""

#. type: Plain text
#: org-mode.org:5576
msgid ""
"I take point-form notes during meetings.  Having the same list bullet for "
"every list level makes it hard to read the details when lists are indented "
"more than 3 levels."
msgstr ""

#. type: Plain text
#: org-mode.org:5579
msgid ""
"Org-mode has a way to automatically change the list bullets when you change "
"list levels."
msgstr ""

#. type: Plain text
#: org-mode.org:5594
#, no-wrap
msgid ""
"| Current List Bullet | Next indented list bullet |\n"
"|---------------------+---------------------------|\n"
"| +                   | -                         |\n"
"| *                   | -                         |\n"
"| 1.                  | -                         |\n"
"| 1)                  | -                         |\n"
"| A)                  | -                         |\n"
"| B)                  | -                         |\n"
"| a)                  | -                         |\n"
"| b)                  | -                         |\n"
"| A.                  | -                         |\n"
"| B.                  | -                         |\n"
"| a.                  | -                         |\n"
"| b.                  | -                         |\n"
msgstr ""

#. type: Plain text
#: org-mode.org:5614
#, no-wrap
msgid ""
"#+header: :tangle yes\n"
"#+begin_src emacs-lisp\n"
"(setq org-list-demote-modify-bullet (quote ((\"+\" . \"-\")\n"
"                                            (\"*\" . \"-\")\n"
"                                            (\"1.\" . \"-\")\n"
"                                            (\"1)\" . \"-\")\n"
"                                            (\"A)\" . \"-\")\n"
"                                            (\"B)\" . \"-\")\n"
"                                            (\"a)\" . \"-\")\n"
"                                            (\"b)\" . \"-\")\n"
"                                            (\"A.\" . \"-\")\n"
"                                            (\"B.\" . \"-\")\n"
"                                            (\"a.\" . \"-\")\n"
"                                            (\"b.\" . \"-\"))))\n"
"#+end_src\n"
"** Remove indentation on agenda tags view\n"
":PROPERTIES:\n"
":CUSTOM_ID: IndentationOnTagsView\n"
":END:\n"
msgstr ""

#. type: Plain text
#: org-mode.org:5618
msgid ""
"I don't like the indented view for sublevels on a tags match in the agenda "
"but I want to see all matching tasks (including sublevels) when I do a "
"agenda tag search (=F12 m=)."
msgstr ""

#. type: Plain text
#: org-mode.org:5629
msgid ""
"To make all of the matched headings for a tag show at the same level in the "
"agenda set the following variable: #+header: :tangle yes #+begin_src "
"emacs-lisp (setq org-tags-match-list-sublevels t)  #+end_src ** Fontify "
"source blocks natively :PROPERTIES: :CUSTOM_ID: FontifySrcBlocksNatively "
":END:"
msgstr ""

#. type: Plain text
#: org-mode.org:5631
msgid "I use babel for including source blocks in my documents with"
msgstr ""

#. type: Plain text
#: org-mode.org:5637
msgid "#+begin_src org :exports src ,#+begin_src LANG , ...  ,#+end_src #+end_src"
msgstr ""

#. type: Plain text
#: org-mode.org:5641
msgid ""
"where LANG specifies the language to use (ditaa, dot, sh, emacs-lisp, etc)  "
"This displays the language contents fontified in both the org-mode source "
"buffer and the exported document."
msgstr ""

#. type: Plain text
#: org-mode.org:5647
msgid ""
"See this [[#git-sync][Git Repository synchronization]] in this document for "
"an example..  ** Agenda persistent filters :PROPERTIES: :CUSTOM_ID: "
"AgendaPersistentFilters :END:"
msgstr ""

#. type: Plain text
#: org-mode.org:5651
msgid ""
"This is a great feature! Persistent agenda filters means if you limit a "
"search with =/ TAB SomeTag= the agenda remembers this filter until you "
"change it."
msgstr ""

#. type: Plain text
#: org-mode.org:5653
msgid "Enable persistent filters with the following variable"
msgstr ""

#. type: Plain text
#: org-mode.org:5658
msgid ""
"#+header: :tangle yes #+begin_src emacs-lisp (setq "
"org-agenda-persistent-filter t)  #+end_src"
msgstr ""

#. type: Plain text
#: org-mode.org:5661
msgid ""
"The current filter is displayed in the modeline as ={+SomeTag}= so you can "
"easily see what filter currently applies to your agenda view."
msgstr ""

#. type: Plain text
#: org-mode.org:5668
msgid ""
"I use this with =FILETAGS= to limit the displayed results to a single client "
"or context.  ** Add tags for flagged entries :PROPERTIES: :CUSTOM_ID: "
"TagFlaggedEntries :END:"
msgstr ""

#. type: Plain text
#: org-mode.org:5672
msgid ""
"Everyone so often something will come along that is really important and you "
"know you want to be able to find it back fast sometime in the future."
msgstr ""

#. type: Plain text
#: org-mode.org:5677
msgid ""
"For these types of notes and tasks I add a special =:FLAGGED:= tag.  This "
"tag gets a special fast-key =?= which matches the search key in the agenda "
"for flagged items.  See [[#OrgTagAlist][Tags]] for the setup of "
"=org-tag-alist= for the =FLAGGED= entry."
msgstr ""

#. type: Plain text
#: org-mode.org:5683
msgid ""
"Finding flagged entries is then simple - just =F12 ?= and you get them all.  "
"** Mail links open compose-mail :PROPERTIES: :CUSTOM_ID: "
"MailLinksOpenComposeMail :END:"
msgstr ""

#. type: Plain text
#: org-mode.org:5686
msgid ""
"The following setting makes org-mode open =mailto:= links using "
"compose-mail."
msgstr ""

#. type: Plain text
#: org-mode.org:5695
msgid ""
"#+header: :tangle yes #+begin_src emacs-lisp (setq org-link-mailto-program "
"(quote (compose-mail \"%a\" \"%s\")))  #+end_src ** Composing mail from org "
"mode subtrees :PROPERTIES: :CUSTOM_ID: MailingSubtrees :END:"
msgstr ""

#. type: Plain text
#: org-mode.org:5706
msgid ""
"It's possible to create mail from an org-mode subtree.  I use =C-c M-o= to "
"start an email message with the details filled in from the current subtree.  "
"I use this for repeating reminder tasks where I need to send an email to "
"someone else.  The email contents are already contained in the org-mode "
"subtree and all I need to do is =C-c M-o= and any minor edits before sending "
"it off.  ** Use smex for M-x ido-completion :PROPERTIES: :CUSTOM_ID: "
"SmexAndIdo :END:"
msgstr ""

#. type: Plain text
#: org-mode.org:5710
msgid ""
"I discovered smex for IDO-completion for M-x commands after reading a post "
"of the org-mode mailing list.  I actually use M-x a lot now because IDO "
"completion is so easy."
msgstr ""

#. type: Plain text
#: org-mode.org:5717
msgid ""
"Here's the smex setup I use #+header: :tangle yes #+begin_src emacs-lisp "
"(add-to-list 'load-path (expand-file-name \"~/.emacs.d\"))  (require 'smex)  "
"(smex-initialize)"
msgstr ""

#. type: Plain text
#: org-mode.org:5726
msgid ""
"(global-set-key (kbd \"M-x\") 'smex)  (global-set-key (kbd \"C-x x\") 'smex)  "
"(global-set-key (kbd \"M-X\") 'smex-major-mode-commands)  #+end_src ** Use "
"Emacs bookmarks for fast navigation :PROPERTIES: :CUSTOM_ID: "
"BookmarksFastNavigation :END:"
msgstr ""

#. type: Plain text
#: org-mode.org:5731
msgid ""
"I've started using emacs bookmarks to save a location and return to it "
"easily.  Normally I want to get back to my currently clocking task and "
"that's easy - just hit =F11=.  When I'm working down a long checklist I find "
"it convenient to set a bookmark on the next item to check, then go away and "
"work on it, and return to the checkbox to mark it done."
msgstr ""

#. type: Plain text
#: org-mode.org:5733
msgid "I use Emacs bookmarks for this setup as follows:"
msgstr ""

#. type: Plain text
#: org-mode.org:5741
msgid ""
"#+header: :tangle yes #+begin_src emacs-lisp ;; Bookmark handling ;; "
"(global-set-key (kbd \"<C-f6>\") '(lambda () (interactive) (bookmark-set "
"\"SAVED\")))  (global-set-key (kbd \"<f6>\") '(lambda () (interactive) "
"(bookmark-jump \"SAVED\")))  #+end_src"
msgstr ""

#. type: Plain text
#: org-mode.org:5749
msgid ""
"When I want to save the current location I just hit =C-f6= and then I can "
"return to it with =f6= anytime.  I overwrite the same bookmark each time I "
"set a new position.  ** Using org-mime to email :PROPERTIES: :CUSTOM_ID: "
"OrgMimeMail :END:"
msgstr ""

#. type: Plain text
#: org-mode.org:5752
msgid ""
"I'm experimenting with sending mime mail from org.  I've added =C-c M=o= key "
"bindings in the =org-mode-hook= to generate mail from an org-mode subtree."
msgstr ""

#. type: Plain text
#: org-mode.org:5762
msgid ""
"#+header: :tangle yes #+begin_src emacs-lisp (require 'org-mime)  #+end_src "
"** Remove multiple state change log details from the agenda :PROPERTIES: "
":CUSTOM_ID: StateChangeDetailsInAgenda :END: [2011-04-30 Sat 11:14]"
msgstr ""

#. type: Plain text
#: org-mode.org:5764
msgid ""
"I skip multiple timestamps for the same entry in the agenda view with the "
"following setting."
msgstr ""

#. type: Plain text
#: org-mode.org:5769
msgid ""
"#+header: :tangle yes #+begin_src emacs-lisp (setq "
"org-agenda-skip-additional-timestamps-same-entry t)  #+end_src"
msgstr ""

#. type: Plain text
#: org-mode.org:5777
msgid ""
"This removes the clutter of extra state change log details when multiple "
"timestamps exist in a single entry.  ** Drop old style references in tables "
":PROPERTIES: :CUSTOM_ID: OldTableReferences :END: [2011-04-30 Sat 11:19]"
msgstr ""

#. type: Plain text
#: org-mode.org:5780
msgid ""
"I drop the old A3/B4 style references from tables when editing with the "
"following setting."
msgstr ""

#. type: Plain text
#: org-mode.org:5790
msgid ""
"#+header: :tangle yes #+begin_src emacs-lisp (setq "
"org-table-use-standard-references (quote from))  #+end_src ** Use system "
"settings for file-application selection :PROPERTIES: :CUSTOM_ID: "
"SystemSettingsForApplicationSelection :END: [2011-04-30 Sat 14:38]"
msgstr ""

#. type: Plain text
#: org-mode.org:5792
msgid ""
"To get consistent applications for opening tasks I set the =org-file-apps= "
"variable as follows:"
msgstr ""

#. type: Plain text
#: org-mode.org:5800
#, no-wrap
msgid ""
"#+header: :tangle yes\n"
"#+begin_src emacs-lisp\n"
"(setq org-file-apps (quote ((auto-mode . emacs)\n"
"                            (\"\\\\.mm\\\\'\" . system)\n"
"                            (\"\\\\.x?html?\\\\'\" . system)\n"
"                            (\"\\\\.pdf\\\\'\" . system))))\n"
"#+end_src\n"
msgstr ""

#. type: Plain text
#: org-mode.org:5809
msgid ""
"This uses the entries defined in my system =mailcap= settings when opening "
"file extensions.  This gives me consistent behaviour when opening an link to "
"some HTML file with =C-c C-o= or when previewing an export.  ** Use the "
"current window for the agenda :PROPERTIES: :CUSTOM_ID: "
"CurrentWindowForAgenda :END: [2011-05-28 Sat 21:20]"
msgstr ""

#. type: Plain text
#: org-mode.org:5820
msgid ""
"#+header: :tangle yes #+begin_src emacs-lisp ; Overwrite the current window "
"with the agenda (setq org-agenda-window-setup 'current-window)  #+end_src ** "
"Delete IDs when cloning :PROPERTIES: :CUSTOM_ID: DeleteIdsWhenCloning :END: "
"[2011-05-28 Sat 21:27]"
msgstr ""

#. type: Plain text
#: org-mode.org:5829
msgid ""
"#+header: :tangle yes #+begin_src emacs-lisp (setq org-clone-delete-id t)  "
"#+end_src ** Cycling plain lists :PROPERTIES: :CUSTOM_ID: CyclePlainLists "
":END:"
msgstr ""

#. type: Plain text
#: org-mode.org:5835
msgid ""
"Org mode can fold (cycle) plain lists.  #+header: :tangle yes #+begin_src "
"emacs-lisp (setq org-cycle-include-plain-lists t)  #+end_src"
msgstr ""

#. type: Plain text
#: org-mode.org:5842
msgid ""
"I find this setting useful when I have repeating tasks with lots of sublists "
"with checkboxes.  I can fold the completed list entries and focus on what is "
"remaining easily.  ** Showing source block syntax highlighting :PROPERTIES: "
":CUSTOM_ID: ShowSrcBlockSyntax :END:"
msgstr ""

#. type: Plain text
#: org-mode.org:5849
msgid ""
"It is possible to display org-mode source blocks fontified in their native "
"mode.  This allows colourization of keywords for C and shell script source "
"etc.  If I edit the source I use =C-c '= (control-c single quote) to bring "
"up the source window which is then rendered with syntax highlighting in the "
"native mode.  This setting also shows the syntax highlighting when viewing "
"in the org-mode buffer."
msgstr ""

#. type: Plain text
#: org-mode.org:5859
msgid ""
"#+header: :tangle yes #+begin_src emacs-lisp (setq org-src-fontify-natively "
"t)  #+end_src ** Inserting Structure Template Blocks :PROPERTIES: "
":CUSTOM_ID: StructureTemplateBlocks :END: [2012-03-04 Sun 11:42]"
msgstr ""

#. type: Plain text
#: org-mode.org:5862
msgid ""
"There is a shortcut key sequence in org-mode to insert structure templates "
"quickly into your org files."
msgstr ""

#. type: Plain text
#: org-mode.org:5864
msgid "I use example and source blocks often in my org files."
msgstr ""

#. type: Plain text
#: org-mode.org:5869
#, no-wrap
msgid ""
"| Key Sequence | Expands to                        |\n"
"|--------------+-----------------------------------|\n"
"| < s TAB      | #+begin_src ... #+end_src         |\n"
"| < e TAB      | #+begin_example ... #+end_example |\n"
msgstr ""

#. type: Plain text
#: org-mode.org:5872
msgid ""
"I've added a block for saving email text which I copy from MS Outlook at "
"work so I have context associated with my org-mode tasks."
msgstr ""

#. type: Plain text
#: org-mode.org:5875
msgid ""
"The following lisp makes the blocks lowercase instead of the default upper "
"case in org-mode."
msgstr ""

#. type: Plain text
#: org-mode.org:5893
#, no-wrap
msgid ""
"#+header: :tangle yes\n"
"#+begin_src emacs-lisp\n"
"(setq org-structure-template-alist\n"
"      (quote ((\"s\" \"#+begin_src ?\\n\\n#+end_src\" \"<src "
"lang=\\\"?\\\">\\n\\n</src>\")\n"
"              (\"e\" \"#+begin_example\\n?\\n#+end_example\" "
"\"<example>\\n?\\n</example>\")\n"
"              (\"q\" \"#+begin_quote\\n?\\n#+end_quote\" "
"\"<quote>\\n?\\n</quote>\")\n"
"              (\"v\" \"#+begin_verse\\n?\\n#+end_verse\" "
"\"<verse>\\n?\\n</verse>\")\n"
"              (\"c\" \"#+begin_center\\n?\\n#+end_center\" "
"\"<center>\\n?\\n</center>\")\n"
"              (\"l\" \"#+begin_latex\\n?\\n#+end_latex\" \"<literal "
"style=\\\"latex\\\">\\n?\\n</literal>\")\n"
"              (\"L\" \"#+latex: \" \"<literal "
"style=\\\"latex\\\">?</literal>\")\n"
"              (\"h\" \"#+begin_html\\n?\\n#+end_html\" \"<literal "
"style=\\\"html\\\">\\n?\\n</literal>\")\n"
"              (\"H\" \"#+html: \" \"<literal "
"style=\\\"html\\\">?</literal>\")\n"
"              (\"a\" \"#+begin_ascii\\n?\\n#+end_ascii\")\n"
"              (\"A\" \"#+ascii: \")\n"
"              (\"i\" \"#+index: ?\" \"#+index: ?\")\n"
"              (\"I\" \"#+include %file ?\" \"<include file=%file "
"markup=\\\"?\\\">\"))))\n"
"#+end_src\n"
msgstr ""

#. type: Plain text
#: org-mode.org:5899
#, no-wrap
msgid ""
"** NEXT is for tasks\n"
":PROPERTIES:\n"
":CUSTOM_ID: NextTasks\n"
":END:\n"
"[2012-03-04 Sun 12:41]\n"
msgstr ""

#. type: Plain text
#: org-mode.org:5904
msgid ""
"=NEXT= keywords are for *tasks* and not *projects*.  I've added a function "
"to the todo state change hook and clock in hook so that any parent tasks "
"marked =NEXT= automagically change from =NEXT= to =TODO= since they are now "
"projects and not tasks."
msgstr ""

#. type: Plain text
#: org-mode.org:5917
#, no-wrap
msgid ""
"#+header: :tangle yes\n"
"#+begin_src emacs-lisp\n"
"(defun bh/mark-next-parent-tasks-todo ()\n"
"  \"Visit each parent task and change NEXT states to TODO\"\n"
"  (let ((mystate (or (and (fboundp 'org-state)\n"
"                          state)\n"
"                     (nth 2 (org-heading-components)))))\n"
"    (when mystate\n"
"      (save-excursion\n"
"        (while (org-up-heading-safe)\n"
"          (when (member (nth 2 (org-heading-components)) (list \"NEXT\"))\n"
"            (org-todo \"TODO\")))))))\n"
msgstr ""

#. type: Plain text
#: org-mode.org:5926
msgid ""
"(add-hook 'org-after-todo-state-change-hook 'bh/mark-next-parent-tasks-todo "
"'append)  (add-hook 'org-clock-in-hook 'bh/mark-next-parent-tasks-todo "
"'append)  #+end_src ** Startup in folded view :PROPERTIES: :CUSTOM_ID: "
"StartupView :END: [2012-04-08 Sun 07:26]"
msgstr ""

#. type: Plain text
#: org-mode.org:5928
msgid "Startup in folded view."
msgstr ""

#. type: Plain text
#: org-mode.org:5933
msgid ""
"#+header: :tangle yes #+begin_src emacs-lisp (setq org-startup-folded t)  "
"#+end_src"
msgstr ""

#. type: Plain text
#: org-mode.org:5942
msgid ""
"I used to use content view by default so I could review org subtrees before "
"archiving but my archiving workflow has changed so I no longer need this "
"manual step.  ** Allow alphabetical list entries :PROPERTIES: :CUSTOM_ID: "
"AlphabeticalLists :END: [2012-06-06 Wed 22:23]"
msgstr ""

#. type: Plain text
#: org-mode.org:5944
msgid "The following setting adds alphabetical lists like"
msgstr ""

#. type: Plain text
#: org-mode.org:5949
msgid "#+begin_src org :exports src a. item one b. item two #+end_src"
msgstr ""

#. type: Plain text
#: org-mode.org:5954
msgid ""
"#+header: :tangle no #+begin_src emacs-lisp (setq org-alphabetical-lists t)  "
"#+end_src"
msgstr ""

#. type: Plain text
#: org-mode.org:5962
msgid ""
"In order for filling to work correctly this needs to be set before the "
"exporters are loaded.  ** Using orgstruct mode for mail :PROPERTIES: "
":CUSTOM_ID: OrgStructModeForMail :END: [2012-06-24 Sun 11:16]"
msgstr ""

#. type: Plain text
#: org-mode.org:5965
msgid ""
"=orgstruct++-mode= is enabled in =Gnus= message buffers to aid in creating "
"structured email messages."
msgstr ""

#. type: Plain text
#: org-mode.org:5982
#, no-wrap
msgid ""
"#+header: :tangle yes\n"
"#+begin_src emacs-lisp\n"
"(add-hook 'message-mode-hook 'orgstruct++-mode 'append)\n"
"(add-hook 'message-mode-hook 'turn-on-auto-fill 'append)\n"
"(add-hook 'message-mode-hook 'bbdb-define-all-aliases 'append)\n"
"(add-hook 'message-mode-hook 'orgtbl-mode 'append)\n"
"(add-hook 'message-mode-hook 'turn-on-flyspell 'append)\n"
"(add-hook 'message-mode-hook\n"
"          '(lambda () (setq fill-column 72))\n"
"          'append)\n"
"#+end_src\n"
"** Using flyspell mode to reduce spelling errors\n"
":PROPERTIES:\n"
":CUSTOM_ID: FlySpellModeChecksSpelling\n"
":END:\n"
"[2012-06-24 Sun 11:17]\n"
msgstr ""

#. type: Plain text
#: org-mode.org:5985
msgid ""
"=flyspell-mode= is enabled for almost everything to help prevent creating "
"documents with spelling errors."
msgstr ""

#. type: Plain text
#: org-mode.org:5990
msgid ""
"#+header: :tangle yes #+begin_src emacs-lisp ;; flyspell mode for spell "
"checking everywhere (add-hook 'org-mode-hook 'turn-on-flyspell 'append)"
msgstr ""

#. type: Plain text
#: org-mode.org:6006
#, no-wrap
msgid ""
";; Disable keys in org-mode\n"
";;    C-c [ \n"
";;    C-c ]\n"
";;    C-c ;\n"
";;    C-c C-x C-q  cancelling the clock (we never want this)\n"
"(add-hook 'org-mode-hook\n"
"          '(lambda ()\n"
"             ;; Undefine C-c [ and C-c ] since this breaks my\n"
"             ;; org-agenda files when directories are include It\n"
"             ;; expands the files in the directories individually\n"
"             (org-defkey org-mode-map \"\\C-c[\" 'undefined)\n"
"             (org-defkey org-mode-map \"\\C-c]\" 'undefined)\n"
"             (org-defkey org-mode-map \"\\C-c;\" 'undefined)\n"
"             (org-defkey org-mode-map \"\\C-c\\C-x\\C-q\" 'undefined))\n"
"          'append)\n"
msgstr ""

#. type: Plain text
#: org-mode.org:6011
#, no-wrap
msgid ""
"(add-hook 'org-mode-hook\n"
"          (lambda ()\n"
"            (local-set-key (kbd \"C-c M-o\") 'bh/mail-subtree))\n"
"          'append)\n"
msgstr ""

#. type: Plain text
#: org-mode.org:6017
#, no-wrap
msgid ""
"(defun bh/mail-subtree ()\n"
"  (interactive)\n"
"  (org-mark-subtree)\n"
"  (org-mime-subtree))\n"
"#+end_src\n"
msgstr ""

#. type: Plain text
#: org-mode.org:6026
#, no-wrap
msgid ""
"** Preserving source block indentation\n"
":PROPERTIES:\n"
":CUSTOM_ID: PreserveSourceIndentations\n"
":END:\n"
"I do not preserve indentation for source blocks mainly because this doesn't "
"look\n"
"nice with indented org-files.  The only reason I've found to preserve "
"indentation is\n"
"when TABs in files need to be preserved (e.g. Makefiles).  I don't normally "
"edit\n"
"these files in org-mode so I leave this setting turned off.\n"
msgstr ""

#. type: Plain text
#: org-mode.org:6030
msgid ""
"I've changed the default block indentation so that it is not indented from "
"the text in the org file.  This allows editing source blocks in place "
"without requiring use of =C-c '= so that code lines up correctly."
msgstr ""

#. type: Plain text
#: org-mode.org:6041
msgid ""
"#+header: :tangle yes #+begin_src emacs-lisp (setq "
"org-src-preserve-indentation nil)  (setq org-edit-src-content-indentation 0)  "
"#+end_src ** Prevent editing invisible text :PROPERTIES: :CUSTOM_ID: "
"PreventInvisibleEdits :END: [2012-07-20 Fri 22:26]"
msgstr ""

#. type: Plain text
#: org-mode.org:6044
msgid ""
"The following setting prevents accidentally editing hidden text when the "
"point is inside a folded region.  This can happen if you are in the body of "
"a heading and globally fold the org-file with =S-TAB="
msgstr ""

#. type: Plain text
#: org-mode.org:6048
msgid ""
"I find invisible edits (and undo's) hard to deal with so now I can't edit "
"invisible text.  =C-c C-r= (org-reveal) will display where the point is if "
"it is buried in invisible text to allow editing again."
msgstr ""

#. type: Plain text
#: org-mode.org:6058
msgid ""
"#+header: :tangle yes #+begin_src emacs-lisp (setq org-catch-invisible-edits "
"'error)  #+end_src ** Use utf-8 as default coding system :PROPERTIES: "
":CUSTOM_ID: DefaultCodingSystem :END: [2013-01-01 Tue 13:49]"
msgstr ""

#. type: Plain text
#: org-mode.org:6060
msgid "I use =utf-8= as the default coding system for all of my org files."
msgstr ""

#. type: Plain text
#: org-mode.org:6068
msgid ""
"#+header: :tangle yes #+begin_src emacs-lisp (setq org-export-coding-system "
"'utf-8)  (prefer-coding-system 'utf-8)  (set-charset-priority 'unicode)  "
"(setq default-process-coding-system '(utf-8-unix . utf-8-unix))  #+end_src"
msgstr ""

#. type: Plain text
#: org-mode.org:6074
#, no-wrap
msgid ""
"** Keep clock durations in hours\n"
":PROPERTIES:\n"
":CUSTOM_ID: ClockDurationsNoDays\n"
":END:\n"
"[2013-02-17 Sun 12:37]\n"
msgstr ""

#. type: Plain text
#: org-mode.org:6079
msgid ""
"The default for clock durations has changed to include days which is 24 "
"hours.  At work I like to think of a day as 6 hours of work (the rest of the "
"time is lost in meetings and other overhead on average) so displaying clock "
"durations in days doesn't make sense to me."
msgstr ""

#. type: Plain text
#: org-mode.org:6082
msgid ""
"The following setting displays clock durations (from =C-c C-x C-d= in hours "
"and minutes."
msgstr ""

#. type: Plain text
#: org-mode.org:6093
#, no-wrap
msgid ""
"#+header: :tangle yes\n"
"#+begin_src emacs-lisp\n"
"(setq org-time-clocksum-format\n"
"      '(:hours \"%d\" :require-hours t :minutes \":%02d\" :require-minutes "
"t))\n"
"#+end_src\n"
"** Create unique IDs for tasks when linking\n"
":PROPERTIES:\n"
":CUSTOM_ID: LinkingToTaskCreatesId\n"
":END:\n"
"[2013-06-23 Sun 10:38]\n"
msgstr ""

#. type: Plain text
#: org-mode.org:6097
msgid ""
"The following setting creates a unique task ID for the heading in the "
"=PROPERTY= drawer when I use =C-c l=.  This allows me to move the task "
"around arbitrarily in my org files and the link to it still works."
msgstr ""

#. type: Plain text
#: org-mode.org:6106
msgid ""
"#+header: :tangle yes #+begin_src emacs-lisp (setq org-id-link-to-org-use-id "
"'create-if-interactive-and-no-custom-id)  #+end_src * Things I Don't Use "
"(Anymore)  :PROPERTIES: :CUSTOM_ID: Unused :END:"
msgstr ""

#. type: Plain text
#: org-mode.org:6115
msgid ""
"This is a partial list of things I know about but do not use.  =org-mode= is "
"huge with tons of features.  There are features out there that I don't know "
"about yet or haven't explored so this list is not going to be complete.  ** "
"Archive Sibling :PROPERTIES: :CUSTOM_ID: ArchiveSibling :END:"
msgstr ""

#. type: Plain text
#: org-mode.org:6123
msgid ""
"This was a cute idea but I find archiving entire complete subtrees better.  "
"I don't mind having a bunch of tasks marked =DONE= (but not archived)  ** "
"Strike-through emphasis :PROPERTIES: :CUSTOM_ID: StrikeThroughEmphasis :END:"
msgstr ""

#. type: Plain text
#: org-mode.org:6127
msgid ""
"Strike-through emphasis is just unreadable and tends to only show up when "
"pasting data from other files into org-mode.  This just removes the "
"strike-through completely which I find a lot nicer."
msgstr ""

#. type: Plain text
#: org-mode.org:6140
#, no-wrap
msgid ""
"#+header: :tangle yes\n"
"#+begin_src emacs-lisp\n"
"(setq org-emphasis-alist (quote ((\"*\" bold \"<b>\" \"</b>\")\n"
"                                 (\"/\" italic \"<i>\" \"</i>\")\n"
"                                 (\"_\" underline \"<span "
"style=\\\"text-decoration:underline;\\\">\" \"</span>\")\n"
"                                 (\"=\" org-code \"<code>\" \"</code>\" "
"verbatim)\n"
"                                 (\"~\" org-verbatim \"<code>\" \"</code>\" "
"verbatim))))\n"
"#+end_src\n"
"** Subscripts and Superscripts\n"
":PROPERTIES:\n"
":CUSTOM_ID: SubscriptsAndSuperscripts\n"
":END:\n"
msgstr ""

#. type: Plain text
#: org-mode.org:6144
msgid ""
"I don't currently write documents that need subscripts and superscript "
"support.  I disable handling of =_= and =^= for subscript and superscripts "
"with"
msgstr ""

#. type: Plain text
#: org-mode.org:6153
msgid ""
"#+header: :tangle yes #+begin_src emacs-lisp (setq org-use-sub-superscripts "
"nil)  #+end_src ** Yasnippet :PROPERTIES: :CUSTOM_ID: Yasnippets :END:"
msgstr ""

#. type: Plain text
#: org-mode.org:6157
msgid ""
"[[http://code.google.com/p/yasnippet/][Yasnippet]] is cool but I don't use "
"this anymore.  I've replaced yasnippet with a combination of =abbrev-mode= "
"and =skeletons= which are available by default in Emacs."
msgstr ""

#. type: Plain text
#: org-mode.org:6160
msgid ""
"The following description applies to yasnippet version 0.5.10.  The setup "
"requirements may have changed with newer versions."
msgstr ""

#. type: Plain text
#: org-mode.org:6164
msgid ""
"You type the snippet name and =TAB= and yasnippet expands the name with the "
"contents of the snippet text - substituting snippet variables as "
"appropriate."
msgstr ""

#. type: Plain text
#: org-mode.org:6167
msgid ""
"Yasnippet comes with lots of snippets for programming languages.  I used a "
"few babel related snippets with =org-mode=."
msgstr ""

#. type: Plain text
#: org-mode.org:6172
msgid ""
"I downloaded and installed the unbundled version of yasnippet so that I can "
"edit the predefined snippets.  I unpacked the yasnippet software in my "
"=~/.emacs.d/plugins= directory, renamed =yasnippet0.5.10= to =yasnippet= and "
"added the following setup in my =.emacs=:"
msgstr ""

#. type: Plain text
#: org-mode.org:6176
msgid ""
"#+header: :tangle no #+begin_src emacs-lisp (add-to-list 'load-path "
"(expand-file-name \"~/.emacs.d/plugins\"))"
msgstr ""

#. type: Plain text
#: org-mode.org:6180
msgid ""
"(require 'yasnippet)  (yas/initialize)  (yas/load-directory "
"\"~/.emacs.d/plugins/yasnippet/snippets\")"
msgstr ""

#. type: Plain text
#: org-mode.org:6193
#, no-wrap
msgid ""
";; Make TAB the yas trigger key in the org-mode-hook and enable flyspell "
"mode and autofill\n"
"(add-hook 'org-mode-hook\n"
"          (lambda ()\n"
"            ;; yasnippet\n"
"            (make-variable-buffer-local 'yas/trigger-key)\n"
"            (org-set-local 'yas/trigger-key [tab])\n"
"            (define-key yas/keymap [tab] 'yas/next-field-group)\n"
"            ;; flyspell mode for spell checking everywhere\n"
"            (flyspell-mode 1)\n"
"            ;; auto-fill mode on\n"
"            (auto-fill-mode 1)))\n"
"#+end_src\n"
msgstr ""

#. type: Plain text
#: org-mode.org:6202
#, no-wrap
msgid ""
"I used snippets for the following:\n"
"  - =begin= for generic =#+begin_= blocks\n"
"  - =dot=   for graphviz\n"
"  - =uml=   for PlantUML graphics\n"
"  - =sh=    for bash shell scripts\n"
"  - =elisp= for emacs lisp code\n"
"  - initials of a person converts to their full name\n"
"    I used this while taking meeting notes\n"
msgstr ""

#. type: Plain text
#: org-mode.org:6204
msgid "Here is the definition for the =begin= snippet:"
msgstr ""

#. type: Plain text
#: org-mode.org:6211
#, no-wrap
msgid ""
"org-mode Yasnippet: "
"~/.emacs.d/plugins/yasnippet/snippets/text-mode/org-mode/begin\n"
":  #name : #+begin_...#+end_\n"
":  # --     \n"
":  #+begin_$1 $2\n"
":  $0\n"
":  #+end_$1\n"
msgstr ""

#. type: Plain text
#: org-mode.org:6216
msgid ""
"I used this to create =#+begin_*= blocks like - =#+begin_example= - "
"=#+begin_src= - etc."
msgstr ""

#. type: Plain text
#: org-mode.org:6221
msgid ""
"Simply type =begin= and then =TAB= it replaces the =begin= text with the "
"snippet contents.  Then type =src TAB emacs-lisp TAB= and your snippet block "
"is done.  I've shortened this specific sequence to just =elisp TAB= since I "
"use it fairly often."
msgstr ""

#. type: Plain text
#: org-mode.org:6228
msgid ""
"Hit =C-c SingeQuote(')= and insert whatever emacs-lisp code you need.  While "
"in this block you're in a mode that knows how to format and colourize emacs "
"lisp code as you enter it which is really nice.  =C-c SingleQuote(')= exits "
"back to org-mode.  This recognizes any emacs editing mode so all you have to "
"do is enter the appropriate mode name for the block."
msgstr ""

#. type: Plain text
#: org-mode.org:6235
msgid ""
"=dot= : #dot : #+begin_src dot ... #+end_src : # -- : #+begin_src dot :file "
"$1 :cmdline -Kdot -Tpng : $0 : #+end_src"
msgstr ""

#. type: Plain text
#: org-mode.org:6242
msgid ""
"=uml= : #uml : #+begin_src plantuml ... #+end_src : # -- : #+begin_src "
"plantuml :file $1 : $0 : #+end_src"
msgstr ""

#. type: Plain text
#: org-mode.org:6249
msgid ""
"=sh= : #sh: #+begin_src sh ... #+end_src : # -- : #+begin_src sh :results "
"output : $0 : #+end_src"
msgstr ""

#. type: Plain text
#: org-mode.org:6257
msgid ""
"=elisp= : #elisp : #+begin_src emacs-lisp ...#+end_src emacs-lisp : # -- : "
"#+begin_src emacs-lisp : $0 : #+end_src"
msgstr ""

#. type: Plain text
#: org-mode.org:6264
msgid ""
"This is a great time saver.  ** Show headings at odd levels only or odd-even "
"levels :PROPERTIES: :CUSTOM_ID: HeadingLevelsOddEven :END: This has been "
"replaced by org-indent-mode"
msgstr ""

#. type: Plain text
#: org-mode.org:6271
msgid ""
"I've converted my files between odd-levels-only and odd-even using the "
"functions =org-convert-to-odd-levels= and =org-convert-to-oddeven-levels= "
"functions a number of times.  I ended up going back to odd-even levels to "
"reduce the amount of leading whitespace on tasks.  I didn't find that lining "
"up the headlines and tasks in odd-levels-only to be all that helpful."
msgstr ""

#. type: Plain text
#: org-mode.org:6280
msgid ""
"#+header: :tangle yes #+begin_src emacs-lisp (setq org-odd-levels-only nil)  "
"#+end_src ** Propagate STARTED to parent tasks :PROPERTIES: :CUSTOM_ID: "
"PropagateStartedToParent :END:"
msgstr ""

#. type: Plain text
#: org-mode.org:6285
msgid ""
"I used to have a =STARTED= and =NEXT= task state.  These were basically the "
"same except =STARTED= indicated that I've clocked some time on the task.  "
"Since then I've just moved to using =NEXT= for this."
msgstr ""

#. type: Plain text
#: org-mode.org:6288
msgid ""
"The following code used to propagate the =STARTED= task up the project tree "
"but I don't use this anymore."
msgstr ""

#. type: Plain text
#: org-mode.org:6293
msgid ""
"When a task is marked =STARTED= (either manually or by clocking it in) the "
"=STARTED= state propagates up the tree to any parent tasks of this task that "
"are =TODO= or =NEXT=.  As soon as I work on the first =NEXT= task in a tree "
"the project is also marked =STARTED=.  This helps me keep track of things "
"that are in progress."
msgstr ""

#. type: Plain text
#: org-mode.org:6295
msgid "Here's the setup I use to propagate =STARTED= to parent tasks:"
msgstr ""

#. type: Plain text
#: org-mode.org:6300
msgid ""
"#+header: :tangle no #+begin_src emacs-lisp ;; Mark parent tasks as started "
"(defvar bh/mark-parent-tasks-started nil)"
msgstr ""

#. type: Plain text
#: org-mode.org:6310
#, no-wrap
msgid ""
"(defun bh/mark-parent-tasks-started ()\n"
"  \"Visit each parent task and change TODO states to STARTED\"\n"
"  (unless bh/mark-parent-tasks-started\n"
"    (when (equal org-state \"STARTED\")\n"
"      (let ((bh/mark-parent-tasks-started t))\n"
"        (save-excursion\n"
"          (while (org-up-heading-safe)\n"
"            (when (member (nth 2 (org-heading-components)) (list \"TODO\" "
"\"NEXT\"))\n"
"              (org-todo \"STARTED\"))))))))\n"
msgstr ""

#. type: Plain text
#: org-mode.org:6317
msgid ""
"(add-hook 'org-after-todo-state-change-hook 'bh/mark-parent-tasks-started "
"'append)  #+end_src ** Automatically clocking tasks :PROPERTIES: :CUSTOM_ID: "
"AutomaticallyClockingTasks :END:"
msgstr ""

#. type: Plain text
#: org-mode.org:6323
msgid ""
"I used to spend time on an open source project called BZFlag.  During work "
"for releases I want to clock the time I spend testing the new BZFlag "
"client.  I have a key binding in my window manager that runs a script which "
"starts the clock on my testing task, runs the BZFlag client, and on exit "
"resumes the clock on the previous clocking task."
msgstr ""

#. type: Plain text
#: org-mode.org:6327
msgid ""
"The testing task has an ID property of "
"=dcf55180-2a18-460e-8abb-a9f02f0893be= and the following elisp code starts "
"the clock on this task."
msgstr ""

#. type: Plain text
#: org-mode.org:6334
#, no-wrap
msgid ""
"#+header: :tangle no\n"
"#+begin_src emacs-lisp\n"
"(defun bh/clock-in-bzflagt-task ()\n"
"  (interactive)\n"
"  (bh/clock-in-task-by-id \"dcf55180-2a18-460e-8abb-a9f02f0893be\"))\n"
"#+end_src\n"
msgstr ""

#. type: Plain text
#: org-mode.org:6336
msgid "This is invoked by a bash shell script as follows:"
msgstr ""

#. type: Plain text
#: org-mode.org:6343
msgid ""
"#+begin_src sh :results output #!/bin/sh emacsclient -e "
"'(bh/clock-in-bzflagt-task)' ~/git/bzflag/trunk/bzflag/src/bzflag/bzflag "
"-directory ~/git/bzflag/trunk/bzflag/data $* emacsclient -e "
"'(bh/resume-clock)' #+end_src"
msgstr ""

#. type: Plain text
#: org-mode.org:6345
msgid ""
"The resume clock function just returns the clock to the previous clocking "
"task"
msgstr ""

#. type: Plain text
#: org-mode.org:6355
#, no-wrap
msgid ""
"#+header: :tangle no\n"
"#+begin_src emacs-lisp\n"
"(defun bh/resume-clock ()\n"
"  (interactive)\n"
"  (if (marker-buffer org-clock-interrupted-task)\n"
"      (org-with-point-at org-clock-interrupted-task\n"
"        (org-clock-in))\n"
"    (org-clock-out)))\n"
"#+end_src\n"
msgstr ""

#. type: Plain text
#: org-mode.org:6362
msgid ""
"If no task was clocking =bh/resume-clock= just stops the clock.  ** q buries "
"the agenda view buffer :PROPERTIES: :CUSTOM_ID: QBuriesAgenda :END: "
"[2011-12-20 Tue 23:52]"
msgstr ""

#. type: Plain text
#: org-mode.org:6365
msgid ""
"With [[#StickyAgendas][Sticky Agendas]] burying the buffer is the default "
"behaviour for the =q= key so this is not needed anymore."
msgstr ""

#. type: Plain text
#: org-mode.org:6370
msgid ""
"I change the =q= key in the agenda so instead of killing the agenda buffer "
"it merely buries it to the end of the buffer list.  This allows me to pull "
"it back up quickly with the =q= speed key or =f9 f9= and regenerate the "
"results with =g=."
msgstr ""

#. type: Plain text
#: org-mode.org:6382
#, no-wrap
msgid ""
"#+header: :tangle no\n"
"#+begin_src emacs-lisp\n"
"(add-hook 'org-agenda-mode-hook\n"
"          (lambda ()\n"
"            (define-key org-agenda-mode-map \"q\" 'bury-buffer))\n"
"          'append)\n"
"#+end_src\n"
"** Task Priorities\n"
":PROPERTIES:\n"
":CUSTOM_ID: TaskPriorities\n"
":END:\n"
msgstr ""

#. type: Plain text
#: org-mode.org:6388
msgid ""
"I use the agenda to figure out what to do work on next.  I don't use "
"priorities at all normally but at work I occasionally get priorities from my "
"manager.  In this case I mark my tasks with the priorities from the external "
"source just to track the values and force the agenda to display tasks in the "
"priority order."
msgstr ""

#. type: Plain text
#: org-mode.org:6400
msgid ""
"I use priorities A-E where tasks without a specific priority are lowest "
"priority E.  #+header: :tangle no #+begin_src emacs-lisp (setq "
"org-enable-priority-commands t)  (setq org-default-priority ?E)  (setq "
"org-lowest-priority ?E)  #+end_src * Using Git for Automatic History, "
"Backups, and Synchronization :PROPERTIES: :CUSTOM_ID: GitSync :END:"
msgstr ""

#. type: Plain text
#: org-mode.org:6404
msgid ""
"Editing folded regions of your org-mode file can be hazardous to your data.  "
"My method for dealing with this is to put my org files in a =Git= source "
"repository."
msgstr ""

#. type: Plain text
#: org-mode.org:6414
msgid ""
"My setup saves all of my org-files every hour and creates a commit with my "
"changes automatically.  This lets me go back in time and view the state of "
"my org files for any given hour over the lifetime of the document.  I've "
"used this once or twice to recover data I accidentally removed while editing "
"folded regions.  ** Automatic Hourly Commits :PROPERTIES: :CUSTOM_ID: "
"HourlyCommits :END:"
msgstr ""

#. type: Plain text
#: org-mode.org:6417
msgid ""
"My Emacs setup saves all org buffers at 1 minute before the hour using the "
"following code in my =.emacs="
msgstr ""

#. type: Plain text
#: org-mode.org:6422
msgid ""
"#+header: :tangle yes #+begin_src emacs-lisp (run-at-time \"00:59\" 3600 "
"'org-save-all-org-buffers)  #+end_src"
msgstr ""

#. type: Plain text
#: org-mode.org:6427
msgid ""
"A =cron= job runs at the top of the hour to commit any changes just saved by "
"the call to =org-save-all-org-buffers= above.  I use a script to create the "
"commits so that I can run it on demand to easily commit all modified work "
"when moving from one machine to another."
msgstr ""

#. type: Plain text
#: org-mode.org:6436
msgid ""
"=crontab= details: #+begin_example 0 * * * * ~/bin/org-git-sync.sh "
">/dev/null #+end_example *** ~/bin/org-git-sync.sh :PROPERTIES: :CUSTOM_ID: "
"OrgGitSyncSh :END:"
msgstr ""

#. type: Plain text
#: org-mode.org:6441
msgid ""
"Here is the shell script I use to create a =git= commit for each of my "
"org-repositories.  This loops through multiple repositories and commits any "
"modified files.  I have the following org-mode repositories:"
msgstr ""

#. type: Plain text
#: org-mode.org:6443
msgid "- org"
msgstr ""

#. type: Plain text
#: org-mode.org:6445
#, no-wrap
msgid "  for all of my organization project files and todo lists\n"
msgstr ""

#. type: Plain text
#: org-mode.org:6447
msgid "- doc-norang.ca"
msgstr ""

#. type: Plain text
#: org-mode.org:6449
#, no-wrap
msgid "  for any changes to documents under http://doc.norang.ca/\n"
msgstr ""

#. type: Plain text
#: org-mode.org:6451
msgid "- www.norang.ca"
msgstr ""

#. type: Plain text
#: org-mode.org:6453
#, no-wrap
msgid "  for any changes to my other website http://www.norang.ca/\n"
msgstr ""

#. type: Plain text
#: org-mode.org:6460
msgid ""
"This script does not create empty commits - =git= only creates a commit if "
"something was modified.  #+begin_src sh #!/bin/sh # Add org file changes to "
"the repository REPOS=\"org doc.norang.ca www.norang.ca\""
msgstr ""

#. type: Plain text
#: org-mode.org:6472
#, no-wrap
msgid ""
"for REPO in $REPOS\n"
"do\n"
"    echo \"Repository: $REPO\"\n"
"    cd ~/git/$REPO\n"
"    # Remove deleted files\n"
"    git ls-files --deleted -z | xargs -0 git rm >/dev/null 2>&1\n"
"    # Add new files\n"
"    git add . >/dev/null 2>&1\n"
"    git commit -m \"$(date)\"\n"
"done\n"
"#+end_src\n"
msgstr ""

#. type: Plain text
#: org-mode.org:6503
msgid ""
"I use the following =.gitignore= file in my org-mode =git= repositories to "
"keep export generated files out of my =git= repositories.  If I include a "
"graphic from some other source than ditaa or graphviz then I'll add it to "
"the repository manually.  By default all PNG graphic files are ignored "
"(since I assume they are produced by ditaa during export)  #+begin_example "
"core core.* ,*.html ,*~ .#* \\#*\\# ,*.txt ,*.tex ,*.aux ,*.dvi ,*.log "
",*.out ,*.ics ,*.pdf ,*.xml ,*.org-source *.png *.toc #+end_example ** Git - "
"Edit files with confidence :PROPERTIES: :CUSTOM_ID: GitEditWithConfidence "
":END:"
msgstr ""

#. type: Plain text
#: org-mode.org:6506
msgid "I use =git= in all of my directories where editing a file should be tracked."
msgstr ""

#. type: Plain text
#: org-mode.org:6512
msgid ""
"This means I can edit files with confidence.  I'm free to change stuff and "
"break things because it won't matter.  It's easy to go back to a previous "
"working version or to see exactly what changed since the last commit.  This "
"is great when editing configuration files (such as apache webserver, bind9 "
"DNS configurations, etc.)"
msgstr ""

#. type: Plain text
#: org-mode.org:6518
msgid ""
"I find this extremely useful where your edits might break things and having "
"=git= tracking the changes means if you break it you can just go back to the "
"previous working version easily.  This is also true for package upgrades for "
"software where the upgrade modifies the configuration files."
msgstr ""

#. type: Plain text
#: org-mode.org:6524
msgid ""
"I have every version of my edits in a local =git= repository.  ** Git "
"Repository synchronization :PROPERTIES: :CUSTOM_ID: git-sync :END:"
msgstr ""

#. type: Plain text
#: org-mode.org:6527
msgid ""
"I acquired a Eee PC 1000 HE which now serves as my main road-warrior laptop "
"replacing my 6 year old Toshiba Tecra S1."
msgstr ""

#. type: Plain text
#: org-mode.org:6532
msgid ""
"I have a server on my LAN that hosts bare git repositories for all of my "
"projects.  The problem I was facing is I have to leave in 5 minutes and want "
"to make sure I have up-to-date copies of everything I work on when I take it "
"on the road (without Internet access)."
msgstr ""

#. type: Plain text
#: org-mode.org:6536
msgid ""
"To solve this I use a server with bare git repositories on it.  This "
"includes my org-mode repositories as well as any other git repositories I'm "
"interested in."
msgstr ""

#. type: Plain text
#: org-mode.org:6545
msgid ""
"Just before I leave I run the =git-sync= script on my workstation to update "
"the bare git repositories and then I run it again on my Eee PC to update all "
"my local repositories on the laptop.  For any repositories that give errors "
"due to non-fast-forward merges I manually merge as required and rerun "
"=git-sync= until it reports no errors.  This normally takes a minute to two "
"to do.  Then I grab my Eee PC and leave.  When I'm on the road I have full "
"up-to-date history of all my git repositories."
msgstr ""

#. type: Plain text
#: org-mode.org:6548
msgid ""
"The =git-sync= script replaces my previous scripts with an all-in-one tool "
"that basically does this:"
msgstr ""

#. type: Plain text
#: org-mode.org:6557
#, no-wrap
msgid ""
"- for each repository on the current system\n"
"  - fetch objects from the remote\n"
"  - for each branch that tracks a remote branch\n"
"    - Check if the ref can be moved\n"
"      - fast-forwards if behind the remote repository and is "
"fast-forwardable\n"
"      - Does nothing if ref is up to date\n"
"      - Pushes ref to remote repository if ref is ahead of remote repository "
"and fast-forwardable\n"
"      - Fails if ref and remote have diverged\n"
msgstr ""

#. type: Plain text
#: org-mode.org:6562
msgid ""
"This automatically advances changes on my 35+ git repositories with minimal "
"manual intervention.  The only time I need to manually do something in a "
"repository is when I make changes on my Eee PC and my workstation at the "
"same time - so that a merge is required."
msgstr ""

#. type: Plain text
#: org-mode.org:6564
msgid "Here is the =git-sync= script"
msgstr ""

#. type: Plain text
#: org-mode.org:6568
msgid "#+begin_src sh #!/bin/sh #"
msgstr ""

#. type: Plain text
#: org-mode.org:6572
msgid "# Local bare repository name syncrepo=norang reporoot=~/git"
msgstr ""

#. type: Plain text
#: org-mode.org:6580
#, no-wrap
msgid ""
"# Display repository name only once\n"
"log_repo() {\n"
"  [ \"x$lastrepo\" == \"x$repo\" ] || {\n"
"    printf \"\\nREPO: ${repo}\\n\"\n"
"    lastrepo=\"$repo\"\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: org-mode.org:6586
#, no-wrap
msgid ""
"# Log a message for a repository\n"
"log_msg() {\n"
"  log_repo\n"
"  printf \"  $1\\n\"\n"
"}\n"
msgstr ""

#. type: Plain text
#: org-mode.org:6600
#, no-wrap
msgid ""
"# fast-forward reference $1 to $syncrepo/$1\n"
"fast_forward_ref() {\n"
"  log_msg \"fast-forwarding ref $1\"\n"
"  current_ref=$(cat .git/HEAD)\n"
"  if [ \"x$current_ref\" = \"xref: refs/heads/$1\" ]\n"
"  then\n"
"    # Check for dirty index\n"
"    files=$(git diff-index --name-only HEAD --)\n"
"    git merge refs/remotes/$syncrepo/$1\n"
"  else\n"
"    git branch -f $1 refs/remotes/$syncrepo/$1\n"
"  fi\n"
"}\n"
msgstr ""

#. type: Plain text
#: org-mode.org:6609
#, no-wrap
msgid ""
"# Push reference $1 to $syncrepo\n"
"push_ref() {\n"
"  log_msg \"Pushing ref $1\"\n"
"  if ! git push --tags $syncrepo $1\n"
"  then\n"
"    exit 1\n"
"  fi\n"
"}\n"
msgstr ""

#. type: Plain text
#: org-mode.org:6635
#, no-wrap
msgid ""
"# Check if a ref can be moved\n"
"#   - fast-forwards if behind the sync repo and is fast-forwardable\n"
"#   - Does nothing if ref is up to date\n"
"#   - Pushes ref to $syncrepo if ref is ahead of syncrepo and "
"fastforwardable\n"
"#   - Fails if ref and $syncrop/ref have diverged\n"
"check_ref() {\n"
"  revlist1=$(git rev-list refs/remotes/$syncrepo/$1..$1)\n"
"  revlist2=$(git rev-list $1..refs/remotes/$syncrepo/$1)\n"
"  if [ \"x$revlist1\" = \"x\" -a \"x$revlist2\" = \"x\" ]\n"
"  then\n"
"    # Ref $1 is up to date.\n"
"    :\n"
"  elif [ \"x$revlist1\" = \"x\" ]\n"
"  then\n"
"    # Ref $1 is behind $syncrepo/$1 and can be fast-forwarded.\n"
"    fast_forward_ref $1 || exit 1\n"
"  elif [ \"x$revlist2\" = \"x\" ]\n"
"  then\n"
"    # Ref $1 is ahead of $syncrepo/$1 and can be pushed.\n"
"    push_ref $1 || exit 1\n"
"  else\n"
"    log_msg \"Ref $1 and $syncrepo/$1 have diverged.\"\n"
"    exit 1\n"
"  fi\n"
"}\n"
msgstr ""

#. type: Plain text
#: org-mode.org:6650
#, no-wrap
msgid ""
"# Check all local refs with matching refs in the $syncrepo\n"
"check_refs () {\n"
"  git for-each-ref refs/heads/* | while read sha1 commit ref\n"
"  do\n"
"    ref=${ref/refs\\/heads\\//}\n"
"    git for-each-ref refs/remotes/$syncrepo/$ref | while read sha2 commit "
"ref2\n"
"    do\n"
"      if [ \"x$sha2\" != \"x\" -a \"x$sha2\" != \"x\" ]\n"
"      then\n"
"        check_ref $ref || exit 1\n"
"      fi\n"
"    done\n"
"  done\n"
"}\n"
msgstr ""

#. type: Plain text
#: org-mode.org:6677
#, no-wrap
msgid ""
"# For all repositories under $reporoot\n"
"#   Check all refs matching $syncrepo and fast-forward, or push as "
"necessary\n"
"#   to synchronize the ref with $syncrepo\n"
"#   Bail out if ref is not fastforwardable so user can fix and rerun\n"
"time {\n"
"  retval=0\n"
"  if find $reporoot -type d -name '*.git' | { \n"
"      while read repo\n"
"      do\n"
"        repo=${repo/\\/.git/}\n"
"        cd ${repo}\n"
"        upd=$(git remote update $syncrepo 2>&1 || retval=1)\n"
"        [ \"x$upd\" = \"xFetching $syncrepo\" ] || {\n"
"          log_repo\n"
"          printf \"$upd\\n\"\n"
"        }\n"
"        check_refs || retval=1\n"
"      done\n"
"      exit $retval\n"
"    }\n"
"  then\n"
"    printf \"\\nAll done.\\n\"\n"
"  else\n"
"    printf \"\\nFix and redo.\\n\"\n"
"  fi\n"
"}\n"
msgstr ""

#. type: Plain text
#: org-mode.org:6679
msgid "exit $retval #+end_src"
msgstr ""
